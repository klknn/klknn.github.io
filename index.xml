<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja"><title>klknn log</title><link href="https://klknn.github.io/"/><updated>2024-08-30T03:25:33+0900</updated><author><name>klknn</name></author><generator uri="https://gohugo.io" version="0.125.6">Hugo</generator><id>https://klknn.github.io/</id><entry><title>スバル インプレッサ購入</title><link href="https://klknn.github.io/posts/gvb/"/><id>https://klknn.github.io/posts/gvb/</id><published>2024-08-30T03:25:33+0900</published><updated>2024-08-30T03:25:33+0900</updated><summary type="html">WRX STi Spec C GVB 型 (以下GVB) を買いました。前の車 BMW 220 は東京にきた数年前に手放してしまったので久々のマイカーです。 ...</summary><content type="html"><![CDATA[<p>WRX STi Spec C GVB 型 (以下GVB) を買いました。前の車 BMW 220 は東京にきた数年前に手放してしまったので久々のマイカーです。
<img src="https://github.com/user-attachments/assets/2ac85deb-c55b-4df3-813f-36c258955222" alt="GSDbnPSaAAA2uV7"></p>
<p>型式は 2013 年登録で、走行距離は2万7千kmの低走行車が約300万円でした。正直相場より高いと思うんですが、1オーナーかつディーラー整備、販売がホンダ(前オーナーが乗換時に買取)で2年保証付きというスバル販売の次に信頼できるブツだったのです。下手に200万円前後の同条件よりも私のような車素人には価値がありました。
<img src="https://github.com/user-attachments/assets/b646c31e-7b6b-4e52-8d5f-ec29b19b03f9" alt="GLgaRGBbMAAeYsu"></p>
<h2 id="購入の動機">購入の動機</h2>
<p>東京に引っ越して以来数年間使っているタイムズカーシェアにも飽きてきて、夏に子供二人目生まれるし、そろそろ移動は車メインになるので、第二児についてはまた落ち着いたら別の記事で書きます。</p>
<h2 id="約半年のった感想">約半年のった感想</h2>
<p>結局都内在住だとそんなに乗ってなくて半年で1000km超走りました。納車時の興奮も落ち着いて段々と良いところ・悪いところが見えてきたので書いていきます。</p>
<h3 id="良いとこ">良いとこ</h3>
<p>速い、楽しい（終わり）。元バイク乗りとしてはもちろん純粋な運転の楽しみはより旧い車とかバイクのほうがいいと思うんですが、5ナンバー化した時代でも油圧パワステのせて、ブレンボ前後ブレーキで採用、基本FRベースな4WDで楽しくないはずがないですからね。</p>
<p>実用性はまったく問題なし。後席は巨漢には狭いかもしれませんが、女性や子供は快適みたいです。
WRCホモロゲとかに目を瞑ると、出自はファミリーカー(!)なので荷室も広いです。分厚いもの（自転車、組立済の家具とか）を載せたければ5ドアタイプのGRBがいいかもしれません。
<img src="https://github.com/user-attachments/assets/6bfb5d43-66bb-4c9c-b39f-079c8401be77" alt="GWC7Y4JbUAAtqRZ"></p>
<p>MTは最初坂道発進とかだるいな〜と思ってたら、ヒルアシスト(?)という補助機能があり1速に入れてブレーキ踏んでかつハンドブレーキかかってないときだけ、自動でブレーキを1,2秒ほど踏んでくれるので、一回も坂道発進で失敗したことはないです。最初はちょっと怖いけど、いまは坂道なのかどうかビクビクしながら運転することはなくなりました。</p>
<p>電子制御周りDCCDこと可変デフは全然使いこなせる気はしないんですが、i/S/S#モードのECU切り替えは結構便利です。S#モードは高速道路でも持て余すレベルですが、ときには公道最速の片鱗を味わいたいものですしね。</p>
<h3 id="悪いとこ">悪いとこ</h3>
<p>不満ほとんどないんですが、一つあげるならやはり車幅がくそでかく、リアのオーバーハングがながいので細道や駐車が大変です。久々のMTですが、傾斜のある駐車場ではクラッチから焦げた匂いがしたり、エンスト祭りになっちゃうので避けましょう。</p>
<p>補足としてspec Cは軽量化のために安全対策も省略されていて、夜間自動点灯やキーレスエントリーなんかもなく、遮音材もほとんどないので高速道路でラジオは聞けないと思ったほうが良いです。僕は軽いほうがいいので、快適装備いるかいらないかでいえばいらないですけども。</p>
<h3 id="維持費用">維持費用</h3>
<p>燃費は悪いです、ハイオクで10km/L。まぁ過給器付きの本格スポーツカーよりはマシといったところです。</p>
<p>駐車場は23区内なので最悪です。大阪住んでた頃はほとんど無料でしたが、いまは3万円もします（倍額の駐車場すらあった）。でも高級マンションの地下駐車場でしっかりした場所なので、いろいろ防犯対策とか、洗車にかけるお金が節約できたと考えて納得してます。</p>
<p>保険はBMWより圧倒的に安くて、同じ内容で数倍安いです。あまりに安くて対物対人傷害無制限、車両保険も結構いいやつつけて1万円ちょい。さすがはファミリーカーです。</p>
<p>洗車は最初手洗いでやるつもりでしたが、サボってるうちに第二子が生まれ近所のガソスタで傷がつきにくい機械式があると口コミでみたもので試してみたらピカピカになりました。ガラスコーティングの素晴らしいところですね。
<img src="https://github.com/user-attachments/assets/f5932997-96d9-40e5-8927-80be8481196c" alt="GUHv5VzbQAAy3Sc"></p>
<p>車検&hellip;は来月なんですがあんまり心配してないです。納車1ヶ月でも検査してもらいましたし、パーツや工賃もBMWほど法外でもないでしょう。</p>
<h2 id="まとめ">まとめ</h2>
<p>最後になりますが、やはりポルシェですら真のMTを販売しなくなった今、水平対向エンジンにMTでドコドコ湾岸線をかっとばすのは最高です。たぶん次は自動運転とか電気自動車なボルボやテスラあたりを買ってるんでしょうが、あと10年くらいはこのアナログでヤンチャな車を乗り続けたいです。</p>]]></content></entry><entry><title>周波数Hz比から半音階への変換</title><link href="https://klknn.github.io/posts/hz2cent/"/><id>https://klknn.github.io/posts/hz2cent/</id><published>2024-08-12T13:25:33+0900</published><updated>2024-08-12T13:25:33+0900</updated><summary type="html">オーケストラなどA=440Hz以外の基準周波数で録音するとき、440Hzで設定されてるプラグイン側の周波数を修正したいことはよくある。しかし大抵は半音単位やセントでチューニングを指定することになる。それを自動的に求めるJSを書いてみた。
...</summary><content type="html"><![CDATA[<p>オーケストラなどA=440Hz以外の基準周波数で録音するとき、440Hzで設定されてるプラグイン側の周波数を修正したいことはよくある。しかし大抵は半音単位やセントでチューニングを指定することになる。それを自動的に求めるJSを書いてみた。</p>
<h2 id="やり方">やり方</h2>
<p>プラグイン標準の基準周波数 x (例 440Hz) 、目的の基準周波数 y (例 443Hz) に変更するには半音階のパラメータ z との間には、1オクターブ (= 2倍の周波数間) を12等分する平均律の定義から:</p>
<p>\begin{align}
2 ^\frac{z}{12} &amp;= \frac{y}{x} \newline
z &amp;= 12 \log_2 \frac{y}{x}
\end{align}</p>
<p>たとえば 440Hz の音源を 443Hz にピッチシフトしたい場合は $ z = 12 \log_2 \frac{443}{440} = 0.1176381&hellip; $ 半音上げれば良い。関数電卓が手元にない人のためにJavaScriptで書いてみると、こんな感じ:</p>


<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">cent</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#39;cent&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">target</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#39;target&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">source</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#39;source&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">hz2cent</span>(<span style="color:#a6e22e">unused</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">src</span> <span style="color:#f92672">=</span> parseFloat(<span style="color:#a6e22e">source</span>.<span style="color:#a6e22e">value</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tgt</span> <span style="color:#f92672">=</span> parseFloat(<span style="color:#a6e22e">target</span>.<span style="color:#a6e22e">value</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">cent</span>.<span style="color:#a6e22e">innerText</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">12</span> <span style="color:#f92672">*</span> Math.<span style="color:#a6e22e">log2</span>(<span style="color:#a6e22e">tgt</span> <span style="color:#f92672">/</span> <span style="color:#a6e22e">src</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">hz2cent</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">source</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;keyup&#39;</span>, <span style="color:#a6e22e">hz2cent</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">target</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;keyup&#39;</span>, <span style="color:#a6e22e">hz2cent</span>);
</span></span></code></pre></div>

<p>
  <ul>
    <li>Source [Hz]: <textarea id="source" rows="1">440</textarea></li>
    <li>Target [Hz]: <textarea id="target" rows="1">443</textarea></li>
    <li>Note: <span id="cent">0</span></li>
  </ul>
</p>
<script src="/js/hz2cent.js"></script>

<h2 id="プラグインの設定">プラグインの設定</h2>
<p>シンセサイザーなどはユニゾンのためなど比較的わかりやすくfinetuneなどの項目があるが、サンプラー系はわかりにくいので注意。</p>
<p>East West Playの場合はここ</p>
<p><img src="https://github.com/user-attachments/assets/24662da4-5886-4d44-bbed-39bab4f8579c" alt="image"></p>
<p>Kontakt の場合はここ</p>
<p><img src="https://github.com/user-attachments/assets/0754f988-b824-41ce-a1db-bdb5a9263c18" alt="image"></p>]]></content></entry><entry><title>IK ARC Studio、バイオリン購入など</title><link href="https://klknn.github.io/posts/20240506/"/><id>https://klknn.github.io/posts/20240506/</id><published>2024-05-06T20:25:33+0900</published><updated>2024-05-06T20:25:33+0900</updated><summary type="html">色々と買い物をした。音響補正最高！
...</summary><content type="html"><![CDATA[<p>色々と買い物をした。音響補正最高！</p>
<p><img src="https://github.com/klknn/klknn.github.io/assets/57452864/f97eb489-3389-4548-ac81-7feb12103f7d" alt="ARCSTUDIO"></p>
<h2 id="ik-multimedia-arc-studio">IK Multimedia ARC STUDIO</h2>
<p><a href="https://www.ikmultimedia.com/products/arcstudio/">https://www.ikmultimedia.com/products/arcstudio/</a></p>
<p>音響補正する&quot;ハードウェア&quot;。以前Adam A7Xを買ったときに後継のA7VだったらDSP付いてて、ずっと気になっていました。本製品は5万円であらゆるスピーカーに音響補正をスピーカーとオーディオ出力の間に繋ぐだけでかけられる革命的なプロダクト。私はLinux, MacやWindowsといった複数のマシンを気分によって切り替えたりするので（ディスプレイにオーディオIFなど周辺機器を全部繋いでUSBケーブルを抜き差しで切り替えるスタイル）、専用ハードウェアがPCなしでも動くのが利用シーンに最適でした。</p>
<h3 id="良いところ">良いところ</h3>
<p>正直、この手の製品はたいてい音が悪くなったりレイテンシーがストレスになることは知ってたので、導入することでモニター音をよくしてやろうというより、現状の部屋の音響特性を把握して、ミックスの最終チェックやらマスタリングなどの工程でちょくちょく使えればラッキーと思っていました。ところが、実際にはメーカーのDefault設定がよくできててスピーカーの旨味を殺さず（Flat設定だとカスみたいな音になります）、naturalモードは1.4msと非常に低いレイテンシー(96khz換算で134サンプル程度)、さらにlinearモードだとめちゃくちゃ自然な仕上がりに聞こえました。結局録音以外では常にDefault+Linearモードで使っています。卓上に置いてるので本体ボタン一つでオンオフできるのも嬉しいです。</p>
<p><img src="https://github.com/klknn/klknn.github.io/assets/57452864/7cbf5e26-7ceb-42b0-a0e0-b7155b694174" alt="linearモード"></p>
<p>実際に計測してみると我が家の音響は異様に低音が膨らんでいて、補正オンにすると電子音楽を聞くときはちょっと物足りない感じになってしまうのですが、それ以外のジャンルはとても整理されて聞きやすくなっています。これはEQの原則と同じで膨らんでるものを抑えるのは自然にできるけど、足りないもの（とくに低音）をブーストするのは難しいという、前者のうまくいくケースになっていたのかなと思います。</p>
<h3 id="悪いところ">悪いところ</h3>
<p>一点ちょっと微妙だなぁと思ったのが電源周りでアースがないため、同じ電源タップでPCなどをACアダプタ(アースあり)で充電しているとジーっという音が載ってしまうようになりました。ちょっと特殊な形状のアダプタなので他社製品に置き換えることもできず、単純に音楽再生用と充電用でコンセントを分ける（ピュアオーディオ界隈では当たり前でしょうか^^;）ことで解決としました。</p>
<p>あとこれは書くか迷いましたが、USB繋いで設定するときにだけノイズが載るという現象があり、初期不良認定されて交換してもらいました。代理店のHook Up様ありがとうございます。日本だけかもですがこういったサポートの手厚さがIK製品の良いところだなと思います。</p>
<h2 id="playtech-pvn544-バイオリンセット">Playtech PVN544 バイオリンセット</h2>
<p><a href="https://www.soundhouse.co.jp/products/detail/item/296753/">https://www.soundhouse.co.jp/products/detail/item/296753/</a></p>
<p>バイオリン始めました。昔、友達のお兄さんがバイオリンが上手だったのと、大学時代に入っていたオーケストラのコンマスの方の音がとても良くて（のちに彼らはとんでもないレベルだったことを知る）10年来憧れていたのがあり、出張中に空港で暇してたらたまたまサウンドハウスの広告を見てしまい、お、一万円でバイオリン始められるのかー！とテンションおかしくなってポチってしまいました。</p>
<h3 id="pvn544の商品内容について">PVN544の商品内容について</h3>
<p><img src="https://github.com/klknn/klknn.github.io/assets/57452864/8bbcd07b-647c-40ea-95ee-8ac5bbae70ae" alt="PVN544表">
<img src="https://github.com/klknn/klknn.github.io/assets/57452864/1fe85336-0134-496f-9fe8-174af8b5e573" alt="PVN544裏"></p>
<p>松脂とか、弦、チューナー、肩当て、弓、ケースといった必要なものすべてついてこの値段は本当おかしいです。いまのところチューナー（基本周波数が440hzから変更できないとクラシックでは使えない）、弦(ドミナント弦に変えた)と松脂（より粘りが強いHidersineの黒いやつ）を買い替えましたが、ケースと弓、本体はとても良いものです。一点不満といえば低音がもう少し楽に鳴ると良いのですが、これは完全に私の技術不足で、事実先生に弾いてもらったときは良い音でした。</p>
<h3 id="レッスンについて">レッスンについて</h3>
<p>帰宅して一週間くらいYoutubeを見ながらキコキコ練習してましたがどうにも難しいと感じて、インターネットで近所のバイオリン教室に体験レッスンを申し込んだのが3月でした。その後は毎週レッスンを受け続けてなんとか簡単な曲（バッハのメヌエットとか）なら弾けるレベルになりました。一番良いのはやっぱり楽器の練習ってこんな楽しかったよなぁと昔ギターやトランペットを始めたころを思い出して、日々の楽しみというか癒やしになってることです。
私はもとから楽譜が読めたり、ギターがある程度弾けて左手は動くので、毎回レッスンで先生と数曲ほど練習曲を合奏するのがめちゃくちゃ楽しいです、合奏っていいものですね。DTMとかしてるとこういう楽しみを忘れてしまいがちです。あと先生が超優しいので子供が大きくなったら一緒に通いたいなと思ってます。私はこれまでクラシックの世界と多少関わりがあって、小学生のときはピアノの先生がカスすぎて一瞬で辞めたのですが、大学の頃習ってたトランペットの師匠はトッププロ（都市部楽団の首席奏者クラス）だったのに優しくて教えるのもうまいし最高でした、クラシックの世界って当たり外れデカすぎる。当たりだけひいて生きたいですね。</p>]]></content></entry><entry><title>VirtualBoxで別ディスクのOSを起動する</title><link href="https://klknn.github.io/posts/vbox/"/><id>https://klknn.github.io/posts/vbox/</id><published>2023-08-11T16:25:33+0900</published><updated>2023-08-11T16:25:33+0900</updated><summary type="html">机にWindowsとLinux二台置くのはだるいし、ちょっとした動作確認とかなら性能もいらずにGUIを触れることが大事なので、一つのPCに両OSをインストールしてVirtualBoxで起動するのが便利です。
...</summary><content type="html"><![CDATA[<p>机にWindowsとLinux二台置くのはだるいし、ちょっとした動作確認とかなら性能もいらずにGUIを触れることが大事なので、一つのPCに両OSをインストールしてVirtualBoxで起動するのが便利です。</p>
<p>ホストOS(例Windows11)ではこんな感じで仮想ハードディスクであるvmdkファイルを作成できる。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd <span style="color:#e6db74">&#39;C:\Program Files\Oracle\VirtualBox\&#39;</span>
</span></span><span style="display:flex;"><span>.<span style="color:#ae81ff">\V</span>BoxManage.exe createmedium -filename <span style="color:#e6db74">&#34;C:\Users\aaa\VirtualBox VMs\ubuntu22.vmdk&#34;</span> --format<span style="color:#f92672">=</span>VMDK --variant RawDisk --property RawDrive<span style="color:#f92672">=</span><span style="color:#ae81ff">\\</span>.<span style="color:#ae81ff">\P</span>HYSICALDRIVE1
</span></span></code></pre></div><p>出力先や<code>\\.\PHYSICALDRIVE1</code> の番号は適宜disk managementなどのアプリで確認したものを指定してください。
<code>internalcommands createrawvmdk</code> を<a href="https://www.serverwatch.com/guides/how-to-use-a-physical-hard-drive-with-a-virtualbox-vm/">使う場合</a>、なぜかWindows11だとNOT FOUNDみたいなエラーでてきて作れませんでした。</p>
<p>そんで仮想マシンを新規作成するときのUIがややこしくて、まず一番下のハードディスク欄でvmdkファイルを指定すると、一番上の方の名前を入力して完了。実際起動するとこんなエラーがでるので、</p>
<blockquote>
<p>仮想マシンの実行中にエラーが発生しました！エラーの詳細を以下に示します。説明されたエラーを修正し、仮想マシンの再実行することができます。
The I/O cache encountered an error while updating data in medium &quot;ahci-0-0&quot; (rc=VERR_ACCESS_DENIED). Make sure there is enough free space on the disk and that the disk is working properly. Operation can be resumed afterwards.</p>
</blockquote>
<blockquote>
<p>Error ID:BLKCACHE_IOERR
Severity:致命的でないエラー</p>
</blockquote>
<p>設定の[ストレージ]で先述のvmdkファイルを選んで、[ホストのI/O キャッシュを使う]を有効にします。参考: <a href="https://so-zou.jp/software/tool/virtualization/virtual-box/">https://so-zou.jp/software/tool/virtualization/virtual-box/</a></p>
<p><img src="https://github.com/klknn/klknn.github.io/assets/57452864/3b738654-a2cf-4940-8c04-d15c235f2ae5" alt="ゲストアドオンCDを入れたスクショ"></p>
<p>画面のリサイズは「デバイス&gt;Guest Additions CDイメージの挿入」をクリックすると、ゲストOS側にCDが認識されるので <code>autorun.sh</code> というファイルを実行すると機能します。</p>]]></content></entry><entry><title>年末セールで買った音楽機材</title><link href="https://klknn.github.io/posts/20221218/"/><id>https://klknn.github.io/posts/20221218/</id><published>2022-12-18T13:25:33+0900</published><updated>2022-12-18T13:25:33+0900</updated><summary type="html">もう2022年も終わりということに驚愕していますが、ソフトウェア業界特有の異常な年末セールも大詰めですね。今回は私の購入したものを良かった順で紹介します。
...</summary><content type="html"><![CDATA[<p>もう2022年も終わりということに驚愕していますが、ソフトウェア業界特有の異常な年末セールも大詰めですね。今回は私の購入したものを良かった順で紹介します。</p>
<h2 id="1位-waldorf-edition-2">1位 Waldorf Edition 2</h2>
<p>全てのプラグインがめちゃくちゃ狂った音が出て素晴らしいです、たぶんフィルタ処理が良い意味で歪みまくっておかしい。Audio Plugin Dealsのポイントで買いました。いつのまにかM1対応していてAttack以外はnativeで動作します。良くなったところは、サイトがリニューアルされてライセンス情報が吹っ飛んだところです、これに関しては依然問い合わせ中ですが、まぁ海外サイトではよくあることです（過去にも経験済み）。</p>
<p>ベースにD-PoleとかPPG使って、こんな感じのトラック作ってます:
<a href="https://soundcloud.com/eikaku/20221127-bf-2022-12-18-1538?in=eikaku/sets/20221218a">https://soundcloud.com/eikaku/20221127-bf-2022-12-18-1538?in=eikaku/sets/20221218a</a></p>
<h2 id="2位-endless-smile--sausage-fattner">2位 Endless Smile &amp; Sausage Fattner</h2>
<p>SFは定番というか10年くらい昔に流行った記憶ありますが、ESが欲しくて公式サイトのセットで値引きされてたので買いました。何気にM1 native対応してることにあとで気付きました。ESは本当に良くてなんとリバーブとしてかなり複雑な効果がでるので優秀です、オートメーション前提というわけでもないです。一方でSFは太い音がほしいけどOTTでもCamel Crushでもない、低音が痩せない系のドライブとして使えるので万能かも。</p>
<p>こちらはスネアのリバーブにES、歪みにSF使ったトラックです:
<a href="https://soundcloud.com/eikaku/20221224dnb?in=eikaku/sets/20221218a">https://soundcloud.com/eikaku/20221224dnb?in=eikaku/sets/20221218a</a></p>
<h2 id="3位-kilohearts-audio-disperser">3位 Kilohearts Audio Disperser</h2>
<p>これもフィルタとか歪み系に入るので、こんなんばっかり買ってるのですがPhase Plantのプリセットによく刺さっていて唯一無二の効果がでるので必須でした。あらゆる低音楽器に刺していきたいと思います。</p>
<h2 id="4位-black-octopus-leviathan-4">4位 Black Octopus Leviathan 4</h2>
<p>BOLシリーズは全部持ってるのですが、最新の4だけ持ってなかったらAudio Plugin Dealsで安売りしてたので速攻買いました。今年はSerumを買ったので、これで今風のEDMサウンドはバッチリですね&hellip;と思いきや、かなり気持ち悪い音ばかりなので、DnBとかエレクトロニカの人の方が嬉しいサンプルパックかもしれません。とにかく容量がおかしいので、使いこなせるかは未知数です。</p>
<h2 id="5位-kush-ar-1">5位 KUSH AR-1</h2>
<p>とりあえず刺しておけば良い系のヴィンテージ風コンプレッサー。あんまりアナログっぽいコンプ持ってなくていつもWAVES C1かV-COMP使ってたからコレ気に入ってます。</p>
<h2 id="総括">総括</h2>
<p>個人的に今回の購入時に考えていたのは:</p>
<ol>
<li>円安しかし改善傾向なのでできるだけ国内代理店をチェックして、無ければUSDでPaypal決済してカードの為替確定日を遅らせる</li>
<li>M1 Macを去年から使ってるのでM1対応してるもの限定</li>
<li>どうせ大半を使わないバンドル系は避けて、領域特化した商品を買う (WE2は尖りまくってるのでOK&hellip;)</li>
</ol>
<p>結局、年中ちょくちょくセールとか関係なく色々買ってるので年末といえど全体的には2万円も使ってないのかなと思います。さすがにそろそろ曲を作らないと&hellip;</p>]]></content></entry><entry><title>2022 9-10月の振り返り</title><link href="https://klknn.github.io/posts/20221025/"/><id>https://klknn.github.io/posts/20221025/</id><published>2022-10-25T10:25:33+0900</published><updated>2022-10-25T10:25:33+0900</updated><summary type="html">雑多な9-10月のプログラミングや育児など振り返りです。
...</summary><content type="html"><![CDATA[<p>雑多な9-10月のプログラミングや育児など振り返りです。</p>
<p><img src="https://user-images.githubusercontent.com/57452864/200268429-3be0b0a8-1274-432c-be0d-ec86da6f2659.jpg" alt="900STの画像"></p>
<p>!</p>
<h2 id="音楽">音楽</h2>
<p>あんまりやれてないですね。4小節くらいループ作っては広がらなくて捨てる日々です。そういうのも上げていこうかな。</p>
<p>創作が捗らないときは機材買ったり、メンテするのが一番です。ここ5年位使ってなかった900STを修理しました、これは一番最初に使ったモニターヘッドホンで15年は使ってます。サウンドハウスの失効間近のポイントでウレタンリングとイヤーパッドを買いました。交換した感想は、若干耳に刺さる部分が弱まったけども、相変わらずあまり好きな音ではなかった&hellip;です。</p>
<p>あとこれまたサウンドハウスで買ったテレキャスの配線弄ってシリーズ・パラレル切り替えの配線をつけたりしてました。</p>
<h2 id="プログラミング">プログラミング</h2>
<p>9月はDplug関連のバグ修正（msysでdplug-buildのメッセージがでてこない、DMDでsimd関連のコードがビルドできない、etc）を結構やれましたが、10月は全然ですね。</p>
<p><img src="https://user-images.githubusercontent.com/57452864/197662990-b59661ce-b68f-472e-b003-c650f797401a.png" alt="image"></p>
<p>複数プラグイン作るときにEQとかオシレータとかどうせ使い回すから、monorepoにしたほうが良いと思ってこちらに移行しました。よろしくお願いします <a href="https://github.com/klknn/kdr">https://github.com/klknn/kdr</a></p>
<h2 id="育児">育児</h2>
<p>3ヶ月になりました。あまり泣かない子供なのですが泣き方にバラエティがでてきて、もうこれ言葉なんじゃない？という感じでバラエティがあります。機会があれば録音しておきます。</p>
<p>あまり大したことない病気があり、毎週通院してましたが、かなり良くなって今は予防接種のときに経過観察と処方してもらうだけで、それがかなり楽になりました。今後も健康に過ごしてほしい。</p>]]></content></entry><entry><title>A7X買った</title><link href="https://klknn.github.io/posts/20220907-a7x/"/><id>https://klknn.github.io/posts/20220907-a7x/</id><published>2022-09-07T16:31:27+0900</published><updated>2022-09-07T16:31:27+0900</updated><summary type="html">以前の記事に予告していた通り、Adamの7インチを買いました。ただし現行のA7Vでなく中古のA7Xです。結論としては大満足。
...</summary><content type="html"><![CDATA[<p>以前の記事に予告していた通り、Adamの7インチを買いました。ただし現行のA7Vでなく中古のA7Xです。結論としては大満足。</p>
<p><img src="https://user-images.githubusercontent.com/57452864/200269461-35623088-f8ed-49ed-bea8-da0a55ce3e7f.jpg" alt="a7x"></p>
<h2 id="a7vでなくa7xに決めた理由">A7VでなくA7Xに決めた理由</h2>
<p>さすがにもう10年以上経っているので、中古で値段が安かったから。</p>
<p>二番目の理由はDSPが96kHzしか対応してなかったので、ハイエンドのIFで192kHzで鳴らしても確認できないのが最も嫌でした。
複雑な電子回路だと故障とか耐用年数が怖いです。
逆に未だにテンモニが使われてるのはアンプレスで構造が単純だから、
部品交換で修理できるからだろうなと思っています。</p>
<p>あとA7Vと違って、A7Xはコーンがケブラーっぽくこれまで使っていたBX5と似てる親近感もありました。</p>
<h2 id="持ってるスピーカーとの比較">持ってるスピーカーとの比較</h2>
<p>BX5と比べると高音のレンジは圧倒的にA7Xのリボンツイーターのほうが広いです。
低音もコーンのインチがでかい分、より下の方まで鳴ります。
A7Xの方が全体的な解像度が高く、ロックやEDM系の音楽が感動的に楽しいです。
全体的なバランスは結構似ていてBX5は価格がペア1-2万円で売ってるのでコスパ本当に良いと思いました。</p>
<p>NS10Mも同じく7インチもありますが、全開で鳴らさないと低音がスカスカであまり楽しくないです。
A7Xは小さい音でも十分バランス良く鳴っていて素晴らしいです。
周波数のバランスは全然違いますが、中高域のキラキラした派手さはかなり似ています。</p>
<p>お店でA7Vを試聴したときに感じたBX5くらい低音がでて、NS10Mくらい中高域が見やすくあって欲しいという願望に、A7Xも完全に答えてくれていると思いました。
しかし自宅とお店ではまったく環境が違うからか、A7Vのほうがもう少し低音や残響が見やすかったかもと感じました。
この辺は今後吸音やケーブル交換など改善していきたいです。</p>
<h2 id="iloud-precision">iLoud precision</h2>
<p>当初iloud MTMと購入を悩んでましたが、A7X購入直後に上位機種が出てしまいました。</p>
<p><a href="https://www.ikmultimedia.com/products/iloudprecision/">https://www.ikmultimedia.com/products/iloudprecision/</a></p>
<p>DSPへの不信感(?)からA7Xを選んだわけですが、ここまで多機能(位相アライメント、有名なスピーカーエミュレーション)なのは凄すぎるので、
近所で入荷されたらまたチェックさせてもらいたいと思います。</p>
<h2 id="まとめ">まとめ</h2>
<p>A7Xは本当に買ってよかったスピーカーです。
NS10MはともかくBX5は使わなくなりそう、テレビとかにつなごうと思ってますが、電源とかステレオ端子とか面倒ですね&hellip;。</p>]]></content></entry><entry><title>ファンレス M1 MacBook Air にサーマルパッドを貼った結果</title><link href="https://klknn.github.io/posts/20220829-macbook-thermal/"/><id>https://klknn.github.io/posts/20220829-macbook-thermal/</id><published>2022-08-29T03:07:46+0900</published><updated>2022-08-29T03:07:46+0900</updated><summary type="html">ネットでMacBook Airにサーマルパッドを貼ると，重たいタスクもMacBook Pro並に高性能になるという噂を聞き，DTMで検証しました． 検証の結果、効果が限定的なので敢えてやる価値はないという結論に至りました．
...</summary><content type="html"><![CDATA[<p>ネットでMacBook Airにサーマルパッドを貼ると，重たいタスクもMacBook Pro並に高性能になるという噂を聞き，DTMで検証しました．
検証の結果、効果が限定的なので敢えてやる価値はないという結論に至りました．</p>
<h2 id="サーマルパッドを貼る">サーマルパッドを貼る</h2>
<p>ネジを外したのに裏蓋が開かなくて焦りました。<a href="https://jp.ifixit.com/Guide/MacBook+Air+13%E3%82%A4%E3%83%B3%E3%83%81+Late+2020+%E4%B8%8B%E9%83%A8%E3%82%B1%E3%83%BC%E3%82%B9%E3%81%AE%E4%BA%A4%E6%8F%9B/142550">iFixit</a> の持ち方以外ではどんなに力入れても絶対開かなかった．ありがとうiFixit．</p>
<p>パッドの貼り方は言葉で伝えるのが面倒なので，このツイートの画像を見てください:</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">マックのCPUにサーマルパッド貼り、裏板の断熱材剥がしました <a href="https://t.co/ghNStHjlfx">pic.twitter.com/ghNStHjlfx</a></p>&mdash; kr1nu (@kr1nu) <a href="https://twitter.com/kr1nu/status/1563951104479547392?ref_src=twsrc%5Etfw">August 28, 2022</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2 id="ベンチマーク設定">ベンチマーク設定</h2>
<p>室温25.0度，Mac内蔵ヘッドフォン出力 96kHz 1024 sample bufferを再生デバイスとして， 以下のリンクにあるLogicAlchemyTest.logicxを使いベンチマークしました．</p>
<p><a href="https://music-prod.com/logic-pro-benchmarks/">https://music-prod.com/logic-pro-benchmarks/</a></p>
<p>なぜAlchemyのプロジェクトを96kHzで使ったかというと，単純に普段私がそのようにDTMをやっているからです．このベンチマークではLogic付属(買収前はCamel Audio)のAlchemyという4オシレータの激重プリセットを5和音鳴らしたMIDIトラックを最大何トラック同時に再生できるか測ります．Logicユーザでない人にわかりやすく例えると，Alchemyの重さはだいたいOmnisphereくらいです．</p>
<p>計測は10回以下やりなおして再生できる限界のトラック数を調べて，そのまま温度が上がらなくなるまで放置・ループ再生し続けたときの最大温度とCPU使用率を記録しました．</p>
<h2 id="サーマルパッド前">サーマルパッド前</h2>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:right">CPU温度(℃)</th>
<th style="text-align:right">CPU使用率(%)</th>
<th style="text-align:right">トラック数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">プロジェクト起動時</td>
<td style="text-align:right">33.7</td>
<td style="text-align:right">13</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">高性能4コアのみ</td>
<td style="text-align:right">62.5</td>
<td style="text-align:right">88</td>
<td style="text-align:right">28</td>
</tr>
<tr>
<td style="text-align:left">全8コア</td>
<td style="text-align:right">64.9</td>
<td style="text-align:right">95</td>
<td style="text-align:right">51</td>
</tr>
</tbody>
</table>
<p>40トラックから再生どころか操作の反応が遅く怪しくなってきました．高性能コアだけでは記録は伸びず，かなり挙動が不安定になるのが意外でした．高効率4コア+高性能4コアの全8コアでの使用をおすすめします．</p>
<h2 id="サーマルパッド後">サーマルパッド後</h2>
<p>数値上の改善は2トラック増えた・2度くらい下がった程度で地味でした．</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:right">CPU温度(℃)</th>
<th style="text-align:right">CPU使用率(%)</th>
<th style="text-align:right">トラック数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">プロジェクト起動時</td>
<td style="text-align:right">28.7</td>
<td style="text-align:right">14</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">高性能4コアのみ</td>
<td style="text-align:right">54.9</td>
<td style="text-align:right">88</td>
<td style="text-align:right">31</td>
</tr>
<tr>
<td style="text-align:left">全8コア</td>
<td style="text-align:right">62.5</td>
<td style="text-align:right">95</td>
<td style="text-align:right">53</td>
</tr>
</tbody>
</table>
<p>こちらも実際には47トラックあたりから再生が怪しくなってきました．操作の反応は限界付近でも比較的機敏でした．なお，どれだけ再生を続けても64度台には突入せず、冷却効果の改善はたしかに認められました.さらに再生をとめると数秒で40度台まで冷える明らかな違いがありました．</p>
<p>さらにCPUが60度を超えてる状態で，実際に放熱してる箇所を触ってみました．従来熱くなるはずの画面の近くではとくに熱を感じず，従来熱くならない筐体裏側はほんのり温かかったです．具体的にはエアコンないところでは不快なレベルであり，膝の上に載せるのをためらわないギリギリの熱さです．昔使っていた2009年のIntel C2D MacBook Proはこれくらい発熱してたので懐かしくなりました．</p>
<h2 id="まとめ">まとめ</h2>
<p>冷却効果はあるものの非常に限定的だったので，やる意味はないかもしれません．工場出荷時にファンレスかつサーマルパッドなしでここまで発熱少ないM1自体が驚異的でしたね．</p>
<p>ベンチマークはこれまでの経験に合致する結果でした．MacBookは最大96kHzで40トラック以上の重いシンセが同時に鳴るほどの性能があるため，大抵の曲は快適に作れるので気に入ってます．</p>]]></content></entry><entry><title>HugoにおけるCSSの埋め込みと後処理</title><link href="https://klknn.github.io/posts/hugo_embed_css/"/><id>https://klknn.github.io/posts/hugo_embed_css/</id><published>2022-08-26T04:55:30+0900</published><updated>2022-08-26T04:55:30+0900</updated><summary type="html">CSSを試行錯誤中なのですがブラウザのキャッシュが効いて反映されないため面倒だなと思い、Hugo の asset 管理を使ってHTMLに埋め込んでみました。 おまけに最小化やSCSSの導入など、思わぬ副次効果もありました。
...</summary><content type="html"><![CDATA[<p>CSSを試行錯誤中なのですがブラウザのキャッシュが効いて反映されないため面倒だなと思い、Hugo の asset 管理を使ってHTMLに埋め込んでみました。
おまけに最小化やSCSSの導入など、思わぬ副次効果もありました。</p>
<h2 id="これまでの問題">これまでの問題</h2>
<p>ここ最近の更新では、たびたびCSSを弄っていました。これまでは元ファイルを <code>/static/main.css</code> に置いてそのまま直接リンクを貼っていたのですが、リンクを介すことでブラウザのキャッシュが効いてしまい、 <code>$ hugo serve</code> をしているとき即座に反映されない悩みがありました。</p>
<p>ついでに生のCSSって冗長で人間が書くものでは無いな&hellip;と思っていたのでどうせHugoを使って処理するなら&hellip;とSASS/SCSSに移行していきます。</p>
<p>一方、埋め込むことで読み込みに時間がかかるのではという懸念もありますが、後処理がてら<code>hugo --minify</code>で最小化できます。これで普段は人間に読める形で試行錯誤できる上に、デプロイ時は最小化してるので良いところどりです。
最終的に埋め込みが問題になれば <code>.RelURL</code> によるリンク生成も可能なのでキャッシュ効く形に戻すのも容易です。</p>
<h2 id="scssの読み込み">SCSSの読み込み</h2>
<p>というわけでHugoのasset管理を使って、HTMLに直接埋め込みます。 <code>/assets/main.scss</code> にファイルを移動した上で、このように読み込みます。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Go" data-lang="Go"><span style="display:flex;"><span>    {{ <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#a6e22e">css</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">resources</span>.<span style="color:#a6e22e">Get</span> <span style="color:#e6db74">&#34;main.scss&#34;</span> | <span style="color:#a6e22e">resources</span>.<span style="color:#a6e22e">ToCSS</span> }}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#a6e22e">style</span>&gt;
</span></span><span style="display:flex;"><span>      {{ <span style="color:#960050;background-color:#1e0010">$</span><span style="color:#a6e22e">css</span>.<span style="color:#a6e22e">Content</span> | <span style="color:#a6e22e">safeCSS</span> }}
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">/</span><span style="color:#a6e22e">style</span>&gt;
</span></span></code></pre></div><p>でてくる関数の詳細は <a href="https://gohugo.io/categories/asset-management">https://gohugo.io/categories/asset-management</a> を読んでください。SCSSを使うには extended と書いてあるバイナリを使う必要があるので注意です。生成されたファイルは <code>/resources/_gen/*</code> に作られるので <code>.gitignore</code> などに含めておくと良いでしょう</p>
<p>ちなみにSCSSはCSSと概ね互換性があるので、元ファイルがそのまま読めました。文法は <a href="https://sass-lang.com/guide">https://sass-lang.com/guide</a> のほうが <a href="https://sass-lang.com/documentation/syntax">https://sass-lang.com/documentation/syntax</a> より簡単にまとまってていいです。今回はとりあえず変数と演算を使ってページの幅とか調整しました。正直文法が気持ち悪いのであまり深追いしたくはないです。</p>
<h2 id="まとめ">まとめ</h2>
<p>気が変わっていにしえのHTML/CSS直書き原理主義にもどるかもしれませんが、いまのところMarkdown -&gt; HTML と SCSS -&gt; CSSと変換できるHugoに満足です。
全体的な変更は以下のcommitを参考にしてください:
<a href="https://github.com/klknn/klknn.github.io/commit/8274c0765fe232a562ce229983d7a955bf480bad">https://github.com/klknn/klknn.github.io/commit/8274c0765fe232a562ce229983d7a955bf480bad</a></p>]]></content></entry><entry><title>はてなブログ的なfeedをHugoで生成</title><link href="https://klknn.github.io/posts/hugo_feed/"/><id>https://klknn.github.io/posts/hugo_feed/</id><published>2022-08-24T23:32:31+0900</published><updated>2022-08-24T23:32:31+0900</updated><summary type="html">RSSリーダーのFeedlyを使っていて、はてなブログとかは全文リーダー内に表示されるのに、うちだけ表示されないな？と疑問に思っていました。 今回ははてなブログのフィードとHugoのデフォルトのフィードを比べた上でよりRSSリーダーフレンドリーなフィードを構築していきます。
...</summary><content type="html"><![CDATA[<p>RSSリーダーのFeedlyを使っていて、はてなブログとかは全文リーダー内に表示されるのに、うちだけ表示されないな？と疑問に思っていました。
今回ははてなブログのフィードとHugoのデフォルトのフィードを比べた上でよりRSSリーダーフレンドリーなフィードを構築していきます。</p>
<h2 id="はてなのfeed">はてなのfeed</h2>
<p>まずFeedlyで適当に普段読んでるhatenaブログをみてみると、取得してるURLが設定画面で把握できます。大抵は以下のようなXMLがでてきます:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;feed</span> <span style="color:#a6e22e">xmlns=</span><span style="color:#e6db74">&#34;http://www.w3.org/2005/Atom&#34;</span> <span style="color:#a6e22e">xml:lang=</span><span style="color:#e6db74">&#34;ja&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;title&gt;</span>・ｘ・ぼくののうみそ<span style="color:#f92672">&lt;/title&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;link</span> <span style="color:#a6e22e">href=</span><span style="color:#e6db74">&#34;https://bokunonoumiso.hatenablog.com/&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;updated&gt;</span>2022-08-09T12:41:41+09:00<span style="color:#f92672">&lt;/updated&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;author&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;name&gt;</span>bokunonoumiso<span style="color:#f92672">&lt;/name&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;/author&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;generator</span> <span style="color:#a6e22e">uri=</span><span style="color:#e6db74">&#34;https://blog.hatena.ne.jp/&#34;</span> <span style="color:#a6e22e">version=</span><span style="color:#e6db74">&#34;149d375eb29bfc5c8439e961a2b85a&#34;</span><span style="color:#f92672">&gt;</span>Hatena::Blog<span style="color:#f92672">&lt;/generator&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;id&gt;</span>hatenablog://blog/6653812171403772804<span style="color:#f92672">&lt;/id&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;entry&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;title&gt;</span>高い車に乗って安い車を煽る<span style="color:#f92672">&lt;/title&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;link</span> <span style="color:#a6e22e">href=</span><span style="color:#e6db74">&#34;https://bokunonoumiso.hatenablog.com/entry/2022/08/09/124141&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;id&gt;</span>hatenablog://entry/4207112889907092076<span style="color:#f92672">&lt;/id&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;published&gt;</span>2022-08-09T12:41:41+09:00<span style="color:#f92672">&lt;/published&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;updated&gt;</span>2022-08-09T12:41:41+09:00<span style="color:#f92672">&lt;/updated&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;summary</span> <span style="color:#a6e22e">type=</span><span style="color:#e6db74">&#34;html&#34;</span><span style="color:#f92672">&gt;</span>高い車が安い車を煽る…<span style="color:#f92672">&lt;/summary&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&lt;content</span> <span style="color:#a6e22e">type=</span><span style="color:#e6db74">&#34;html&#34;</span><span style="color:#f92672">&gt;</span>&amp;lt;p&amp;gt;高い車が安い車を煽る&amp;lt;/p&amp;gt;<span style="color:#f92672">&lt;/content&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&lt;/entry&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/feed&gt;</span>
</span></span></code></pre></div><p>注意点としては</p>
<ul>
<li>RSS 1.0/2.0ではなく<a href="http://www.w3.org/2005/Atom">ATOM規格</a>っぽい。summaryに概要、contentに本文を入れることができる。</li>
<li>summaryでは多くのリーダーで対応するために、htmlタグなしの plainify されたテキストが良さそう。</li>
<li>contentの中身はhtmlなので、escape するか CDATA 属性に突っ込む。なおhugo組み込み関数のescapeHTMLでは<code>&amp;</code>も変換されてしまいうまくいかなかった。</li>
<li>もし RSS 1.0/2.0 を使いたい場合、本文を表示するには <code>&lt;content:encoded&gt;</code> を使うと良いらしい <a href="https://www.w3.org/wiki/RssContent">https://www.w3.org/wiki/RssContent</a></li>
</ul>
<h2 id="hugoのfeed">Hugoのfeed</h2>
<p><a href="https://github.com/gohugoio/hugo/blob/988e1417a057b937a766385f79f46a52e933baee/tpl/tplimpl/embedded/templates/_default/rss.xml">Hugo標準付属のrss.xml</a>はRSS 2.0なのかAtomなのかよくわからない感じですね。
hatenaブログのフィードっぽくしたテンプレートはこんな感じです。</p>


<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span>{{- $pctx := . -}}
</span></span><span style="display:flex;"><span>{{- if .IsHome -}}{{ $pctx = .Site }}{{- end -}}
</span></span><span style="display:flex;"><span>{{- $pages := slice -}}
</span></span><span style="display:flex;"><span>{{- if or $.IsHome $.IsSection -}}
</span></span><span style="display:flex;"><span>{{- $pages = $pctx.RegularPages -}}
</span></span><span style="display:flex;"><span>{{- else -}}
</span></span><span style="display:flex;"><span>{{- $pages = $pctx.Pages -}}
</span></span><span style="display:flex;"><span>{{- end -}}
</span></span><span style="display:flex;"><span>{{- $limit := .Site.Config.Services.RSS.Limit -}}
</span></span><span style="display:flex;"><span>{{- if ge $limit 1 -}}
</span></span><span style="display:flex;"><span>{{- $pages = $pages | first $limit -}}
</span></span><span style="display:flex;"><span>{{- end -}}
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;feed</span> <span style="color:#a6e22e">xmlns=</span><span style="color:#e6db74">&#34;http://www.w3.org/2005/Atom&#34;</span> <span style="color:#a6e22e">xml:lang=</span><span style="color:#e6db74">&#34;ja&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;title&gt;</span>{{ if eq  .Title  .Site.Title }}{{ .Site.Title }}{{ else }}{{ with .Title }}{{.}} on {{ end }}{{ .Site.Title }}{{ end }}<span style="color:#f92672">&lt;/title&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;link</span> <span style="color:#a6e22e">href=</span><span style="color:#e6db74">&#34;{{ .Permalink }}&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;updated&gt;</span>{{ time.Format &#34;2006-01-02T15:04:05-0700&#34; .Site.LastChange | safeHTML }}<span style="color:#f92672">&lt;/updated&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;author&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;name&gt;</span>{{ $.Site.Params.author }}<span style="color:#f92672">&lt;/name&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;/author&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;generator</span> <span style="color:#a6e22e">uri=</span><span style="color:#e6db74">&#34;https://gohugo.io&#34;</span> <span style="color:#a6e22e">version=</span><span style="color:#e6db74">&#34;{{ hugo.Version }}&#34;</span><span style="color:#f92672">&gt;</span>Hugo<span style="color:#f92672">&lt;/generator&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;id&gt;</span>{{ .Permalink }}<span style="color:#f92672">&lt;/id&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  {{ range $pages }}
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;entry&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;title&gt;</span>{{ .Title }}<span style="color:#f92672">&lt;/title&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;link</span> <span style="color:#a6e22e">href=</span><span style="color:#e6db74">&#34;{{ .Permalink }}&#34;</span><span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;id&gt;</span>{{ .Permalink }}<span style="color:#f92672">&lt;/id&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;published&gt;</span>{{ .PublishDate.Format &#34;2006-01-02T15:04:05-0700&#34; | safeHTML }}<span style="color:#f92672">&lt;/published&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;updated&gt;</span>{{ .Lastmod.Format &#34;2006-01-02T15:04:05-0700&#34; | safeHTML }}<span style="color:#f92672">&lt;/updated&gt;</span>
</span></span><span style="display:flex;"><span>    {{ with .Site.Author.email }}<span style="color:#f92672">&lt;author&gt;</span>{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}<span style="color:#f92672">&lt;/author&gt;</span>{{end}}
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;summary</span> <span style="color:#a6e22e">type=</span><span style="color:#e6db74">&#34;html&#34;</span><span style="color:#f92672">&gt;</span>{{ .Summary | plainify }}...<span style="color:#f92672">&lt;/summary&gt;</span>
</span></span><span style="display:flex;"><span>    {{ printf `<span style="color:#f92672">&lt;content</span> <span style="color:#a6e22e">type=</span><span style="color:#e6db74">&#34;html&#34;</span><span style="color:#f92672">&gt;</span><span style="color:#75715e">&lt;![CDATA[%s]]&gt;</span><span style="color:#f92672">&lt;/content&gt;</span>` .Content | safeHTML }}
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;/entry&gt;</span>
</span></span><span style="display:flex;"><span>  {{ end }}
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/feed&gt;</span>
</span></span></code></pre></div>

<p>詳細は以下のcommitを見てください。</p>
<p><a href="https://github.com/klknn/klknn.github.io/commit/afb831f515d54b451e70fbc5e5ae95e669d79c75">https://github.com/klknn/klknn.github.io/commit/afb831f515d54b451e70fbc5e5ae95e669d79c75</a></p>
<h2 id="まとめ">まとめ</h2>
<p>RSSリーダーって10年前まではみんな使ってたのにGoogle readerが終わって一気に死んだよね&hellip;インターネット老人ネタでした。</p>]]></content></entry><entry><title>モニタースピーカー買い替えで悩む</title><link href="https://klknn.github.io/posts/speaker_trial/"/><id>https://klknn.github.io/posts/speaker_trial/</id><published>2022-08-20T15:14:12+0900</published><updated>2022-08-20T15:14:12+0900</updated><summary type="html">子供が生まれました（近況報告）。なかなか時間取れないですが、相変わらず音楽とかプログラミングをやっていきたいです。 先日、母子の一ヶ月検診があったので久々に暇になり、渋谷のパワーレックさんでスピーカーを色々試させてもらいました。いつもイケベさんでは気後れせず試奏とかできるし、今年はJP6など高い買い物しててポイントもあるし買うならイケベだとふらっと思っていきました。パワーレックさんは初めてだったのですが品揃えも凄い上に、3セット同時にIFに繋いで聴き比べたり、Youtubeから音楽流せたり、手ぶらで無計画に行っても全然OKな感じで最高でした。 現在使ってる機材 スピーカー: M-audio BX5D2, Yamaha NS10M + Fostex の小型アンプ IF:...</summary><content type="html"><![CDATA[<p>子供が生まれました（近況報告）。なかなか時間取れないですが、相変わらず音楽とかプログラミングをやっていきたいです。</p>
<p>先日、母子の一ヶ月検診があったので久々に暇になり、渋谷のパワーレックさんでスピーカーを色々試させてもらいました。いつもイケベさんでは気後れせず試奏とかできるし、今年はJP6など高い買い物しててポイントもあるし買うならイケベだとふらっと思っていきました。パワーレックさんは初めてだったのですが品揃えも凄い上に、3セット同時にIFに繋いで聴き比べたり、Youtubeから音楽流せたり、手ぶらで無計画に行っても全然OKな感じで最高でした。</p>
<h2 id="現在使ってる機材">現在使ってる機材</h2>
<ul>
<li>スピーカー: M-audio BX5D2, Yamaha NS10M + Fostex の小型アンプ</li>
<li>IF: Forcusrite 18i20</li>
<li>ヘッドフォン: Ultrasone Edition 8, Senheiser HD650</li>
</ul>
<p>スピーカーの音は気に入ってるんですが、ヘッドフォンの解像度にスピーカーが追いついていないし、NS10Mの中高域とBX5の低域を併せ持つスピーカーがいれば最高だよなぁ&hellip;といろいろ探しています。</p>
<h2 id="リファレンス曲">リファレンス曲</h2>
<p>ところで皆さんこういうときに何聴きますか？私はこんな感じです</p>
<ul>
<li>自分で一番うまくミックスできた曲 <a href="https://soundcloud.com/yuy_h/2014-m3-2-ix">https://soundcloud.com/yuy_h/2014-m3-2-ix</a></li>
<li>世界で一番うまいミックスの曲 Donald Fagen I.G.Y. <a href="https://www.youtube.com/watch?v=Ueivjr3f8xg">https://www.youtube.com/watch?v=Ueivjr3f8xg</a></li>
<li>音の速さ確認用 砂原良徳 subliminal <a href="https://www.youtube.com/watch?v=KspZvWby1Jc">https://www.youtube.com/watch?v=KspZvWby1Jc</a></li>
<li>ギター確認用 Periphery insomnia のイントロ <a href="https://www.youtube.com/watch?v=yNRrXB1LPgc">https://www.youtube.com/watch?v=yNRrXB1LPgc</a></li>
<li>オーケストラ確認用 Bourez 指揮 春の祭典 Spring rounds  <a href="https://www.youtube.com/watch?v=ZSyPQMUYFgc&amp;t=2s">https://www.youtube.com/watch?v=ZSyPQMUYFgc&amp;t=2s</a></li>
</ul>
<h2 id="感想">感想</h2>
<p>当初はiloud MTMが気になってて、それだけ新たに設置してもらったのですが、すでにおいてあったAdam A4VとA7V(とデスク上のiloud MM)も超気になっていたのでラッキーでした（さすがに6台も重たいスピーカー運んでもらうのは気が引けた）。即決できる予算ではなかったので購入には至らなかったもののAdam A7Vが一番良かったです。以下、個々の感想です。</p>
<h3 id="iloud-mtm">iloud MTM</h3>
<p>マルチネとかで有名なアーティストがよく使ってる気がします（kabanaguさんとか、パソコン音楽クラブの柴田さんとか）、これをすぐ買うつもりで行きました。</p>
<p>全体的なバランスは結構良く、サイズ的にかなり欲しかった、リバーブの距離感はつかみやすいけど、若干ディストーションギターとかスネア鳴らしたときに中域の情報量（解像度？）とか押し出し感が不明瞭かなと思いました。Adamだとどんな曲でも結構よく聞こえてしまうけど、iloud MMとか内蔵スピーカーでちゃんと鳴らないミックスとかがMTMではショボく聞こえるので、ラジカセ的なチェックからニアフィールド用までこなせるミックスの粗捜しという目的には凄そうです。好みとしてはもう少し音色のツヤ感とかチェックできればなと、わりとパサパサしたドライ目な音です。</p>
<p>あと今月はIKがハードウェア買うと同じ額のソフトウェア6個くれるキャンペーンやってるので実質半額ですね、すごい。</p>
<h3 id="adam-a4v">Adam A4V</h3>
<p>同じ価格帯だけど、MTMの音色の弱点がなくて買うならこっちかなと思いました。オールジャンル結構楽しく聞けそうです。中高域は最高で、テンモニみたくボーカルとかの細かいところも聞こえる感じがします。もしA7Vがおいてなかったらこれを買って帰っていましたね。</p>
<h3 id="adam-a7v">Adam A7V</h3>
<p>一つ前のA7Xは日本人に結構人気みたいで、私の大好きなbermei.inazawaさんもこれ使ってたり、某マスタリング・エンジニアが絶賛してたりしたので気になってました。</p>
<p>音はA4Vの上位互換という感じで、小さい音で鳴らしてもA4Vより解像度もバランス良かったです（7インチならそうか）。A4Vでも問題ないけど、もっと上がいるんだなぁと。聞かなればよかった。A4Vの二倍もする価格差ほどの説得力があるかはこのとき納得できなかった&hellip;たぶん</p>
<h2 id="まとめ">まとめ</h2>
<p>これはA7V買う流れだな&hellip;</p>
]]></content></entry><entry><title>DTM最強ノートPCとしてASUS ROG Zephyrus M16を購入</title><link href="https://klknn.github.io/posts/m16_first_impression/"/><id>https://klknn.github.io/posts/m16_first_impression/</id><published>2022-05-04T10:24:12+0900</published><updated>2022-05-04T10:24:12+0900</updated><summary type="html">M3お疲れ様でした。制作に一段落ついたので、新しくDTM用のノートPC ASUS ROG ZEPHYRUS M16 を買いました。 昨日届いて一通り環境構築を終えたので、購入した理由と第一印象を書きます。 スペック 価格 349,800円 （税込） 型番 GU603ZW-I9R3070TIE カラー オフブラック OS Windows 11 Home CPU インテル® Core™ i9-12900H プロセッサー メモリ 32GB DDR5-4800 ディスプレイ：16型ワイドTFTカラー液晶 ノングレア 2,560×1,600ドット (WQXGA) (165Hz) GPU NVIDIA® GeForce RTX™ 3070 Ti Laptop SSD 2TB (PCI Express 4.0 x4接続) 空き1スロットあり サイズ 幅355mm×奥行き243.5mm×高さ19.9～22.3mm 質量 約2.05kg 買った理由 1. 最強のCPUを搭載している INTEL i9 12900H を搭載してます。下記のCINEBENC...</summary><content type="html"><![CDATA[<p>M3お疲れ様でした。制作に一段落ついたので、新しくDTM用のノートPC <a href="https://jp.store.asus.com/store/asusjp/ja_JP/pd/productID.5603530000">ASUS ROG ZEPHYRUS M16</a> を買いました。
昨日届いて一通り環境構築を終えたので、購入した理由と第一印象を書きます。</p>
<h2 id="スペック">スペック</h2>
<ul>
<li>価格 349,800円 （税込）</li>
<li>型番 GU603ZW-I9R3070TIE</li>
<li>カラー オフブラック</li>
<li>OS Windows 11 Home</li>
<li>CPU インテル® Core™ i9-12900H プロセッサー</li>
<li>メモリ 32GB DDR5-4800</li>
<li>ディスプレイ：16型ワイドTFTカラー液晶　ノングレア　2,560×1,600ドット (WQXGA) (165Hz)</li>
<li>GPU NVIDIA® GeForce RTX™ 3070 Ti Laptop</li>
<li>SSD 2TB (PCI Express 4.0 x4接続) 空き1スロットあり</li>
<li>サイズ 幅355mm×奥行き243.5mm×高さ19.9～22.3mm</li>
<li>質量 約2.05kg</li>
</ul>
<h2 id="買った理由">買った理由</h2>
<h3 id="1-最強のcpuを搭載している">1. 最強のCPUを搭載している</h3>
<p>INTEL i9 12900H を搭載してます。下記のCINEBENCHによるノートPCの比較では現時点でマルチコア・シングルコアともに最強です。</p>
<p><a href="https://thehikaku.net/pc/asus/21ROG-Zephyrus-M16.html#paformance">https://thehikaku.net/pc/asus/21ROG-Zephyrus-M16.html#paformance</a></p>
<p>Ryzen 6800H搭載のZephyrus G15との差額を考えるとウーッとなりますが、最強という満足感を買いました。ついでにGPUもNVidia RTX3070Tiなので最強というほどではないですが、十分素晴らしいものです（最強が欲しければASUS Scar15がおすすめ）。</p>
<h3 id="2-dpc-latencyが短く安定している">2. DPC latencyが短く安定している</h3>
<p>ベンチマークやスペックに現れない、Macと比べたWindowsの最悪なところです。これをよく調べずに買うと超絶後悔することになります。</p>
<p>WindowsノートPCはドライバの出来がマチマチで、カーネル(OS)が割り込んできてオーディオ処理が遅延した結果音がブチブチ途切れることがあります。これはメモリやCPUといったハードウェアとはほとんど無関係に、多くは出来の悪いドライバによっておこります（DDR5やi9を積もうが関係ないし将来のアップデートで破綻することもある）。現時点でWin11ゲーミングノートの中では、安定した性能を出しているのははASUSのM16とScar15だけです。メーカーでいうとこれまでRazerは概ねlatencyが低い印象がありましたが、Win11では苦戦しているようですね。</p>
<blockquote>
<p>This is the second Windows 11 gaming laptop we&rsquo;ve tested this year that didn&rsquo;t fail the latencymon test. &ldquo;ASUS Zephyrus M16 (2022) Review - A Thin 16&rdquo; Gaming Laptop!&quot; <a href="https://youtu.be/6Shhp6JOC8c?t=540">https://youtu.be/6Shhp6JOC8c?t=540</a></p>
</blockquote>
<blockquote>
<p>I think this the first gaming laptop we&rsquo;ve tested this year that didn&rsquo;t fail the latencymon test with Windows 11. &ldquo;ASUS Scar 15 (2022) Review - Most Powerful 15” Gaming Laptop!&rdquo; <a href="https://youtu.be/VSVfBObYFE4?t=480">https://youtu.be/VSVfBObYFE4?t=480</a></p>
</blockquote>
<p>実際に私自身が作ったFLプロジェクトで一番重たかった <a href="https://soundcloud.com/yuy_h/2020_m3-anemone">Cyanos</a> という曲を再生しながら <a href="https://www.resplendence.com/latencymon">LatencyMon</a> を&quot;サイレント&quot;モードで動かしてみましたが、全然余裕でした。</p>
<p><img src="https://user-images.githubusercontent.com/57452864/166607867-6271acd7-8b99-4f75-b5b8-af60c1f036d7.png" alt="latencymon screenshot"></p>
<p>LatencyMonはとりあえず緑色のメッセージがでていれば余裕です。96kHzで再生するなら10μsec/sampleなのでオーディオIFのバッファ以上たとえば1000μsec(=100サンプル)くらい別プロセスにもってかれると音が途切れます。なおファームウェアは2022/3/9リリースのGU603ZW.306 (10.1.2.306)を利用しています。</p>
<h3 id="3-asusの管理アプリが優秀">3. ASUSの管理アプリが優秀</h3>
<p>先のスクリーンショットでもありましたが、ASUSのArmoury Crateというソフトでファン速度や電力などの設定ができます。これはDTMにおいては「録音してるからファンとめたい」「サーマルスロットリングしてるからファンまわしたい」という二大欲求を叶えるために不可欠な機能です。前者の願望を叶えるべくファンレスのM1 Macbook Airを使ってましたが結局熱くなって後者の欲求が生まれました。</p>
<p><img src="https://user-images.githubusercontent.com/57452864/166610540-65ec30c1-6c48-4f86-8811-fc3dbeaaa8b4.png" alt="armoury crate screenshot"></p>
<p>手動でも設定できますが、普段はサイレントモードを使っています。</p>
<p>MyASUSという別アプリも便利で、Lenovo Vantageみたいな感じで各種アップデートやバッテリーの長寿化のための上限を設定できます。経験的にも心理的にも上限設定しないとバッテリーの劣化が凄まじいので、これがないノートPCはもう使うことが出来ません(泣)</p>
<h3 id="4-2560x1600-165hz液晶">4. 2560x1600 165Hz液晶</h3>
<p>縦長な2560x1600はDTMするときは作業画面が広くて最高に便利です、じつは以前使っていたApple MacBook Air M1も全く同じ解像度です。遅延も3msと非常に短く、最初はDTMで画面の反応なんかどうでもいいと思ってましたが、一旦外付けディスプレイに戻ってみると残像や反応の悪さにイライラしました（一度上げた生活水準は下げられないというヤツですね）。画面の色味はほとんど同じですが、M16のほうが明るくて16inchなので大きいです。ただしHiDPI対応はMacのOSやアプリのほうが概ね優秀です。</p>
<h3 id="5-ノートpcとしての完成度">5. ノートPCとしての完成度</h3>
<p>その他みたいな枠です。</p>
<ul>
<li>タッチパッドがでかくて良い。マルチタッチ(1-4点)にも対応してるが、感度はMacほどではない。殆どのゲーミングノートは筐体のデカさの割にタッチパッドが小さいです。</li>
<li>キーボードがでかくて良い（円マーク以外）、矢印キーやDEL、Ctrlなどの配列がまとも。LenovoとASUS以外のゲーミングノートはここが終わっています。</li>
<li>USB-C PD対応。45Wの小型GaNアダプタでも充電できました。純正のACアダプタは700gもありこのPCしか充電できないので持ち歩きたくはないです。</li>
<li>Thunderbolt4対応。帯域的にはUSBで良いと思うのですが、最近のオーディオIFにも普及してきたので一応あると安心。Ryzenモデルには基本的にないです。</li>
<li>過度な発光パーツがない。嫌いではないですが、店頭で見たStrix Scar 15は光るパーツがチープな感じがして敬遠してしまいました。</li>
<li>画面を180度開くことができる。画面がスピーカーの音を遮らないようにミックスの最終確認などで倒したいことがあります。Thinkpadとかもそういうところがいいですよね。</li>
</ul>
<h2 id="イマイチなところ">イマイチなところ</h2>
<ul>
<li>ASUSのZenbookを過去に使ってましたが、とにかくよくマザボが壊れました。修理しても修理しても壊れるので、信頼のあるマザボメーカーとは思えなくなりました。このトラウマで最後まで悩みましたが、今回はマザボにも名前を冠しているROGなので品質が違うことを期待してます。キャンペーンで3年間のなんでも修理保証がついてました。</li>
<li>ASUS Storeの梱包がよくないです。無駄にでかいダンボールにまるめた紙二個を緩衝材としたスカスカな梱包で佐川が配送するという一番嫌なパターンでした。平日しか営業してないのはホワイト企業で良いなと思いますが。</li>
<li>メモリ片側がハンダ付けされていて実質48GBが上限。64GB積めません。</li>
<li>タッチパッドの二点クリックがときどき反応しない。奇妙なことにクリックではなくタップすれば確実に認識するので慣れる必要があります。私は普段マウス使ってるので問題ないですが。</li>
<li>タッチパッドの上にThinkpadみたいな独立した左右スクロール用マウスボタンが欲しかった。</li>
<li>スピーカーの音がいまいち。DTMerは外付けのスピーカーやヘッドフォンを使うので問題ないでしょう。</li>
<li>McAfeeとかi-Filterといったカスソフトが入っている。マージンもらってるんでしょうがブランドイメージを毀損してるので1万円値上げしても良いので入れないでほしい</li>
<li>Windows11の初期設定でローカルアカウントを作れない。多くのDTMソフトは国際化の面でカスなので（ユーザ数が少ないので仕方がない）、記号だったりAscii以外の文字が入ってるパスが存在すると異常終了します。ついでにプログラミングとかする人は$HOMEやsshのために覚えやすい名前にしてる人が多いと思います、MSアカウントで作られると意味不明なユーザ名が作られるので本当にやめてほしい。それ以外はとくに不便ではありませんでした。</li>
</ul>
<p>今回は4月末までの購入で30日間返品保証キャンペーンもあるようなので、来月また返品したのかどうか記事を出そうと思います。</p>
]]></content></entry><entry><title>雑記</title><link href="https://klknn.github.io/posts/20210601/"/><id>https://klknn.github.io/posts/20210601/</id><published>2021-06-02T03:25:33+0900</published><updated>2021-06-02T03:25:33+0900</updated><summary type="html">NetflixとかAmazon Primeで見てるやつ アニメのキングダムにハマりしました、ちなみに漫画はそこまでハマらなかったです。個人的なハマり基準として出演してる声優を片っ端からWikipediaで調べる習性があります。ただし、声優のWikipediaページに特有の現象として、ある程度の知名度を境におそらく熱狂的なファンが書き散らかした「※個人の感想」みたいな記述が削除されずに残っていて、ちょっとしんどい気持ちになります。ちなみに一期と二期最終話に作者がエキストラ出演してるのみんな気づきましたか？私もスタッフロールで見ただけですが。 お笑いではAmazon Primeオリジナルの「千鳥のニッポン...</summary><content type="html"><![CDATA[<h2 id="netflixとかamazon-primeで見てるやつ">NetflixとかAmazon Primeで見てるやつ</h2>
<p>アニメのキングダムにハマりしました、ちなみに漫画はそこまでハマらなかったです。個人的なハマり基準として出演してる声優を片っ端からWikipediaで調べる習性があります。ただし、声優のWikipediaページに特有の現象として、ある程度の知名度を境におそらく熱狂的なファンが書き散らかした「※個人の感想」みたいな記述が削除されずに残っていて、ちょっとしんどい気持ちになります。ちなみに一期と二期最終話に作者がエキストラ出演してるのみんな気づきましたか？私もスタッフロールで見ただけですが。</p>
<p>お笑いではAmazon Primeオリジナルの「千鳥のニッポンハッピーチャンネル」が一番好きです。これは大吾の企画した番組をノブが突っ込みながらみるというメタ番組です。ゲストは全員大吾側についているので、ノブだけが異世界転生したテレビみたいにも見えます。トレンディドラマとか、ホラー特番みたいな、いまはもう失われた過去の遺産を誇張・歴史改変した笑いにしてしまうユニークさが好きです。相席食堂といい彼らはエコシステムを作るのが上手なので、千鳥はダウンタウンに超えるだろうなと思います。</p>
<h2 id="m1-mac-book-air-買った">M1 Mac book air 買った</h2>
<p>昔持ってたMac book proが2009年製だったのを覚えてます。つまり12年ぶりにMac買いました。昔は自作PCにMac入れてたんですが、OSアップデートが自由なハードウェアとクローズドソフトの相性による死と隣り合わせで、結局LinuxかWindows使えという結論に至っていました。買った理由は、</p>
<ul>
<li>ファンレスなので無音、スピーカーくらいしか通気してないので埃にも強そう</li>
<li>M1っていうかARMのPC持ってないから面白そう</li>
<li>メーカー製Windows はDPCレイテンシーのガチャみたいなところがあり厳しい</li>
<li>昔のMacで作った曲をremix (というかrearrange) したい</li>
<li>画面が16:10で縦に長い</li>
</ul>
<p>という感じです。正直、プログラミングやゲームみたいなギーク的な部分は絶対WindowsやLinuxの方が楽なので、Macではどうしようもない怒りを覚えていますが、音楽制作用とわりきると悪く無いです。Logicに今は亡きCamelAudioのAlchemyとかCamelCrasher入ってて嬉しいです。
そのうちプログラミング環境も揃えていければなと思います。</p>
<h2 id="d言語設定-on-m1-mac">D言語設定 on M1 Mac</h2>
<p>プラグイン開発の設定をする前に、プログラミング環境の設定をやります。とりあえずrosettaでDMDコンパイラも問題なく動きましたが、M1 nativeじゃないと嫌&hellip;という気持ちがあり、LDC2をメインで使ってます。そのうちクロスコンパイルとかにも挑戦したい。とくにLinuxと違うことはないですが、唯一Emacsの設定でcompany-dmdにLDC2を使ってますよと教える必要があります。あとDCDとかもそこそこ重いので一応M1 nativeじゃないと嫌&hellip;という気持ちでHEADをコンパイルして使ってます。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-elisp" data-lang="elisp"><span style="display:flex;"><span>(use-package d-mode
</span></span><span style="display:flex;"><span>  :ensure <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>  :init
</span></span><span style="display:flex;"><span>  (use-package company-dcd
</span></span><span style="display:flex;"><span>    :ensure <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>    :config
</span></span><span style="display:flex;"><span>    (setq company-dcd-compiler <span style="color:#e6db74">&#34;~/Downloads/ldc2-1.25.1-osx-arm64/bin/ldc2&#34;</span>)
</span></span><span style="display:flex;"><span>    (setq company-dcd-client-executable <span style="color:#e6db74">&#34;~/repos/DCD/bin/dcd-client&#34;</span>)
</span></span><span style="display:flex;"><span>    (setq company-dcd-server-executable <span style="color:#e6db74">&#34;~/repos/DCD/bin/dcd-server&#34;</span>))
</span></span></code></pre></div><p>最近ようやくuse-packageを使って、<code>.emacs</code>の式年造替を終えました。なんとなく長年使ってた <code>.emacs.d/init.el</code> から <code>.emacs</code> に変えました。開きやすいから。</p>
<p>そういえば、前回の記事でflycheck-dmd-dubにWindows MSYS2対応パッチ投げた件、マージしてもらえたのでcompany-dcdにも投げなきゃ&hellip;。</p>
<h2 id="hugo-アップデート">Hugo アップデート</h2>
<p>雑に <code>brew install hugo</code> したら最新版の v0.83.1 が入っていたので Github Actions の方もアプデしました (hugo はシングルバイナリ配布が売りなのでわざわざ brew 使う必要はないが)。目立った違いはなさそうですが、個人的には記事の日付表示が以前から <code>2021-06-02 03:25:33 +0900 +0900</code> となぜかタイムゾーンが二度表示されているバグが修正されて、 <code>2021-06-02 03:25:33 +0900 JST</code> という表記に変わったところが超嬉しいです。JS側でhackするとかHugoの中に手を入れたなかったので、すごく嬉しいです。</p>
<p>追記: と、思ったけどCIでデプロイされたページでは元にもどってる。ロケールとかの問題でしょうか？とりあえず <code>{{ .Date.Format &quot;2006-01-02 15:04:05 MST&quot; }}</code> といった感じでFormatを指定してみました。</p>
<p><a href="https://discourse.gohugo.io/t/convert-all-times-to-utc/3206">https://discourse.gohugo.io/t/convert-all-times-to-utc/3206</a></p>
<h2 id="ダークモード対応">ダークモード対応</h2>
<p><a href="/posts/hugo-setup">このサイトはCSSを書かない主義</a> でやっているのですが、Mac買ってダークモードという概念があることを認識したので、こんな感じで追加してみました。相変わらず 全部 <a href="https://github.com/klknn/klknn.github.io/blob/develop/layouts/_default/baseof.html">layouts/_default/baseof.html</a> に直書きです。ブラウザとOSで異なるモード選択していたらどうなるのかとか気になるけど、まぁいいか。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>@<span style="color:#66d9ef">media</span> <span style="color:#f92672">(</span><span style="color:#f92672">prefers-color-scheme</span><span style="color:#f92672">:</span> <span style="color:#f92672">dark</span><span style="color:#f92672">)</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">body</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">background-color</span>: <span style="color:#ae81ff">#222</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#ddd</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">a</span>:<span style="color:#a6e22e">link</span> { <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#88f</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">a</span>:<span style="color:#a6e22e">visited</span> { <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#88c</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">a</span>:<span style="color:#a6e22e">hover</span> { <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#f88</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">a</span>:<span style="color:#a6e22e">active</span> { <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#f80</span>; }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>あと解像度高いディスプレイで見たら横長すぎて読みにくいので max-width とかもいれました。</p>
]]></content></entry><entry><title>WindowsでのDplug開発</title><link href="https://klknn.github.io/posts/d-windows/"/><id>https://klknn.github.io/posts/d-windows/</id><published>2021-02-28T14:24:12+0900</published><updated>2021-02-28T14:24:12+0900</updated><summary type="html">Synth2 開発のために，普段の音楽制作で使ってるWindowsで開発環境を構築しました．その備忘録です． コンパイラ 以下のツールが必要 MSVC x64/x86 build tools (v14.28) + Windows 10 SDK (10.01924.10) : https://visualstudio.microsoft.com 64bitバイナリのリンクに必要．数GBあるのなんなんですかね．(XCodeよりはマシだが)．Github Actions読み解けば減らせるかもしれない． ldc2 最新版 (ldc2-1.25.0-windows-x64.7z): https://github.com/ldc-developers/ldc/releases D言語のコンパイルに必要． dplug-build: https://github.com/AuburnSounds/Dplug/wiki/Getting-Started#step-3-build-the-dplug-build-tool 動的ライブラリをVST3等のプラグインに変換するときに必要． 色々書くのが面倒で動画も作ったので，暇な人は見てください． https://www.youtube.com/watch?v=vZEgpgHGI-A&amp;amp;t=17s 動画ではPowerShellを使ってますが，私はzsh (+tmux+emacs) が好きなので，基本 MSYS2 で開発してます． エディタ 拘りがなければ VSCode の D 言語拡張 を入れるの...</summary><content type="html"><![CDATA[<p><a href="https://github.com/klknn/synth2">Synth2</a> 開発のために，普段の音楽制作で使ってるWindowsで開発環境を構築しました．その備忘録です．</p>
<h2 id="コンパイラ">コンパイラ</h2>
<p>以下のツールが必要</p>
<ul>
<li>MSVC x64/x86 build tools (v14.28) + Windows 10 SDK (10.01924.10) : <a href="https://visualstudio.microsoft.com">https://visualstudio.microsoft.com</a>
64bitバイナリのリンクに必要．数GBあるのなんなんですかね．(XCodeよりはマシだが)．Github Actions読み解けば減らせるかもしれない．</li>
<li>ldc2 最新版 (ldc2-1.25.0-windows-x64.7z): <a href="https://github.com/ldc-developers/ldc/releases">https://github.com/ldc-developers/ldc/releases</a>
D言語のコンパイルに必要．</li>
<li>dplug-build: <a href="https://github.com/AuburnSounds/Dplug/wiki/Getting-Started#step-3-build-the-dplug-build-tool">https://github.com/AuburnSounds/Dplug/wiki/Getting-Started#step-3-build-the-dplug-build-tool</a>
動的ライブラリをVST3等のプラグインに変換するときに必要．</li>
</ul>
<p>色々書くのが面倒で動画も作ったので，暇な人は見てください．</p>
<p><a href="https://www.youtube.com/watch?v=vZEgpgHGI-A&amp;t=17s">https://www.youtube.com/watch?v=vZEgpgHGI-A&amp;t=17s</a></p>
<p>動画ではPowerShellを使ってますが，私はzsh (+tmux+emacs) が好きなので，基本 <a href="https://www.msys2.org/">MSYS2</a> で開発してます．</p>
<h2 id="エディタ">エディタ</h2>
<p>拘りがなければ <a href="https://github.com/Pure-D/code-d">VSCode の D 言語拡張</a> を入れるのが一番いいと思います．私はemacsが好きなので使ってませんが．</p>
<p>とにかくEmacs対応が一番大変でした．D言語での補完などはDCDが一般的なツールで，それをもとにLSPなどが整備されているようですが，現状VSCode以外で動かせず (Linuxでもできなかった)．結局いつもLinuxで使ってるDCDの薄いラッパーである company-dcd に Windows 特有の問題 (DUBパッケージの場所，パスの文法，CR改行) を対処するパッチをあてて使いました．正確には company-dcd が依存してる flycheck-dmd-dub というパッケージにもパッチが必要です．</p>
<ul>
<li><a href="https://github.com/klknn/flycheck-dmd-dub/tree/fix-cygwin">https://github.com/klknn/flycheck-dmd-dub/tree/fix-cygwin</a></li>
<li><a href="https://github.com/klknn/company-dcd/tree/fix-cygwin">https://github.com/klknn/company-dcd/tree/fix-cygwin</a></li>
</ul>
<p>上記のパッケージにelispのパスを通して，こんな感じで設定してます．</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-elisp" data-lang="elisp"><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;load-path</span> <span style="color:#e6db74">&#34;flycheck-dmd-dubのパス&#34;</span>)
</span></span><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;load-path</span> <span style="color:#e6db74">&#34;company-dcdのパス&#34;</span>)
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;d-mode-hook</span> <span style="color:#e6db74">&#39;company-dcd-mode</span>)
</span></span><span style="display:flex;"><span>(setq company-dcd-client-execulable <span style="color:#e6db74">&#34;dcd-client.exeのパス&#34;</span>)
</span></span><span style="display:flex;"><span>(setq company-dcd-server-execulable <span style="color:#e6db74">&#34;dcd-server.exeのパス&#34;</span>)
</span></span></code></pre></div><p>こんな風にcompanyによる補完や <code>C-c .</code> による定義ジャンプが動くはずです．</p>
<p><img src="/emacs-company-dcd.png" alt="emacs-company-dcd.png"></p>
<p>とりあえず <a href="https://github.com/atilaneves/flycheck-dmd-dub/pull/15">flycheck-dmd-dub に PR</a> を出しました，もし無事マージされたら company-dcd にもPRしたいと思います．</p>
<p>とても久しぶりにelisp書きましたが，シェルスクリプトばりに雑に書けてインタラクティブに動作できるので気持ちいいなと思いました．この適当にhackして治せる点が，他のエディタにない醍醐味だと思います．もしWindowsでemacsがうまく動かなかったらブチ切れてMacを買っていたかもしれません(そっちで動く保証はないですが)．現在Macは持っていないのでサポートする予定ないです．</p>
]]></content></entry><entry><title>デジタルフィルタの実装</title><link href="https://klknn.github.io/posts/filter/"/><id>https://klknn.github.io/posts/filter/</id><published>2021-02-22T23:24:12+0900</published><updated>2021-02-22T23:24:12+0900</updated><summary type="html">自作シンセにLPFを実装したとき の備忘録。 記号のリスト $j$: 虚数 $\omega$: 各周波数。周波数 (Hz) に $2\pi$ をかけたもの $T$: サンプリング周期、サンプリング周波数の逆数 $\omega_0$: カットオフ角周波数 $Q$: レゾナンス (Quality Factorとも呼ぶ) $Q = \sqrt{1/2}$ 以上で、 $\omega_0$ にピークが立つ $x[n]$: 時刻 $n$ におけるフィルタの入力サンプル $y[n]$: 時刻 $n$ におけるフィルタの出力サンプル $a_t$: $t$ 時刻前の出力にかかるフィルタ係数(これをIIRフィルタと呼ぶ) $b_t$: $t$ 時刻前の入力にかかるフィルタ係数(これをFIRフィルタと呼ぶ) デジタルフィルタの定義 一般的なフルIIRフィルタ (IIRおよびFIRフィルタも含む) は時間ドメインでは入出力信号 $x, y$ にそれぞれフィルタ係数 $a, b$ をかけた畳み込みで実装で...</summary><content type="html"><![CDATA[<p><a href="https://github.com/klknn/synth2/commit/e8ee1bc4a237c5b2c5c388d2fab7a3fb1977c26a">自作シンセにLPFを実装したとき</a> の備忘録。</p>
<p>記号のリスト</p>
<ul>
<li>$j$: 虚数</li>
<li>$\omega$: 各周波数。周波数 (Hz) に $2\pi$ をかけたもの</li>
<li>$T$: サンプリング周期、サンプリング周波数の逆数</li>
<li>$\omega_0$: カットオフ角周波数</li>
<li>$Q$: レゾナンス (Quality Factorとも呼ぶ) $Q = \sqrt{1/2}$ 以上で、 $\omega_0$ にピークが立つ</li>
<li>$x[n]$: 時刻 $n$ におけるフィルタの入力サンプル</li>
<li>$y[n]$: 時刻 $n$ におけるフィルタの出力サンプル</li>
<li>$a_t$: $t$ 時刻前の出力にかかるフィルタ係数(これをIIRフィルタと呼ぶ)</li>
<li>$b_t$: $t$ 時刻前の入力にかかるフィルタ係数(これをFIRフィルタと呼ぶ)</li>
</ul>
<h2 id="デジタルフィルタの定義">デジタルフィルタの定義</h2>
<p>一般的なフルIIRフィルタ (IIRおよびFIRフィルタも含む) は時間ドメインでは入出力信号 $x, y$ にそれぞれフィルタ係数 $a, b$ をかけた畳み込みで実装できる:
\begin{align}
y[n] = \sum_{t=0}^{B} b_t x[n - t] - \sum_{t=1}^{A} a_t y[n - t]
\end{align}</p>
<p>IIRフィルタが所望の周波数特性をもつように定義するにはZ変換・ラプラス変換・フーリエ変換を用いる。
先の時間領域の等式の両辺を入力 $x[n]$ で割った入出力比を伝達関数(transfer function)と呼ぶ。さらに $x, y$ をZ変換とよばれる下記の置き換え
\begin{align}
X(z) = \sum_{t} x[t] z^{-t}
\end{align}
によりZ領域での伝達関数を考える:
\begin{align}
H(z) &amp;= \frac{Y(z)}{X(z)}
= \frac{X(z) \sum_{t=0}^{B} b_t z^{-t} - Y(z) \sum_{t=1}^{A} a_t z^{-t}}{X(z)} \nonumber \newline
&amp;= \sum_{t=0}^{B} b_t z^{-t} - H(z) \sum_{t=1}^{A} a_t z^{-t} \nonumber \newline
&amp;= \frac{\sum_{t=0}^{B} b_t z^{-t}}{1 + \sum_{t=1}^{A} a_t z^{-t}}
\end{align}
ここで次のような bilinear 変換によりラプラス領域の伝達関数 $H(s)$ にできる:
\begin{align}
\label{eq:laplace}
s &amp;= \frac{2}{T} \frac{z-1}{z+1}, \newline
\end{align}
ラプラス領域を介することで、さらにフーリエ変換として $s = j \omega$ を代入すれば周波数や位相の特性を得られる。絶対値をとれば $|H(j \omega)|$ が周波数ごとの音量 (db/octの傾きとかわかる), 位相をとれば $\angle{H(j \omega)}$ が周波数ごとの位相応答 (線形位相かなどわかる) を表す関数となる。</p>
<h2 id="フィルタ設計の流れ">フィルタ設計の流れ</h2>
<p>繰り返しになるが上記の各種変換により、デジタルの実装（離散時間領域）と、位相周波数応答の特性（フーリエ領域）を行き来することができる。ここでは触れないが、一時的にでてくるラプラス変換もアナログ回路との対応があり勉強すると楽しい。</p>
<ol>
<li>離散時間 (コード実装の世界) $x[t]$</li>
<li>Z変換 (信号処理における離散と連続の出入口) $X(z)$</li>
<li>ラプラス変換 (アナログ回路との親和性) $X(s)$</li>
<li>フーリエ変換 (位相・周波数の解析) $X(j\omega)$</li>
</ol>
<p>ここまでの話を 4 から 1 に逆にたどると、デジタルフィルタの設計の流れとなる。つまり所望の位相・周波数特性を考え、逆変換により等価なフィルタ係数 $(a_t, b_t)$ を導出するという作業である。</p>
<h2 id="butterworth-フィルタの理論">Butterworth フィルタの理論</h2>
<p>代表的なフィルタとしてButterworthフィルタが音響処理では普及している。他のフィルタと比べてカットオフ周波数のロールオフが緩やかでカットオフ後に荒ぶらない性質がある。アナログ回路に基づいているので多くの場合はラプラス領域での伝達関数が示される。デジタルフィルタとして実装する場合に必要である、Z変換した伝達関数は数式記号処理ソフトを使って式 \eqref{eq:laplace} を代入すると得られる。具体例は後述する実験結果か、以下の本の 8.10 節でも確認できる</p>
<blockquote>
<p>Sean Luke, 2019, Computational Music Synthesis, zeroth edition, available for free at <a href="http://cs.gmu.edu/~sean/book/synthesis/">http://cs.gmu.edu/~sean/book/synthesis/</a></p>
</blockquote>
<p>より一般的な Butterworth フィルタについてはこの PDF が詳しい (余談だが、著者はNIのMassiveやReaktorの開発者らしい <a href="https://www.linkedin.com/in/vadim-zavalishin-451bb812b">linkedin</a>)</p>
<blockquote>
<p>Vadim Zavalishin, The Art of VA Filter Design <a href="https://www.native-instruments.com/fileadmin/ni_media/downloads/pdf/VAFilterDesign_2.1.0.pdf">https://www.native-instruments.com/fileadmin/ni_media/downloads/pdf/VAFilterDesign_2.1.0.pdf</a></p>
</blockquote>
<p>この辺の話は VA Filter Design の2章がよくまとまっている。それでは実際に使われるLPF/HPF/BPFを導出する。</p>
<h3 id="1-pole-low-pass-filter-lpf-6dboct">1-pole Low Pass Filter (LPF) 6db/oct</h3>
<p>天下り的に定義を覚えてもいいが、自分の中で納得する導出を考えてみる。</p>
<p>人間には音の高さや大きさが対数スケールで感じる(例えば倍の周波数が1オクターブ上として聞こえる)ので、指数的に周波数を倍にすると、音量が半分になるようなLPフィルタがほしい。そのためには周波数の逆数みたいな周波数応答がいい。
\begin{align}
|H(j\omega)| &amp;= \frac{1}{w},
\end{align}
ただし周波数0のときに無限の音量になるのでやばい。そこで
\begin{align}
|H(j\omega)| &amp;= \frac{1}{w + 1},
\end{align}
とすれば周波数0では元の音量となるよう、先の関数を周波数 $w$ 軸に平行移動して音量が半減してゆく。ここまでは絶対値で議論してきたが、この性質をもつラプラス領域での伝達関数には以下のものが考えられる
\begin{align}
H(s) &amp;= \frac{1}{s + 1}.
\end{align}
さらに $s = s&rsquo; / \omega_0$ を代入することで、今度は対数スケールで周波数軸を左右に平行移動できる。これは単なる変数変換なので、同じ代入式で任意のフィルタ伝達関数にカットオフ周波数 $\omega_0$ を導入できる。
\begin{align}
H(s) = \frac{1}{\frac{s}{\omega_0} + 1}
\end{align}</p>
<p>この式は 1 pole (分母 = 0の方程式が1つの解をもつ) であり、倍の周波数(1 octave上) で0.5倍の音量つまりデシベル(db)でいうと $20 \log_{10} 0.5 \approx -6$ db/octave で高域が減衰するという。</p>
<h3 id="1-pole-high-pass-filter-hpf-6dboct">1-pole High Pass Filter (HPF) 6db/oct</h3>
<p>LPFと同じような議論で、$s / \omega_0$ の代わりに二倍低い周波数が二倍小さいレベルとなるよう $\omega_0 / s$が使えることがわかる。代入するとこのような伝達関数が得られる:
\begin{align}
H(s) = \frac{\frac{s}{\omega_0}}{\frac{s}{\omega_0} + 1}
\end{align}</p>
<h3 id="2-pole-low-pass-filter-lpf-12dboct">2-pole Low Pass Filter (LPF) 12db/oct</h3>
<p>単純に1-pole LPFを二回かけると 2 pole (分母 = 0の方程式が2つの解をもつ) で 12db/octave で高域が減衰するLPFになる。フィルタは畳み込みなので、そのラプラス変換は積つまり、もとのLPFの二乗になる。</p>
<p>単純に二回かけるかわりに、2-poleではレゾナンス $Q$ により周波数ピークをたたせることができる。
\begin{align}
H(s) = \frac{1}{\frac{s^2}{\omega_0^2} + \frac{s}{\omega_0 Q} + 1}
\end{align}
TODO: なぜ Q でピークがたつかの説明 (天下り的に周波数応答みればよいが、直感的な説明があるとよい)。気になる人は VA Filter Designの 4.2 Resonanceを読むとよい。</p>
<h3 id="2-pole-high-pass-filter-hpf-12dboct">2-pole High Pass Filter (HPF) 12db/oct</h3>
<p>上に同じ性質をもつが逆に低域が減衰する。</p>
<p>\begin{align}
H(s) = \frac{\frac{s^2}{\omega_0^2}}{\frac{s^2}{\omega_0^2} + \frac{s}{\omega_0 Q} + 1}
\end{align}</p>
<h3 id="2-pole-band-pass-filter-bpf-12dboct">2-pole Band Pass Filter (BPF) 12db/oct</h3>
<p>上に同じ性質を持つが高域と低域の両方が減衰する。</p>
<p>\begin{align}
H(s) = \frac{\frac{s}{\omega_0 Q}}{\frac{s^2}{\omega_0^2} + \frac{s}{\omega_0 Q} + 1}
\end{align}</p>
<p>LPF, HPFとBPFの伝達関数を全部足したら1になるな、と思った人は筋が良い。ラプラス変換には線形性があるので、実際の各フィルタの出力を足し合わせてもとに戻るように、何もしない伝達関数 $H(s)=1$ が現れる。</p>
<h2 id="実装におけるフィルタ係数-pythonによる自動導出">実装におけるフィルタ係数 (pythonによる自動導出)</h2>
<p>で、結局冒頭のフィルタ係数 $a, b$ は何なんだという。</p>
<p>ここまで得られたラプラス領域の伝達関数を式 \eqref{eq:laplace} を用いたZ変換することで冒頭の離散時間領域の多項式が求まり、実装に必要なデジタルフィルタの係数が得られる。1-poleくらいなら手計算してもいいが、2-poleになるとしんどいので面倒なことはPython (の数式処理ライブラリであるSymPy) にやらせよう。</p>
<p>コード <a href="/filter_coeff.py">filter_coeff.py</a>


<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#75715e"># requires version &#39;1.7.1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> sympy <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>s <span style="color:#f92672">=</span> Symbol(<span style="color:#e6db74">&#39;s&#39;</span>)
</span></span><span style="display:flex;"><span>z <span style="color:#f92672">=</span> Symbol(<span style="color:#e6db74">&#39;z&#39;</span>)
</span></span><span style="display:flex;"><span>Q <span style="color:#f92672">=</span> Symbol(<span style="color:#e6db74">&#39;Q&#39;</span>)    <span style="color:#75715e"># resonance</span>
</span></span><span style="display:flex;"><span>T <span style="color:#f92672">=</span> Symbol(<span style="color:#e6db74">&#39;T&#39;</span>)    <span style="color:#75715e"># sampling interval</span>
</span></span><span style="display:flex;"><span>w0 <span style="color:#f92672">=</span> Symbol(<span style="color:#e6db74">&#39;w0&#39;</span>)  <span style="color:#75715e"># cutoff freq</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># z2s = 2 / T * (z - 1) / (z + 1)</span>
</span></span><span style="display:flex;"><span>s2z <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">/</span> T <span style="color:#f92672">*</span> (z <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">/</span> (z <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">print_coeff</span>(hs):
</span></span><span style="display:flex;"><span>    hz <span style="color:#f92672">=</span> simplify(hs<span style="color:#f92672">.</span>subs(s, s2z))  <span style="color:#75715e"># Z transform</span>
</span></span><span style="display:flex;"><span>    npole <span style="color:#f92672">=</span> degree(denom(hs), s)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;=== Transfer function ===&#34;</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;H(s) =&#34;</span>, hs)  <span style="color:#75715e"># transfer function in Laplace domain</span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;H(z) =&#34;</span>, hz)  <span style="color:#75715e"># transfer function in Z domain</span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;#pole =&#34;</span>, npole)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;=== Filter coeffients ===&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># FIR coeff</span>
</span></span><span style="display:flex;"><span>    dhz <span style="color:#f92672">=</span> collect(expand(denom(hz) <span style="color:#f92672">*</span> z <span style="color:#f92672">**</span> <span style="color:#f92672">-</span>npole), z)
</span></span><span style="display:flex;"><span>    nhz <span style="color:#f92672">=</span> collect(expand(numer(hz) <span style="color:#f92672">*</span> z <span style="color:#f92672">**</span> <span style="color:#f92672">-</span>npole), z)
</span></span><span style="display:flex;"><span>    a0 <span style="color:#f92672">=</span> dhz<span style="color:#f92672">.</span>coeff(z, <span style="color:#ae81ff">0</span>)  <span style="color:#75715e"># to normalize a0 = 1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(npole <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;b</span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74"> =&#34;</span>, nhz<span style="color:#f92672">.</span>coeff(z, <span style="color:#f92672">-</span>i) <span style="color:#f92672">/</span> a0)
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># IIR coeff</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, npole <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;a</span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74"> =&#34;</span>, dhz<span style="color:#f92672">.</span>coeff(z, <span style="color:#f92672">-</span>i) <span style="color:#f92672">/</span> a0)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Filter: 1-pole LPF&#34;</span>)
</span></span><span style="display:flex;"><span>print_coeff(hs <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">/</span> (s <span style="color:#f92672">/</span> w0 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>))
</span></span><span style="display:flex;"><span>print()
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Filter: 1-pole HPF&#34;</span>)
</span></span><span style="display:flex;"><span>print_coeff(hs <span style="color:#f92672">=</span> s <span style="color:#f92672">/</span> (s <span style="color:#f92672">+</span> w0))
</span></span><span style="display:flex;"><span>print()
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Filter: 2-pole LPF&#34;</span>)
</span></span><span style="display:flex;"><span>print_coeff(hs <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">/</span> (s<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">/</span> w0<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> s <span style="color:#f92672">/</span> w0 <span style="color:#f92672">/</span> Q <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>))
</span></span><span style="display:flex;"><span>print()
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Filter: 2-pole HPF&#34;</span>)
</span></span><span style="display:flex;"><span>print_coeff(hs <span style="color:#f92672">=</span> (s<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">/</span> w0<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>) <span style="color:#f92672">/</span> (s<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">/</span> w0<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> s <span style="color:#f92672">/</span> w0 <span style="color:#f92672">/</span> Q <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>))
</span></span><span style="display:flex;"><span>print()
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Filter: 2-pole BPF&#34;</span>)
</span></span><span style="display:flex;"><span>print_coeff(hs <span style="color:#f92672">=</span> (s <span style="color:#f92672">/</span> w0 <span style="color:#f92672">/</span> Q) <span style="color:#f92672">/</span> (s<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">/</span> w0<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> s <span style="color:#f92672">/</span> w0 <span style="color:#f92672">/</span> Q <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>))
</span></span></code></pre></div>
</p>
<p>結果 <a href="/filter_coeff.txt">filter_coeff.txt</a>


<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>Filter: 1-pole LPF
</span></span><span style="display:flex;"><span>=== Transfer function ===
</span></span><span style="display:flex;"><span>H(s) = 1/(s/w0 + 1)
</span></span><span style="display:flex;"><span>H(z) = T*w0*(z + 1)/(T*w0*(z + 1) + 2*z - 2)
</span></span><span style="display:flex;"><span>#pole = 1
</span></span><span style="display:flex;"><span>=== Filter coeffients ===
</span></span><span style="display:flex;"><span>b0 = T*w0/(T*w0 + 2)
</span></span><span style="display:flex;"><span>b1 = T*w0/(T*w0 + 2)
</span></span><span style="display:flex;"><span>a1 = (T*w0 - 2)/(T*w0 + 2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Filter: 1-pole HPF
</span></span><span style="display:flex;"><span>=== Transfer function ===
</span></span><span style="display:flex;"><span>H(s) = s/(s + w0)
</span></span><span style="display:flex;"><span>H(z) = 2*(z - 1)/(T*w0*(z + 1) + 2*z - 2)
</span></span><span style="display:flex;"><span>#pole = 1
</span></span><span style="display:flex;"><span>=== Filter coeffients ===
</span></span><span style="display:flex;"><span>b0 = 2/(T*w0 + 2)
</span></span><span style="display:flex;"><span>b1 = -2/(T*w0 + 2)
</span></span><span style="display:flex;"><span>a1 = (T*w0 - 2)/(T*w0 + 2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Filter: 2-pole LPF
</span></span><span style="display:flex;"><span>=== Transfer function ===
</span></span><span style="display:flex;"><span>H(s) = 1/(s**2/w0**2 + 1 + s/(Q*w0))
</span></span><span style="display:flex;"><span>H(z) = Q*T**2*w0**2*(z + 1)**2/(Q*T**2*w0**2*(z + 1)**2 + 4*Q*(z - 1)**2 + 2*T*w0*(z - 1)*(z + 1))
</span></span><span style="display:flex;"><span>#pole = 2
</span></span><span style="display:flex;"><span>=== Filter coeffients ===
</span></span><span style="display:flex;"><span>b0 = Q*T**2*w0**2/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
</span></span><span style="display:flex;"><span>b1 = 2*Q*T**2*w0**2/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
</span></span><span style="display:flex;"><span>b2 = Q*T**2*w0**2/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
</span></span><span style="display:flex;"><span>a1 = (2*Q*T**2*w0**2 - 8*Q)/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
</span></span><span style="display:flex;"><span>a2 = (Q*T**2*w0**2 + 4*Q - 2*T*w0)/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Filter: 2-pole HPF
</span></span><span style="display:flex;"><span>=== Transfer function ===
</span></span><span style="display:flex;"><span>H(s) = s**2/(w0**2*(s**2/w0**2 + 1 + s/(Q*w0)))
</span></span><span style="display:flex;"><span>H(z) = 4*Q*(z - 1)**2/(Q*T**2*w0**2*(z + 1)**2 + 4*Q*(z - 1)**2 + 2*T*w0*(z - 1)*(z + 1))
</span></span><span style="display:flex;"><span>#pole = 2
</span></span><span style="display:flex;"><span>=== Filter coeffients ===
</span></span><span style="display:flex;"><span>b0 = 4*Q/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
</span></span><span style="display:flex;"><span>b1 = -8*Q/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
</span></span><span style="display:flex;"><span>b2 = 4*Q/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
</span></span><span style="display:flex;"><span>a1 = (2*Q*T**2*w0**2 - 8*Q)/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
</span></span><span style="display:flex;"><span>a2 = (Q*T**2*w0**2 + 4*Q - 2*T*w0)/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Filter: 2-pole BPF
</span></span><span style="display:flex;"><span>=== Transfer function ===
</span></span><span style="display:flex;"><span>H(s) = s/(Q*w0*(s**2/w0**2 + 1 + s/(Q*w0)))
</span></span><span style="display:flex;"><span>H(z) = 2*T*w0*(z - 1)*(z + 1)/(Q*T**2*w0**2*(z + 1)**2 + 4*Q*(z - 1)**2 + 2*T*w0*(z - 1)*(z + 1))
</span></span><span style="display:flex;"><span>#pole = 2
</span></span><span style="display:flex;"><span>=== Filter coeffients ===
</span></span><span style="display:flex;"><span>b0 = 2*T*w0/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
</span></span><span style="display:flex;"><span>b1 = 0
</span></span><span style="display:flex;"><span>b2 = -2*T*w0/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
</span></span><span style="display:flex;"><span>a1 = (2*Q*T**2*w0**2 - 8*Q)/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
</span></span><span style="display:flex;"><span>a2 = (Q*T**2*w0**2 + 4*Q - 2*T*w0)/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
</span></span></code></pre></div>
</p>
<p>ある程度、展開できればいいやと思ってたが、完全に自動化できると思ってなかった&hellip;。ちなみに古いバージョンのsympyでやるとうまくいかないので注意。</p>
<h2 id="メモ疑問">メモ・疑問</h2>
<ul>
<li>リアルタイム性は犠牲になるが、位相が変化しない線形位相フィルタとはどういうものか</li>
<li>MoogやTB303に搭載されるアナログLPFは、ここでとりあげたButterworthとは異なる (<a href="https://github.com/klknn/synth2/blob/c3d06e87b10fe31e6b68d060b1e5c8788f383d9d/tool/filter_coeff.py#L62-L73">コード</a>)。アナログ回路面からも、どのようにして設計されるか考察したい。</li>
<li>1-pole フィルタはレゾナンスをもたない?</li>
<li>全く周波数を変化しない代わりに周波数ごとの位相を変える All Pass Filterというものがある。周波数ごとに音の遅れ方を変えたいリバーブなどで使う</li>
<li>より一般化されたButterworth filter自体の定義とは?私にはまだN-poleのLPFとかがどういう形なのか完全に理解できてない</li>
</ul>
]]></content></entry><entry><title>Zig 入門</title><link href="https://klknn.github.io/posts/zig/"/><id>https://klknn.github.io/posts/zig/</id><published>2020-07-11T21:39:11+0900</published><updated>2020-07-11T21:39:11+0900</updated><summary type="html">最近システム系の言語として、Cコンパイラを内蔵したり話題になっている zig 言語。簡単なプログラムを書きながら入門しています。仕様はミニマルな感じですが、なかなかユニークな言語です。 現時点で最新の0.6.0を想定。公式にドキュメントがない部分も多いので今後変わる可能性が高い。この辺は新参の言語ということで愛嬌だが、RustやD言語のようなレベルを想定すると驚く。ただ一貫した思想のあるミニマリストな言語なので意外となんとかなる。 初期設定 公式サイト からビルド済みバイナリをDLしてパスを通すだけ。CPUはx86と各種arm系、OSはlinuxにwindows、freebsdもあるすごい。 wget https://ziglang.org/download/0.6.0/zig-linux-x86_64-0.6.0.tar.xz tar xvf zig-linux-x86_64-0.6.0.tar.xz export PATH=$(pwd)/zig-linux-x86_64-0.6.0:$PATH 同じ...</summary><content type="html"><![CDATA[
<p>
最近システム系の言語として、Cコンパイラを内蔵したり話題になっている zig 言語。簡単なプログラムを書きながら入門しています。仕様はミニマルな感じですが、なかなかユニークな言語です。</p>
<p>
現時点で最新の0.6.0を想定。公式にドキュメントがない部分も多いので今後変わる可能性が高い。この辺は新参の言語ということで愛嬌だが、RustやD言語のようなレベルを想定すると驚く。ただ一貫した思想のあるミニマリストな言語なので意外となんとかなる。</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
初期設定
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>
<a href="https://ziglang.org/download/">公式サイト</a> からビルド済みバイナリをDLしてパスを通すだけ。CPUはx86と各種arm系、OSはlinuxにwindows、freebsdもあるすごい。</p>
<div class="src src-bash">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>wget https://ziglang.org/download/0.6.0/zig-linux-x86_64-0.6.0.tar.xz
</span></span><span style="display:flex;"><span>tar xvf zig-linux-x86_64-0.6.0.tar.xz
</span></span><span style="display:flex;"><span>export PATH<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>pwd<span style="color:#66d9ef">)</span>/zig-linux-x86_64-0.6.0:$PATH</span></span></code></pre></div>
</div>
<p>
同じページに <a href="https://ziglang.org/documentation/0.6.0">Language Reference</a> と <a href="https://ziglang.org/documentation/0.6.0/std">Standard Library Documentation</a> がある。これらと github のコードがほぼ全ての情報源である。とりあえず最初の Hello world くらいはやっとくと雰囲気つかめる。</p>
<p>
エディタがLSPに対応していれば <a href="https://github.com/zigtools/zls">zls</a> をいれると定義元にジャンプしたりドキュメント読んだり、はかどります。 <code>zig fmt</code> というコマンドでフォーマットできるのですが、若干クセがあり、例えば構造体などの最後の要素に &#34;,&#34; がないと一行にフォーマットされる挙動に最初戸惑いました。このへんの挙動は <a href="https://github.com/ziglang/zig/blob/d21a1922eb5d76b9b0d0611eaeb42c91f83234ab/std/zig/parser_test.zig">このテスト群</a> を見ればわかります。</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
プロジェクト作成
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>
まずは簡単なプロジェクトの作成から。本稿の情報はまったくドキュメントがなく、全部 <a href="https://github.com/ziglang/zig/blob/0.6.0/lib/std/build.zig">build.zig</a> を読んで得たもので、間違っているかもしれない。</p>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
プロジェクト雛形の作成
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<div class="src src-bash">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir foo
</span></span><span style="display:flex;"><span>cd foo
</span></span><span style="display:flex;"><span>zig init-exe</span></span></code></pre></div>
</div>
<p>ライブラリを作るときは <code>init-lib</code></p>
<p>
これでこんなファイルが生成される</p>
<div class="src src-c">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> Builder <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#a6e22e">import</span>(<span style="color:#e6db74">&#34;std&#34;</span>).build.Builder;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pub fn <span style="color:#a6e22e">build</span>(b: <span style="color:#f92672">*</span>Builder) <span style="color:#66d9ef">void</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Standard target options allows the person running `zig build` to choose
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// what target to build for. Here we do not override the defaults, which
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// means any target is allowed, and the default is native. Other options
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// for restricting supported target set are available.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">const</span> target <span style="color:#f92672">=</span> b.<span style="color:#a6e22e">standardTargetOptions</span>(.{});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Standard release options allow the person running `zig build` to select
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// between Debug, ReleaseSafe, ReleaseFast, and ReleaseSmall.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">const</span> mode <span style="color:#f92672">=</span> b.<span style="color:#a6e22e">standardReleaseOptions</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> exe <span style="color:#f92672">=</span> b.<span style="color:#a6e22e">addExecutable</span>(<span style="color:#e6db74">&#34;foo&#34;</span>, <span style="color:#e6db74">&#34;src/main.zig&#34;</span>);
</span></span><span style="display:flex;"><span>    exe.<span style="color:#a6e22e">setTarget</span>(target);
</span></span><span style="display:flex;"><span>    exe.<span style="color:#a6e22e">setBuildMode</span>(mode);
</span></span><span style="display:flex;"><span>    exe.<span style="color:#a6e22e">install</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> run_cmd <span style="color:#f92672">=</span> exe.<span style="color:#a6e22e">run</span>();
</span></span><span style="display:flex;"><span>    run_cmd.step.<span style="color:#a6e22e">dependOn</span>(b.<span style="color:#a6e22e">getInstallStep</span>());
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> run_step <span style="color:#f92672">=</span> b.<span style="color:#a6e22e">step</span>(<span style="color:#e6db74">&#34;run&#34;</span>, <span style="color:#e6db74">&#34;Run the app&#34;</span>);
</span></span><span style="display:flex;"><span>    run_step.<span style="color:#a6e22e">dependOn</span>(<span style="color:#f92672">&amp;</span>run_cmd.step);
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-4" class="outline-3">
<h3 id="headline-4">
システムライブラリの追加
</h3>
<div id="outline-text-headline-4" class="outline-text-3">
<p>
たぶん普通のアプリをかくなら malloc とかで libc は必要。この辺、デフォルトで何もついてないのが真のシステム用言語という感じがしますね。</p>
<div class="src src-c">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> exe <span style="color:#f92672">=</span> b.<span style="color:#a6e22e">addExecutable</span>(<span style="color:#e6db74">&#34;foo&#34;</span>, <span style="color:#e6db74">&#34;src/main.zig&#34;</span>);
</span></span><span style="display:flex;"><span>    exe.<span style="color:#a6e22e">setTarget</span>(target);
</span></span><span style="display:flex;"><span>    exe.<span style="color:#a6e22e">setBuildMode</span>(mode);
</span></span><span style="display:flex;"><span>    exe.<span style="color:#a6e22e">linkSystemLibrary</span>(<span style="color:#e6db74">&#34;c&#34;</span>);  <span style="color:#75715e">// -lc がビルドオプションに追加される
</span></span></span></code></pre></div>
</div>
<p>
コマンドラインから <code>zig build run</code> で実行。</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-5" class="outline-2">
<h2 id="headline-5">
テスト作成
</h2>
<div id="outline-text-headline-5" class="outline-text-2">
<div id="outline-container-headline-6" class="outline-3">
<h3 id="headline-6">
test ブロック
</h3>
<div id="outline-text-headline-6" class="outline-text-3">
<p>
D言語みたいにテスト用の構文がある。これはとても便利で、REPL的に使って言語の確認をしたり便利。</p>
<div class="src src-c">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> std <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">@</span><span style="color:#a6e22e">import</span>(<span style="color:#e6db74">&#34;std&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>fn <span style="color:#a6e22e">f</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>test <span style="color:#e6db74">&#34;f&#34;</span> {
</span></span><span style="display:flex;"><span>    std.debug.<span style="color:#a6e22e">assert</span>(<span style="color:#a6e22e">f</span>() <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-7" class="outline-3">
<h3 id="headline-7">
build.zig に テストの追加
</h3>
<div id="outline-text-headline-7" class="outline-text-3">
<p>
正直、これで良いのかわかっていませんが、動いている・ちゃんと失敗するのでとりあえず。</p>
<div class="src src-c">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> test_step <span style="color:#f92672">=</span> b.<span style="color:#a6e22e">step</span>(<span style="color:#e6db74">&#34;test&#34;</span>, <span style="color:#e6db74">&#34;Test the app&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> main_test <span style="color:#f92672">=</span> b.<span style="color:#a6e22e">addTest</span>(<span style="color:#e6db74">&#34;src/main.zig&#34;</span>);
</span></span><span style="display:flex;"><span>    main_test.<span style="color:#a6e22e">linkSystemLibrary</span>(<span style="color:#e6db74">&#34;c&#34;</span>);
</span></span><span style="display:flex;"><span>    test_step.<span style="color:#a6e22e">dependOn</span>(<span style="color:#f92672">&amp;</span>main_test.step); <span style="color:#75715e">// 同じように複数ファイル追加も可能
</span></span></span></code></pre></div>
</div>
<p>さっしの通り <code>b.step(コマンド名, 説明)</code> で定義したコマンドを <code>zig build コマンド名</code> で動かせるようだ。かなり汎用。</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-8" class="outline-2">
<h2 id="headline-8">
余談
</h2>
<div id="outline-text-headline-8" class="outline-text-2">
<div id="outline-container-headline-9" class="outline-3">
<h3 id="headline-9">
良いと思った言語機能
</h3>
<div id="outline-text-headline-9" class="outline-text-3">
<ul>
<li>全部明示的に書く思想が読みやすい。dtorの代わりにdefer、例外の代わりにerror union、overloadなし、という潔さ。</li>
<li>構文が簡単。<a href="https://github.com/ziglang/zig-spec/blob/master/grammar/grammar.y">yaccで500行</a>というミニマルさ。<a href="https://github.com/ruby/ruby/blob/v2_7_1/parse.y">Rubyのparse.y</a>とかと比べるとすごい。</li>
<li><code>union(enum)</code> タグ付きユニオンというやつ。システム系でよくあるパターンを楽に。</li>
<li>値にできそうなものは全部値になってる。名前空間とか型情報とかも値。</li>
<li>いろんな構文が式で結果を返してくれるところ。短くかける。</li>
<li>関数の引数が値か参照かはコンパイラが決める。デフォルトでimmutableだとこういうのがいい。</li>
<li>言語機能のoptional型 <code>?T</code> 。ポインタのoptionalはポインタと同じサイズになるのも嬉しい。</li>
<li>言語機能のerror union型。スタックトレースでるので実質例外だと思うけど、共有体として Eitherみたいな if/else や switch もできて文法的に便利。</li>
<li>上に関連して <code>!T</code> や <code>try</code> 式で、明示的にerrorやoptional投げるところがわかる。。</li>
<li><code>defer</code> D言語でいう <code>scope(exit)</code> で、初期化と最終化を並べてかける。</li>
<li>WASMをサポートしているところ。そのせいでallocatorとかに依存できない標準ライブラリが結構渋いが。</li>
<li>多機能な async/await 構文がある。初見では、なぜここまで多機能なのかわからなかったが、coroutineをやりたいのだろうか。</li>
</ul>
<p>でも変なところもある、for 文が配列専用で、while文が従来のfor文みたいな役割になってるのは慣れない。<a href="https://ziglang.org/documentation/0.6.0/#Style-Guide">公式のコーディングスタイル</a>も独特である(変数と名前空間はsnake_case、関数はcamelCase、型と型関数はTitleCase)。とはいえ慣れの問題といえばそう。</p>
</div>
</div>
<div id="outline-container-headline-10" class="outline-3">
<h3 id="headline-10">
今後
</h3>
<div id="outline-text-headline-10" class="outline-text-3">
<p>
勉強用に、とりあえず小さいJVMみたいなやつ書いてます。CIとかも設定してる。</p>
<p>
<a href="https://github.com/klknn/zigjvm">https://github.com/klknn/zigjvm</a></p>
<p>
今後、とりあえずCとの連携とか調べて、BLASとか数値計算用のライブラリでも作ろうかな。それかvector型があるのでそれを試すか。</p>
</div>
</div>
</div>
</div>
]]></content></entry><entry><title>BT ワークフローを加速する7つの秘訣</title><link href="https://klknn.github.io/posts/bt-workflow/"/><id>https://klknn.github.io/posts/bt-workflow/</id><published>2020-07-10T16:19:42+0900</published><updated>2020-07-10T16:19:42+0900</updated><summary type="html">私、ミュージシャンの中でBTが一番好きで尊敬しているのですが、 https://bt-music.lpages.co/freebies/ 上記のサイトでいろんなTIPSや音源を配っていて勉強になります。なかでも &amp;ldquo;BT&amp;rsquo;s 7 Secrets to Accelerate Your Workflow&amp;rdquo; というPDFが良いです。私の記事はただの感想で、内容をかなり端折ってるのでぜひ原文を入手してください（無料なので）。 Stream Deck https://www.amazon.co.jp/dp/B06W2KLM3S ショートカットとか登録できるコントローラですね。アイコンとかアサインできてOBS系の配信ソフトで使われているガジェットらしい。BTはemail, DAW, SNSとかあらゆるアプリを登録して使ってるらしいです。とくに複数DAWの同じ機能を同じキーに割り当てられるのが超便利とのこと。 フォルダの整理 「より整理すれば、より素晴らしい音楽を書け...</summary><content type="html"><![CDATA[<p>私、ミュージシャンの中でBTが一番好きで尊敬しているのですが、</p>
<p><a href="https://bt-music.lpages.co/freebies/">https://bt-music.lpages.co/freebies/</a></p>
<p>上記のサイトでいろんなTIPSや音源を配っていて勉強になります。なかでも &ldquo;BT&rsquo;s 7 Secrets to Accelerate Your Workflow&rdquo; というPDFが良いです。私の記事はただの感想で、内容をかなり端折ってるのでぜひ原文を入手してください（無料なので）。</p>
<h2 id="stream-deck">Stream Deck</h2>
<p><a href="https://www.amazon.co.jp/dp/B06W2KLM3S">https://www.amazon.co.jp/dp/B06W2KLM3S</a></p>
<p>ショートカットとか登録できるコントローラですね。アイコンとかアサインできてOBS系の配信ソフトで使われているガジェットらしい。BTはemail, DAW, SNSとかあらゆるアプリを登録して使ってるらしいです。とくに複数DAWの同じ機能を同じキーに割り当てられるのが超便利とのこと。</p>
<h2 id="フォルダの整理">フォルダの整理</h2>
<p>「より整理すれば、より素晴らしい音楽を書ける」とのことです。耳が痛いですが、プログラマ的なBTの思考です。彼のレクチャー(そういうサービスやってるの初めて知った)では、フォルダ整理術を深く掘り下げるらしいです。かなり気になる。</p>
<p>とりあえず出発地点として、「曲名」をフォルダ名とかDAWとかで最初に設定するのがしんどいと思うのですが、とりあえず「テンポとキー」を曲名にしてるそうです、たとえば「124 Eb」みたいな。その下に「Sessions」という実際のDAW関連のファイル置き場、「Materials」というその他の素材やメモを置くそうです。あとから振り返りやすいし良いですね。</p>
<h2 id="バージョン管理">バージョン管理</h2>
<p>CubaseとかLogicにはそういう機能があるので使うべしということです。私は使ったことがなかったです。</p>
<p><a href="https://www.soundonsound.com/techniques/cubases-track-versions">https://www.soundonsound.com/techniques/cubases-track-versions</a></p>
<p>たしかにすぐ切り替えれるし、A/Bテスト的なのやりやすそう。そういう機能がない場合は普通に「Versions」というフォルダを作って複数のプロジェクトファイルを保存。</p>
<p>書いてないけど、推測するに、彼は一回オーディオ化したMIDIとか、不要なトラックを全部整理して消すんじゃないかなと思います。目の前に必要なものだけ並べて、あとから必要になったら取り出せばいいという精神。</p>
<h2 id="ステムを書き出す">ステムを書き出す</h2>
<p>「 <strong>どんな音でも</strong> ステムでマスタリングするほうが、ステレオからやるより良い。」そうです。ちなみにステムとは一般的にドラムとかボーカルとか大まかな単位でまとめて、複数本のWAVにミックスしたものです。ステレオは一旦マキシマイザーとか無しで一本のWAVに落とすやつです。とくに映画音楽では、映像で調整するのでステムでの提出が必須らしく、慣れた方が良いですね。</p>
<p>トラック名もわかりやすくしましょうとのことです。最近BTのremixコンテストでステムを実際に見る機会があったのですが、こんな感じでした:</p>
<p><img src="/posts/stems.png" alt="stems.png"></p>
<p>ステムを作るとRemix用のデータとしてすぐ渡せるオマケ効果もあるとのこと。</p>
<h2 id="寝る前にtodoをメモ">寝る前にTODOをメモ</h2>
<p>夜遅くまで曲を作っていると眠れなくなりますよね。そんなときは、「ああ２つめのドロップにハイパス書けなきゃ」とか考えていることを全部メモしておく。もう書いたから考えなくても大丈夫！と思えば脳は休めるらしいです。</p>
<p><a href="https://www.amazon.co.jp/gp/product/8883701003">https://www.amazon.co.jp/gp/product/8883701003</a></p>
<p>ちなみにBTは普段このメモ帳を使ってるらしいです、日本でも売ってた。たぶんスマホとかは眠りにくくなるから、紙でメモとるのいいなと思った。</p>
<h2 id="新しいキーコマンドを学ぶ">新しいキーコマンドを学ぶ</h2>
<p>休日、フローに入れず集中できない、そんなときは、できることからやってみる。とくにスキルセットを積もう。なんなら集中してフローに入ってるときですら、週一くらいで何かやってほうがいい。</p>
<p>(フローって黒子のバスケのあれみたいな感じ？)</p>
<p>例えば、DAWやプラグイン、ハードウェアのマニュアルを読む時間を作ろう（たしかに集中力はいらないし、めっちゃ制作に役立つ）。新しいことを試して、記憶に新しい機能として取り込む、あたらしいキーコマンドを学ぶ。そういったことがあとで「フロー」に入ったときに効いてくる。</p>
<p>覚えて欲しいこととして、「絶対に作曲中はYoutubeに近づくな」。なぜならキーコマンドやショートカットを忘れてしまうから（笑）。「オフの日は勉強しろ」とのことです。最良の探求がプロデューサを形作るそうです。</p>
<h2 id="dropboxか似たようなやつ">Dropboxか、似たようなやつ</h2>
<p>毎日バージョン管理してる曲とかWIP(やりかけ)のMP3とかをdropboxにあげてるそうです。</p>
<p>そんで Airpods Pro (BT: なぜこういうやつ嫌いだったんだろう、スゴイよこれ) で散歩中とか、ジムで運動してるとき、原っぱで寝てるとき、とにかく違う環境で聴く。そうやって視点を持ち上げることで、数え切れないほどの「アハ体験」をしてきたとのこと。</p>
<p>そういえば冨田恵一とかもとりあえず曲できたら、車に乗って客観的に聞き直すとかサンレコの動画でいってましたね。</p>
<p><a href="https://youtu.be/Jzj0TNFlYJw?t=390">https://youtu.be/Jzj0TNFlYJw?t=390</a></p>
]]></content></entry><entry><title>hugo の初期設定</title><link href="https://klknn.github.io/posts/hugo-setup/"/><id>https://klknn.github.io/posts/hugo-setup/</id><published>2020-07-07T17:36:28+0900</published><updated>2020-07-07T17:36:28+0900</updated><summary type="html">hugo 1 を始めた。これまでhatenaとかwordpress使ってきたけど、毎回使い勝手が変わってたり忘れてたりする。hugoならmarkdownやorg-modeでかけるので忘れることはないし、自分で全部管理する感じが良い。 いまどきブログなんて流行らないだろうけど、逆に今時cssもほとんどないサイトって懐かしくていいなと。たまたまHTMLだけのすごくシンプルな雛形 2 を見ながら書きました。唯一 &amp;lt;table&amp;gt; タグだけイマイチなのでcss書いた。とりあえず数行の css と js なので全部 layouts/_default/baseof.html に突っ込んでいます。こういうので良いと思い始めた。真似したい人は layouts 以下をまるごとコピーして config.toml の中身 baseURL = &amp;#34;https://klknn.github.io/&amp;#34; languageCode = &amp;#34;ja&amp;#34; title = &amp;#34;klknn log&amp;#34; [params] author = &amp;#34;klknn&amp;#34; editURL = &amp;#34;https://github.com/klknn/klknn.github.io/edit/develop/content&amp;#34; を適...</summary><content type="html"><![CDATA[<p>
hugo <sup class="footnote-reference"><a id="footnote-reference-1" href="#footnote-1">1</a></sup> を始めた。これまでhatenaとかwordpress使ってきたけど、毎回使い勝手が変わってたり忘れてたりする。hugoならmarkdownやorg-modeでかけるので忘れることはないし、自分で全部管理する感じが良い。</p>
<p>
いまどきブログなんて流行らないだろうけど、逆に今時cssもほとんどないサイトって懐かしくていいなと。たまたまHTMLだけのすごくシンプルな雛形 <sup class="footnote-reference"><a id="footnote-reference-2" href="#footnote-2">2</a></sup> を見ながら書きました。唯一 <code>&lt;table&gt;</code> タグだけイマイチなのでcss書いた。とりあえず数行の css と js なので全部 <a href="https://github.com/klknn/klknn.github.io/blob/6d58363642f64cc775b023eb1b79e06734407828/layouts/_default/baseof.html#L6-L28">layouts/_default/baseof.html</a> に突っ込んでいます。こういうので良いと思い始めた。真似したい人は layouts 以下をまるごとコピーして config.toml の中身</p>
<div class="src src-toml">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span><span style="color:#a6e22e">baseURL</span> = <span style="color:#e6db74">&#34;https://klknn.github.io/&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">languageCode</span> = <span style="color:#e6db74">&#34;ja&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">title</span> = <span style="color:#e6db74">&#34;klknn log&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#a6e22e">params</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">author</span> = <span style="color:#e6db74">&#34;klknn&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">editURL</span> = <span style="color:#e6db74">&#34;https://github.com/klknn/klknn.github.io/edit/develop/content&#34;</span></span></span></code></pre></div>
</div>
<p>を適宜かきかえると良いです。ちなみに書いてある author をテンプレート html 内でアクセスしたいときは
<code>{{ .Site.Params.Author }}</code>
で取得できます(org, mdではできない?)。ハードコードしたくない値は全部 config.toml にぶち込む運用です。</p>
<p>
ちなみに手元のPC (192.168.0.13) で編集中のサイトを、同じネットワーク上のスマホから見るには以下のようにhugo起動して、スマホから <a href="http://192.168.0.13:1313">http://192.168.0.13:1313</a> を表示します</p>
<div class="src src-bash">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo serve -D --bind 192.168.0.13 --baseURL<span style="color:#f92672">=</span>http://192.168.0.13</span></span></code></pre></div>
</div>
<p>とくにcssもないし、とくにレスポンシブでもないので醜いですが。とりあえずGoogleのブログ <sup class="footnote-reference"><a id="footnote-reference-3" href="#footnote-3">3</a></sup> にあった</p>
<div class="src src-html">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;viewport&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;width=device-width, initial-scale=1&#34;</span>&gt;</span></span></code></pre></div>
</div>
<p>は入れておいたので多少マシかと思いますが、深追いしないでおこうと思います。</p>
<p>
今後、とりあえずgithubにホストしているので何かコード書くときとかについでにチラシの裏的なことを書こうかと。</p>
<div class="footnotes">
<hr class="footnotes-separatator">
<div class="footnote-definitions">
<div class="footnote-definition">
<sup id="footnote-1"><a href="#footnote-reference-1">1</a></sup>
<div class="footnote-body">
<p><a href="https://gohugo.io/">https://gohugo.io/</a></p>
</div>
</div>
<div class="footnote-definition">
<sup id="footnote-2"><a href="#footnote-reference-2">2</a></sup>
<div class="footnote-body">
<p>Hugoで1からテーマを作ってGitHub Pagesにデプロイする <a href="https://www.membersedge.co.jp/blog/create-hugo-theme-and-deploy-to-github-pages/">https://www.membersedge.co.jp/blog/create-hugo-theme-and-deploy-to-github-pages/</a></p>
</div>
</div>
<div class="footnote-definition">
<sup id="footnote-3"><a href="#footnote-reference-3">3</a></sup>
<div class="footnote-body">
<p><a href="https://developers.google.com/web/fundamentals/design-and-ux/responsive?hl=ja">https://developers.google.com/web/fundamentals/design-and-ux/responsive?hl=ja</a></p>
</div>
</div>
</div>
</div>
]]></content></entry><entry><title>Markdown examples</title><link href="https://klknn.github.io/posts/hello/"/><id>https://klknn.github.io/posts/hello/</id><published>2020-07-07T14:24:12+0900</published><updated>2020-07-07T14:24:12+0900</updated><summary type="html">footnote hello1
caption for image.
code block def f(x): return x * x math \begin{align} \label{eq:sample} f(x) = x^2 \end{align}
table aaaaaaaa bb c 1 2 3 4 5 6 Eq. \eqref{eq:sample} $x^2$
list aaa bb aaaaaaaa bbbb this is footnote&amp;#160;&amp;#x21a9;&amp;#xfe0e;...</summary><content type="html"><![CDATA[<h2 id="footnote">footnote</h2>
<p>hello<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p><img src="/emacs-company-dcd.png" alt="emacs-company-dcd.png"></p>
<figure><img src="/emacs-company-dcd.png"
    alt="caption for image."><figcaption>
      <p>caption for image.</p>
    </figcaption>
</figure>

<h2 id="code-block">code block</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">f</span>(x):
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> x <span style="color:#f92672">*</span> x
</span></span></code></pre></div><h2 id="math">math</h2>
<p>\begin{align}
\label{eq:sample}
f(x) = x^2
\end{align}</p>
<h2 id="table">table</h2>
<table>
<thead>
<tr>
<th style="text-align:left">aaaaaaaa</th>
<th style="text-align:right">bb</th>
<th style="text-align:right">c</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:right">2</td>
<td style="text-align:right">3</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:right">5</td>
<td style="text-align:right">6</td>
</tr>
</tbody>
</table>
<p>Eq. \eqref{eq:sample} $x^2$</p>
<h2 id="list">list</h2>
<ol>
<li>aaa</li>
<li>bb</li>
</ol>
<ul>
<li>aaaaaaaa</li>
<li>bbbb</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>this is footnote&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content></entry><entry><title>Org-mode examples</title><link href="https://klknn.github.io/posts/hello-org/"/><id>https://klknn.github.io/posts/hello-org/</id><published>2020-07-06T20:51:03+0900</published><updated>2020-07-06T20:51:03+0900</updated><summary type="html">org-mode usage in hugo....</summary><content type="html"><![CDATA[
<p>
this page shows how to use org-mode in hugo.
see <a href="/posts/hello">/posts/hello</a> for markdown usage.</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
gist
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>
<script src="https://gist.github.com/spf13/7896402.js"></script>
</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
footnote
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>
hello <sup class="footnote-reference"><a id="footnote-reference-1" href="#footnote-1">1</a></sup> <sup class="footnote-reference"><a id="footnote-reference-2" href="#footnote-2">2</a></sup></p>
<p>
test <sup class="footnote-reference"><a id="footnote-reference-2" href="#footnote-2">2</a></sup></p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-2">
<h2 id="headline-3">
image
</h2>
<div id="outline-text-headline-3" class="outline-text-2">
<p>
  image</p>
<figure>
<img src="/emacs-company-dcd.png" alt="/emacs-company-dcd.png" title="/emacs-company-dcd.png" /><figcaption>
Caption for image 1.
</figcaption>
</figure>
</div>
</div>
<div id="outline-container-headline-4" class="outline-2">
<h2 id="headline-4">
code block
</h2>
<div id="outline-text-headline-4" class="outline-text-2">
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">f</span>(x):
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> x <span style="color:#f92672">*</span> x</span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-5" class="outline-2">
<h2 id="headline-5">
math
</h2>
<div id="outline-text-headline-5" class="outline-text-2">
\begin{align}
\label{eq:sample}
f(x) = x^2
\end{align}
</div>
</div>
<div id="outline-container-headline-6" class="outline-2">
<h2 id="headline-6">
table
</h2>
<div id="outline-text-headline-6" class="outline-text-2">
<figure>
<table>
<thead>
<tr>
<th class="align-right">aaaaaaaa</th>
<th class="align-right">bb</th>
<th class="align-right">c</th>
</tr>
</thead>
<tbody>
<tr>
<td class="align-right">1</td>
<td class="align-right">2</td>
<td class="align-right">3</td>
</tr>
<tr>
<td class="align-right">4</td>
<td class="align-right">5</td>
<td class="align-right">6</td>
</tr>
</tbody>
</table>
<figcaption>
caption for table 1.
</figcaption>
</figure>
<p>
Eq. \eqref{eq:sample} $x^2$</p>
<p>
a</p>
<p>
a</p>
<p>
a</p>
<p>
a</p>
<p>
a</p>
<p>
a</p>
<p>
a</p>
<p>
a</p>
<p>
a</p>
<p>
a</p>
<p>
Table <a href="tab:1">tab:1</a>.</p>
</div>
</div>
<div class="footnotes">
<hr class="footnotes-separatator">
<div class="footnote-definitions">
<div class="footnote-definition">
<sup id="footnote-1"><a href="#footnote-reference-1">1</a></sup>
<div class="footnote-body">
<p>foo</p>
</div>
</div>
<div class="footnote-definition">
<sup id="footnote-2"><a href="#footnote-reference-2">2</a></sup>
<div class="footnote-body">
<p>this is the inline footnote <a href="https://orgmode.org/manual/Creating-Footnotes.html">https://orgmode.org/manual/Creating-Footnotes.html</a></p>
</div>
</div>
</div>
</div>
]]></content></entry><entry><title>about</title><link href="https://klknn.github.io/about/"/><id>https://klknn.github.io/about/</id><published>0001-01-01T00:00:00+0000</published><updated>0001-01-01T00:00:00+0000</updated><summary type="html"> Name: klknn GitHub https://github.com/klknn Twitter https://twitter.com/klknn_ ...</summary><content type="html"><![CDATA[<ul>
<li>Name: klknn</li>
<li>GitHub <a href="https://github.com/klknn">https://github.com/klknn</a></li>
<li>Twitter <a href="https://twitter.com/klknn_">https://twitter.com/klknn_</a></li>
</ul>
]]></content></entry><entry><title>works</title><link href="https://klknn.github.io/works/"/><id>https://klknn.github.io/works/</id><published>0001-01-01T00:00:00+0000</published><updated>0001-01-01T00:00:00+0000</updated><summary type="html">streaming spotify youtube music amazon music apple music line music songs 2022 &amp;ldquo;karita&amp;rdquo; as a composer/lyricist/arranger of &amp;ldquo;flare&amp;rdquo;, &amp;ldquo;overflow&amp;rdquo; and &amp;ldquo;Sillenite&amp;rdquo;, and as an arranger of &amp;ldquo;nullus (NullPointerExceptionMix)&amp;rdquo; and &amp;ldquo;overflow (ArithmeticExceptionMix)&amp;rdquo; in Secret Messenger, &amp;ldquo;RE:CREATE&amp;rdquo;, info, booth. 2021 &amp;ldquo;karita&amp;rdquo; as a composer/lyricist/arranger of &amp;ldquo;Verklärte&amp;rdquo;, &amp;ldquo;DAMMERUNG &amp;quot; and &amp;ldquo;Sillenite&amp;rdquo; in Secret Messenger, &amp;ldquo;Sillenite&amp;rdquo;, info, booth. &amp;ldquo;karita&amp;rdquo; as a composer/lyricist/arranger of &amp;ldquo;Vanitas&amp;rdquo; in 蓮華宝℃ &amp;ldquo;Insanity Hero&amp;rdquo;, info, booth 2020 &amp;ldquo;karita&amp;rdquo; as a composer/lyricist/arranger of &amp;ldquo;Amethyst&amp;rdquo; and &amp;ldquo;Cyanos&amp;rdquo; in Secret Messenger, &amp;ldquo;ANEMONE&amp;rdquo;, info, booth. 2019 &amp;ldquo;karita&amp;rdquo; as a composer/lyricist/arranger of &amp;ldquo;Alpha&amp;rdquo; and &amp;ldquo;Omega&amp;rdquo; in Secret Messenger, &amp;ldquo;Alter Ego&amp;rdquo;, info. 2015 &amp;ldquo;karita&amp;rdquo; as a composer/lyricist/arranger of &amp;ldquo;Phosphor&amp;rdquo;, &amp;ldquo;X-Entropy&amp;rdquo; and &amp;ldquo;醒めない夢&amp;rdquo; in Secret Messenger, &amp;ldquo;Lost Prism&amp;rdquo;, info. 2014 &amp;ldquo;karita&amp;rdquo; as a composer/lyricist/arranger of &amp;ldquo;kakophony&amp;rdquo; (w/o vocal), &amp;ldquo;overflow&amp;rdquo; and &amp;ldquo;sigmoid&amp;rdquo;, and as a co-arranger of &amp;ldquo;disharmony&amp;rdquo; in Secret Messenger, &amp;ldquo;Disharmony,&amp;rdquo; info, booth. &amp;ldquo;karita&amp;rdquo; as a composer/lyricist/arranger of &amp;ldquo;IX&amp;rdquo;, &amp;ldquo;Photon&amp;rdquo;, and &amp;ldquo;OracleMachine&amp;rdquo;, and as a co-arranger of &amp;ldquo;ダブル&amp;rdquo; in Secret Messenger, &amp;ldquo;Last Lovers,&amp;rdquo; info, booth. 2013 &amp;ldquo;karita&amp;rdquo; as an arranger of &amp;ldquo;BT ft. Matt Hales - Surrounded 1729mix&amp;rdquo; nominated in the official remix contest runnerups &amp;ldquo;swift&amp;rdquo; as a composer/arranger of Luna*, &amp;ldquo;esteem,&amp;rdquo; (free download) 2012 &amp;ldquo;five tup;et&amp;rdquo;, MV. 10k+ played bootleg &amp;ldquo;ジョジョ OP 〜その血の運命〜 8bit Remix&amp;rdquo; &amp;ldquo;swift&amp;rdquo; as a composer/lyricist/arranger of &amp;ldquo;水中花&amp;rdquo;, and...</summary><content type="html"><![CDATA[<h2 id="streaming">streaming</h2>
<ul>
<li><a href="https://open.spotify.com/artist/1XqKimFNHNGJNdEgCFTtJI">spotify</a></li>
<li><a href="https://music.youtube.com/channel/UCIPmVvRd2RWlpV-ZNHH-mnQ">youtube music</a></li>
<li><a href="https://music.amazon.co.jp/artists/B0C278FVF5/klknn">amazon music</a></li>
<li><a href="https://music.apple.com/jp/artist/klknn/1682443055">apple music</a></li>
<li><a href="https://music.line.me/webapp/artist/mi000000001d75369c">line music</a></li>
</ul>
<h2 id="songs">songs</h2>
<p>2022</p>
<ul>
<li>&ldquo;karita&rdquo; as a composer/lyricist/arranger of &ldquo;flare&rdquo;, <a href="https://soundcloud.com/yuy_h/2014m3-disharmony-overflow">&ldquo;overflow&rdquo;</a> and <a href="https://soundcloud.com/yuy_h/sillenite-sdemo">&ldquo;Sillenite&rdquo;</a>, and as an arranger of &ldquo;nullus (NullPointerExceptionMix)&rdquo; and &ldquo;overflow (ArithmeticExceptionMix)&rdquo; in Secret Messenger, &ldquo;RE:CREATE&rdquo;, <a href="https://scmn0020.tumblr.com/">info</a>, <a href="https://secretmessenger.booth.pm/items/3795497">booth</a>.</li>
</ul>
<p>2021</p>
<ul>
<li>&ldquo;karita&rdquo; as a composer/lyricist/arranger of &ldquo;Verklärte&rdquo;, &ldquo;DAMMERUNG &quot; and <a href="https://soundcloud.com/yuy_h/sillenite-sdemo">&ldquo;Sillenite&rdquo;</a> in Secret Messenger, &ldquo;Sillenite&rdquo;, <a href="https://scmn0019.tumblr.com/">info</a>, <a href="https://secretmessenger.booth.pm/items/2902797">booth</a>.</li>
<li>&ldquo;karita&rdquo; as a composer/lyricist/arranger of &ldquo;Vanitas&rdquo; in 蓮華宝℃  &ldquo;Insanity Hero&rdquo;, <a href="https://rengehoudo-insanityhero.tumblr.com/">info</a>, <a href="https://booth.pm/ja/items/2864825">booth</a></li>
</ul>
<p>2020</p>
<ul>
<li>&ldquo;karita&rdquo; as a composer/lyricist/arranger of <a href="https://www.youtube.com/watch?v=w8JmHMieJWU">&ldquo;Amethyst&rdquo;</a> and &ldquo;Cyanos&rdquo; in Secret Messenger, &ldquo;ANEMONE&rdquo;, <a href="https://scmn0018.tumblr.com/">info</a>, <a href="https://secretmessenger.booth.pm/items/1670209">booth</a>.</li>
</ul>
<p>2019</p>
<ul>
<li>&ldquo;karita&rdquo; as a composer/lyricist/arranger of &ldquo;Alpha&rdquo; and &ldquo;Omega&rdquo; in Secret Messenger, &ldquo;Alter Ego&rdquo;, <a href="https://scmn17.tumblr.com/">info</a>.</li>
</ul>
<p>2015</p>
<ul>
<li>&ldquo;karita&rdquo; as a composer/lyricist/arranger of &ldquo;Phosphor&rdquo;, &ldquo;X-Entropy&rdquo; and &ldquo;醒めない夢&rdquo; in Secret Messenger, &ldquo;Lost Prism&rdquo;, <a href="http://yuyhp.dousetsu.com/ls/">info</a>.</li>
</ul>
<p>2014</p>
<ul>
<li>&ldquo;karita&rdquo; as a composer/lyricist/arranger of <a href="https://soundcloud.com/yuy_h/2014m3-disharmonykakophony">&ldquo;kakophony&rdquo;</a> (<a href="https://soundcloud.com/eikaku/kakophony-no-vocal">w/o vocal</a>), <a href="https://soundcloud.com/yuy_h/2014m3-disharmony-overflow">&ldquo;overflow&rdquo;</a> and &ldquo;sigmoid&rdquo;, and as a co-arranger of <a href="https://soundcloud.com/yuy_h/2014m3-disharmonydisharmony">&ldquo;disharmony&rdquo;</a> in Secret Messenger, &ldquo;Disharmony,&rdquo; <a href="http://yuyhp.dousetsu.com/dis/">info</a>, <a href="https://secretmessenger.booth.pm/items/1884391">booth</a>.</li>
<li>&ldquo;karita&rdquo; as a composer/lyricist/arranger of <a href="https://soundcloud.com/yuy_h/2014-m3-2-ix">&ldquo;IX&rdquo;</a>, &ldquo;Photon&rdquo;, and &ldquo;OracleMachine&rdquo;, and as a co-arranger of <a href="https://www.nicovideo.jp/watch/sm23408870">&ldquo;ダブル&rdquo;</a> in Secret Messenger, &ldquo;Last Lovers,&rdquo; <a href="http://yuyhp.dousetsu.com/ll/">info</a>, <a href="https://secretmessenger.booth.pm/items/169454">booth</a>.</li>
</ul>
<p>2013</p>
<ul>
<li>&ldquo;karita&rdquo; as an arranger of <a href="https://soundcloud.com/kr1nu/b?in=bt/sets/remix-competition-runnerups">&ldquo;BT ft. Matt Hales - Surrounded 1729mix&rdquo; nominated in the official remix contest runnerups</a></li>
<li>&ldquo;swift&rdquo; as a composer/arranger of <a href="https://soundcloud.com/kr1nu/esteem">Luna*, &ldquo;esteem,&rdquo; (free download)</a></li>
</ul>
<p>2012</p>
<ul>
<li><a href="https://soundcloud.com/kr1nu/five-tup-et-demo-track">&ldquo;five tup;et&rdquo;</a>, <a href="https://www.youtube.com/watch?v=SYpedZTUTTI">MV</a>.</li>
<li>10k+ played bootleg <a href="https://soundcloud.com/kr1nu/op-8bit-remix">&ldquo;ジョジョ OP 〜その血の運命〜 8bit Remix&rdquo;</a></li>
<li>&ldquo;swift&rdquo; as a composer/lyricist/arranger of &ldquo;水中花&rdquo;, and as an arranger of &ldquo;セピアの坂&rdquo; in 152Hz, &ldquo;eight note,&rdquo; <a href="https://booth.pm/ja/items/59638">booth</a></li>
</ul>
<p>2011</p>
<ul>
<li>First free album <a href="https://amnoidea.bandcamp.com/album/xiral">&ldquo;Xiral&rdquo;</a></li>
</ul>
<h2 id="free-plugins-vst-vst3-au-etc">free plugins (VST, VST3, AU, etc)</h2>
<ul>
<li><a href="https://github.com/klknn/synth2/releases">synth2</a>: virtual analog synthesizer used in my recent music works e.g. bass in &ldquo;Sillenite&rdquo;, lead synth in &ldquo;Verklärte&rdquo;.</li>
<li><a href="https://github.com/klknn/epiano2">epiano2</a>: mda epiano clone in DPlug so that works in any env.</li>
</ul>
]]></content></entry></feed>