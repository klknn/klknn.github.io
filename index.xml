<?xml version="1.0" encoding="utf-8" standalone="yes"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja"><title>klknn log</title><link>https://klknn.github.io/</link><updated>2022-08-24T23:32:31+0900</updated><author><name>klknn</name></author><generator uri="https://gohugo.io" version="0.90.1">Hugo</generator><id>https://klknn.github.io/</id><entry><title>はてなブログ的なfeedをHugoで生成</title><link href="https://klknn.github.io/posts/hugo_feed/"/><id>https://klknn.github.io/posts/hugo_feed/</id><published>2022-08-24T23:32:31+0900</published><updated>2022-08-24T23:32:31+0900</updated><summary type="html">&amp;lt;p&amp;gt;RSSリーダーのFeedlyを使っていて、はてなブログとかは全文リーダー内に表示されるのに、うちだけ表示されないな？と疑問に思っていました。
今回ははてなブログのフィードとHugoのデフォルトのフィードを比べた上でよりRSSリーダーフレンドリーなフィードを構築していきます。&amp;lt;/p&amp;gt;...</summary><content type="html">&amp;lt;p&amp;gt;RSSリーダーのFeedlyを使っていて、はてなブログとかは全文リーダー内に表示されるのに、うちだけ表示されないな？と疑問に思っていました。
今回ははてなブログのフィードとHugoのデフォルトのフィードを比べた上でよりRSSリーダーフレンドリーなフィードを構築していきます。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;はてなのfeed&amp;#34;&amp;gt;はてなのfeed&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;まずFeedlyで適当に普段読んでるhatenaブログをみてみると、取得してるURLが設定画面で把握できます。大抵は以下のようなXMLがでてきます:&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre tabindex=&amp;#34;0&amp;#34; style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-xml&amp;#34; data-lang=&amp;#34;xml&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;feed&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;xmlns=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;http://www.w3.org/2005/Atom&amp;amp;#34;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;xml:lang=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;ja&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;title&amp;amp;gt;&amp;lt;/span&amp;gt;・ｘ・ぼくののうみそ&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/title&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;link&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;href=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;https://bokunonoumiso.hatenablog.com/&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;updated&amp;amp;gt;&amp;lt;/span&amp;gt;2022-08-09T12:41:41+09:00&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/updated&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;author&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;name&amp;amp;gt;&amp;lt;/span&amp;gt;bokunonoumiso&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/name&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/author&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;generator&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;uri=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;https://blog.hatena.ne.jp/&amp;amp;#34;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;version=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;149d375eb29bfc5c8439e961a2b85a&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;Hatena::Blog&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/generator&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;id&amp;amp;gt;&amp;lt;/span&amp;gt;hatenablog://blog/6653812171403772804&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/id&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;entry&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;title&amp;amp;gt;&amp;lt;/span&amp;gt;高い車に乗って安い車を煽る&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/title&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;link&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;href=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;https://bokunonoumiso.hatenablog.com/entry/2022/08/09/124141&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;id&amp;amp;gt;&amp;lt;/span&amp;gt;hatenablog://entry/4207112889907092076&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/id&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;published&amp;amp;gt;&amp;lt;/span&amp;gt;2022-08-09T12:41:41+09:00&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/published&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;updated&amp;amp;gt;&amp;lt;/span&amp;gt;2022-08-09T12:41:41+09:00&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/updated&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;summary&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;type=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;html&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;高い車が安い車を煽る…&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/summary&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;content&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;type=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;html&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;&amp;amp;amp;lt;p&amp;amp;amp;gt;高い車が安い車を煽る&amp;amp;amp;lt;/p&amp;amp;amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/content&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/entry&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/feed&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;注意点としては&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;RSS 1.0/2.0ではなく&amp;lt;a href=&amp;#34;http://www.w3.org/2005/Atom&amp;#34;&amp;gt;ATOM規格&amp;lt;/a&amp;gt;っぽい&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;contentの中身はhtmlなので、escape されてる&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;hugoのfeed&amp;#34;&amp;gt;Hugoのfeed&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/gohugoio/hugo/blob/988e1417a057b937a766385f79f46a52e933baee/tpl/tplimpl/embedded/templates/_default/rss.xml&amp;#34;&amp;gt;Hugo標準付属のrss.xml&amp;lt;/a&amp;gt;はRSS 2.0なのかAtomなのかよくわからない感じですね。
hatenaブログのフィードっぽくしたテンプレートはこんな感じです。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre tabindex=&amp;#34;0&amp;#34; style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-xml&amp;#34; data-lang=&amp;#34;xml&amp;#34;&amp;gt;{{- $pctx := . -}}
{{- if .IsHome -}}{{ $pctx = .Site }}{{- end -}}
{{- $pages := slice -}}
{{- if or $.IsHome $.IsSection -}}
{{- $pages = $pctx.RegularPages -}}
{{- else -}}
{{- $pages = $pctx.Pages -}}
{{- end -}}
{{- $limit := .Site.Config.Services.RSS.Limit -}}
{{- if ge $limit 1 -}}
{{- $pages = $pages | first $limit -}}
{{- end -}}
{{- printf &amp;amp;#34;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;amp;lt;?xml version=\&amp;amp;#34;1.0\&amp;amp;#34; encoding=\&amp;amp;#34;utf-8\&amp;amp;#34; standalone=\&amp;amp;#34;yes\&amp;amp;#34;?&amp;amp;gt;&amp;lt;/span&amp;gt;&amp;amp;#34; | safeHTML }}
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;feed&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;xmlns=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;http://www.w3.org/2005/Atom&amp;amp;#34;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;xml:lang=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;ja&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;title&amp;amp;gt;&amp;lt;/span&amp;gt;{{ if eq .Title .Site.Title }}{{ .Site.Title }}{{ else }}{{ with .Title }}{{.}} on {{ end }}{{ .Site.Title }}{{ end }}&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/title&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;link&amp;amp;gt;&amp;lt;/span&amp;gt;{{ .Permalink }}&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/link&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;updated&amp;amp;gt;&amp;lt;/span&amp;gt;{{ time.Format &amp;amp;#34;2006-01-02T15:04:05-0700&amp;amp;#34; .Site.LastChange | safeHTML }}&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/updated&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;author&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;name&amp;amp;gt;&amp;lt;/span&amp;gt;{{ $.Site.Params.author }}&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/name&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/author&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;generator&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;uri=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;https://gohugo.io&amp;amp;#34;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;version=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;{{ hugo.Version }}&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;Hugo&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/generator&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;id&amp;amp;gt;&amp;lt;/span&amp;gt;{{ .Permalink }}&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/id&amp;amp;gt;&amp;lt;/span&amp;gt;
{{ range $pages }}
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;entry&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;title&amp;amp;gt;&amp;lt;/span&amp;gt;{{ .Title }}&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/title&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;link&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;href=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;{{ .Permalink }}&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;id&amp;amp;gt;&amp;lt;/span&amp;gt;{{ .Permalink }}&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/id&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;published&amp;amp;gt;&amp;lt;/span&amp;gt;{{ .PublishDate.Format &amp;amp;#34;2006-01-02T15:04:05-0700&amp;amp;#34; | safeHTML }}&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/published&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;updated&amp;amp;gt;&amp;lt;/span&amp;gt;{{ .Lastmod.Format &amp;amp;#34;2006-01-02T15:04:05-0700&amp;amp;#34; | safeHTML }}&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/updated&amp;amp;gt;&amp;lt;/span&amp;gt;
{{ with .Site.Author.email }}&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;author&amp;amp;gt;&amp;lt;/span&amp;gt;{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/author&amp;amp;gt;&amp;lt;/span&amp;gt;{{end}}
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;summary&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;type=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;html&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;{{ .Summary | htmlEscape }}...&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/summary&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;content&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;type=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;html&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;{{ .Content | htmlEscape }}&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/content&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/entry&amp;amp;gt;&amp;lt;/span&amp;gt;
{{ end }}
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;lt;/feed&amp;amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;詳細は以下のcommitを見てください。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/klknn/klknn.github.io/commit/afb831f515d54b451e70fbc5e5ae95e669d79c75&amp;#34;&amp;gt;https://github.com/klknn/klknn.github.io/commit/afb831f515d54b451e70fbc5e5ae95e669d79c75&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;まとめ&amp;#34;&amp;gt;まとめ&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;RSSリーダーって10年前まではみんな使ってたのにGoogle readerが終わって一気に死んだよね&amp;amp;hellip;インターネット老人ネタでした。&amp;lt;/p&amp;gt;</content></entry><entry><title>モニタースピーカー買い替えで悩む</title><link href="https://klknn.github.io/posts/speaker_trial/"/><id>https://klknn.github.io/posts/speaker_trial/</id><published>2022-08-20T15:14:12+0900</published><updated>2022-08-20T15:14:12+0900</updated><summary type="html">子供が生まれました（近況報告）。なかなか時間取れないですが、相変わらず音楽とかプログラミングをやっていきたいです。 先日、母子の一ヶ月検診があったので久々に暇になり、渋谷のパワーレックさんでスピーカーを色々試させてもらいました。いつもイケベさんでは気後れせず試奏とかできるし、今年はJP6など高い買い物しててポイントもあるし買うならイケベだとふらっと思っていきました。パワーレックさんは初めてだったのですが品揃えも凄い上に、3セット同時にIFに繋いで聴き比べたり、Youtubeから音楽流せたり、手ぶらで無計画に行っても全然OKな感じで最高でした。 現在使ってる機材 スピーカー: M-audio BX5D2, Yamaha NS10M + Fostex の小型アンプ IF:...</summary><content type="html">&amp;lt;p&amp;gt;子供が生まれました（近況報告）。なかなか時間取れないですが、相変わらず音楽とかプログラミングをやっていきたいです。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;先日、母子の一ヶ月検診があったので久々に暇になり、渋谷のパワーレックさんでスピーカーを色々試させてもらいました。いつもイケベさんでは気後れせず試奏とかできるし、今年はJP6など高い買い物しててポイントもあるし買うならイケベだとふらっと思っていきました。パワーレックさんは初めてだったのですが品揃えも凄い上に、3セット同時にIFに繋いで聴き比べたり、Youtubeから音楽流せたり、手ぶらで無計画に行っても全然OKな感じで最高でした。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;現在使ってる機材&amp;#34;&amp;gt;現在使ってる機材&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;スピーカー: M-audio BX5D2, Yamaha NS10M + Fostex の小型アンプ&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;IF: Forcusrite 18i20&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;ヘッドフォン: Ultrasone Edition 8, Senheiser HD650&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;スピーカーの音は気に入ってるんですが、ヘッドフォンの解像度にスピーカーが追いついていないし、NS10Mの中高域とBX5の低域を併せ持つスピーカーがいれば最高だよなぁ&amp;amp;hellip;といろいろ探しています。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;リファレンス曲&amp;#34;&amp;gt;リファレンス曲&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;ところで皆さんこういうときに何聴きますか？私はこんな感じです&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;自分で一番うまくミックスできた曲 &amp;lt;a href=&amp;#34;https://soundcloud.com/yuy_h/2014-m3-2-ix&amp;#34;&amp;gt;https://soundcloud.com/yuy_h/2014-m3-2-ix&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;世界で一番うまいミックスの曲 Donald Fagen I.G.Y. &amp;lt;a href=&amp;#34;https://www.youtube.com/watch?v=Ueivjr3f8xg&amp;#34;&amp;gt;https://www.youtube.com/watch?v=Ueivjr3f8xg&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;音の速さ確認用 砂原良徳 subliminal &amp;lt;a href=&amp;#34;https://www.youtube.com/watch?v=KspZvWby1Jc&amp;#34;&amp;gt;https://www.youtube.com/watch?v=KspZvWby1Jc&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;ギター確認用 Periphery insomnia のイントロ &amp;lt;a href=&amp;#34;https://www.youtube.com/watch?v=yNRrXB1LPgc&amp;#34;&amp;gt;https://www.youtube.com/watch?v=yNRrXB1LPgc&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;オーケストラ確認用 Bourez 指揮 春の祭典 Spring rounds &amp;lt;a href=&amp;#34;https://www.youtube.com/watch?v=ZSyPQMUYFgc&amp;amp;amp;t=2s&amp;#34;&amp;gt;https://www.youtube.com/watch?v=ZSyPQMUYFgc&amp;amp;amp;t=2s&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;感想&amp;#34;&amp;gt;感想&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;当初はiloud MTMが気になってて、それだけ新たに設置してもらったのですが、すでにおいてあったAdam A4VとA7V(とデスク上のiloud MM)も超気になっていたのでラッキーでした（さすがに6台も重たいスピーカー運んでもらうのは気が引けた）。即決できる予算ではなかったので購入には至らなかったもののAdam A7Vが一番良かったです。以下、個々の感想です。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;iloud-mtm&amp;#34;&amp;gt;iloud MTM&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;マルチネとかで有名なアーティストがよく使ってる気がします（kabanaguさんとか、パソコン音楽クラブの柴田さんとか）、これをすぐ買うつもりで行きました。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;全体的なバランスは結構良く、サイズ的にかなり欲しかった、リバーブの距離感はつかみやすいけど、若干ディストーションギターとかスネア鳴らしたときに中域の情報量（解像度？）とか押し出し感が不明瞭かなと思いました。Adamだとどんな曲でも結構よく聞こえてしまうけど、iloud MMとか内蔵スピーカーでちゃんと鳴らないミックスとかがMTMではショボく聞こえるので、ラジカセ的なチェックからニアフィールド用までこなせるミックスの粗捜しという目的には凄そうです。好みとしてはもう少し音色のツヤ感とかチェックできればなと、わりとパサパサしたドライ目な音です。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;あと今月はIKがハードウェア買うと同じ額のソフトウェア6個くれるキャンペーンやってるので実質半額ですね、すごい。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;adam-a4v&amp;#34;&amp;gt;Adam A4V&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;同じ価格帯だけど、MTMの音色の弱点がなくて買うならこっちかなと思いました。オールジャンル結構楽しく聞けそうです。中高域は最高で、テンモニみたくボーカルとかの細かいところも聞こえる感じがします。もしA7Vがおいてなかったらこれを買って帰っていましたね。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;adam-a7v&amp;#34;&amp;gt;Adam A7V&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;一つ前のA7Xは日本人に結構人気みたいで、私の大好きなbermei.inazawaさんもこれ使ってたり、某マスタリング・エンジニアが絶賛してたりしたので気になってました。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;音はA4Vの上位互換という感じで、小さい音で鳴らしてもA4Vより解像度もバランス良かったです（7インチならそうか）。A4Vでも問題ないけど、もっと上がいるんだなぁと。聞かなればよかった。A4Vの二倍もする価格差ほどの説得力があるかはこのとき納得できなかった&amp;amp;hellip;たぶん&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;まとめ&amp;#34;&amp;gt;まとめ&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;これはA7V買う流れだな&amp;amp;hellip;&amp;lt;/p&amp;gt;</content></entry><entry><title>DTM最強ノートPCとしてASUS ROG Zephyrus M16を購入</title><link href="https://klknn.github.io/posts/m16_first_impression/"/><id>https://klknn.github.io/posts/m16_first_impression/</id><published>2022-05-04T10:24:12+0900</published><updated>2022-05-04T10:24:12+0900</updated><summary type="html">M3お疲れ様でした。制作に一段落ついたので、新しくDTM用のノートPC ASUS ROG ZEPHYRUS M16 を買いました。 昨日届いて一通り環境構築を終えたので、購入した理由と第一印象を書きます。 スペック 価格 349,800円 （税込） 型番 GU603ZW-I9R3070TIE カラー オフブラック OS Windows 11 Home CPU インテル® Core™ i9-12900H プロセッサー メモリ 32GB DDR5-4800 ディスプレイ：16型ワイドTFTカラー液晶 ノングレア 2,560×1,600ドット (WQXGA) (165Hz) GPU NVIDIA® GeForce RTX™ 3070 Ti Laptop SSD 2TB (PCI Express 4.0 x4接続) 空き1スロットあり サイズ 幅355mm×奥行き243.5mm×高さ19.9～22.3mm 質量 約2.05kg 買った理由 1. 最強のCPUを搭載している INTEL i9 12900H を搭載してます。下記のCINEBENC...</summary><content type="html">&amp;lt;p&amp;gt;M3お疲れ様でした。制作に一段落ついたので、新しくDTM用のノートPC &amp;lt;a href=&amp;#34;https://jp.store.asus.com/store/asusjp/ja_JP/pd/productID.5603530000&amp;#34;&amp;gt;ASUS ROG ZEPHYRUS M16&amp;lt;/a&amp;gt; を買いました。
昨日届いて一通り環境構築を終えたので、購入した理由と第一印象を書きます。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;スペック&amp;#34;&amp;gt;スペック&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;価格 349,800円 （税込）&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;型番 GU603ZW-I9R3070TIE&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;カラー オフブラック&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;OS Windows 11 Home&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;CPU インテル® Core™ i9-12900H プロセッサー&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;メモリ 32GB DDR5-4800&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;ディスプレイ：16型ワイドTFTカラー液晶　ノングレア　2,560×1,600ドット (WQXGA) (165Hz)&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;GPU NVIDIA® GeForce RTX™ 3070 Ti Laptop&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;SSD 2TB (PCI Express 4.0 x4接続) 空き1スロットあり&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;サイズ 幅355mm×奥行き243.5mm×高さ19.9～22.3mm&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;質量 約2.05kg&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;買った理由&amp;#34;&amp;gt;買った理由&amp;lt;/h2&amp;gt;
&amp;lt;h3 id=&amp;#34;1-最強のcpuを搭載している&amp;#34;&amp;gt;1. 最強のCPUを搭載している&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;INTEL i9 12900H を搭載してます。下記のCINEBENCHによるノートPCの比較では現時点でマルチコア・シングルコアともに最強です。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://thehikaku.net/pc/asus/21ROG-Zephyrus-M16.html#paformance&amp;#34;&amp;gt;https://thehikaku.net/pc/asus/21ROG-Zephyrus-M16.html#paformance&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Ryzen 6800H搭載のZephyrus G15との差額を考えるとウーッとなりますが、最強という満足感を買いました。ついでにGPUもNVidia RTX3070Tiなので最強というほどではないですが、十分素晴らしいものです（最強が欲しければASUS Scar15がおすすめ）。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;2-dpc-latencyが短く安定している&amp;#34;&amp;gt;2. DPC latencyが短く安定している&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;ベンチマークやスペックに現れない、Macと比べたWindowsの最悪なところです。これをよく調べずに買うと超絶後悔することになります。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;WindowsノートPCはドライバの出来がマチマチで、カーネル(OS)が割り込んできてオーディオ処理が遅延した結果音がブチブチ途切れることがあります。これはメモリやCPUといったハードウェアとはほとんど無関係に、多くは出来の悪いドライバによっておこります（DDR5やi9を積もうが関係ないし将来のアップデートで破綻することもある）。現時点でWin11ゲーミングノートの中では、安定した性能を出しているのははASUSのM16とScar15だけです。メーカーでいうとこれまでRazerは概ねlatencyが低い印象がありましたが、Win11では苦戦しているようですね。&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;This is the second Windows 11 gaming laptop we&amp;amp;rsquo;ve tested this year that didn&amp;amp;rsquo;t fail the latencymon test. &amp;amp;ldquo;ASUS Zephyrus M16 (2022) Review - A Thin 16&amp;amp;rdquo; Gaming Laptop!&amp;amp;quot; &amp;lt;a href=&amp;#34;https://youtu.be/6Shhp6JOC8c?t=540&amp;#34;&amp;gt;https://youtu.be/6Shhp6JOC8c?t=540&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;I think this the first gaming laptop we&amp;amp;rsquo;ve tested this year that didn&amp;amp;rsquo;t fail the latencymon test with Windows 11. &amp;amp;ldquo;ASUS Scar 15 (2022) Review - Most Powerful 15” Gaming Laptop!&amp;amp;rdquo; &amp;lt;a href=&amp;#34;https://youtu.be/VSVfBObYFE4?t=480&amp;#34;&amp;gt;https://youtu.be/VSVfBObYFE4?t=480&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;実際に私自身が作ったFLプロジェクトで一番重たかった &amp;lt;a href=&amp;#34;https://soundcloud.com/yuy_h/2020_m3-anemone&amp;#34;&amp;gt;Cyanos&amp;lt;/a&amp;gt; という曲を再生しながら &amp;lt;a href=&amp;#34;https://www.resplendence.com/latencymon&amp;#34;&amp;gt;LatencyMon&amp;lt;/a&amp;gt; を&amp;amp;quot;サイレント&amp;amp;quot;モードで動かしてみましたが、全然余裕でした。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;#34;https://user-images.githubusercontent.com/57452864/166607867-6271acd7-8b99-4f75-b5b8-af60c1f036d7.png&amp;#34; alt=&amp;#34;latencymon screenshot&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;LatencyMonはとりあえず緑色のメッセージがでていれば余裕です。96kHzで再生するなら10μsec/sampleなのでオーディオIFのバッファ以上たとえば1000μsec(=100サンプル)くらい別プロセスにもってかれると音が途切れます。なおファームウェアは2022/3/9リリースのGU603ZW.306 (10.1.2.306)を利用しています。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;3-asusの管理アプリが優秀&amp;#34;&amp;gt;3. ASUSの管理アプリが優秀&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;先のスクリーンショットでもありましたが、ASUSのArmoury Crateというソフトでファン速度や電力などの設定ができます。これはDTMにおいては「録音してるからファンとめたい」「サーマルスロットリングしてるからファンまわしたい」という二大欲求を叶えるために不可欠な機能です。前者の願望を叶えるべくファンレスのM1 Macbook Airを使ってましたが結局熱くなって後者の欲求が生まれました。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;#34;https://user-images.githubusercontent.com/57452864/166610540-65ec30c1-6c48-4f86-8811-fc3dbeaaa8b4.png&amp;#34; alt=&amp;#34;armoury crate screenshot&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;手動でも設定できますが、普段はサイレントモードを使っています。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;MyASUSという別アプリも便利で、Lenovo Vantageみたいな感じで各種アップデートやバッテリーの長寿化のための上限を設定できます。経験的にも心理的にも上限設定しないとバッテリーの劣化が凄まじいので、これがないノートPCはもう使うことが出来ません(泣)&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;4-2560x1600-165hz液晶&amp;#34;&amp;gt;4. 2560x1600 165Hz液晶&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;縦長な2560x1600はDTMするときは作業画面が広くて最高に便利です、じつは以前使っていたApple MacBook Air M1も全く同じ解像度です。遅延も3msと非常に短く、最初はDTMで画面の反応なんかどうでもいいと思ってましたが、一旦外付けディスプレイに戻ってみると残像や反応の悪さにイライラしました（一度上げた生活水準は下げられないというヤツですね）。画面の色味はほとんど同じですが、M16のほうが明るくて16inchなので大きいです。ただしHiDPI対応はMacのOSやアプリのほうが概ね優秀です。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;5-ノートpcとしての完成度&amp;#34;&amp;gt;5. ノートPCとしての完成度&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;その他みたいな枠です。&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;タッチパッドがでかくて良い。マルチタッチ(1-4点)にも対応してるが、感度はMacほどではない。殆どのゲーミングノートは筐体のデカさの割にタッチパッドが小さいです。&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;キーボードがでかくて良い（円マーク以外）、矢印キーやDEL、Ctrlなどの配列がまとも。LenovoとASUS以外のゲーミングノートはここが終わっています。&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;USB-C PD対応。45Wの小型GaNアダプタでも充電できました。純正のACアダプタは700gもありこのPCしか充電できないので持ち歩きたくはないです。&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Thunderbolt4対応。帯域的にはUSBで良いと思うのですが、最近のオーディオIFにも普及してきたので一応あると安心。Ryzenモデルには基本的にないです。&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;過度な発光パーツがない。嫌いではないですが、店頭で見たStrix Scar 15は光るパーツがチープな感じがして敬遠してしまいました。&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;画面を180度開くことができる。画面がスピーカーの音を遮らないようにミックスの最終確認などで倒したいことがあります。Thinkpadとかもそういうところがいいですよね。&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;イマイチなところ&amp;#34;&amp;gt;イマイチなところ&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;ASUSのZenbookを過去に使ってましたが、とにかくよくマザボが壊れました。修理しても修理しても壊れるので、信頼のあるマザボメーカーとは思えなくなりました。このトラウマで最後まで悩みましたが、今回はマザボにも名前を冠しているROGなので品質が違うことを期待してます。キャンペーンで3年間のなんでも修理保証がついてました。&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;ASUS Storeの梱包がよくないです。無駄にでかいダンボールにまるめた紙二個を緩衝材としたスカスカな梱包で佐川が配送するという一番嫌なパターンでした。平日しか営業してないのはホワイト企業で良いなと思いますが。&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;メモリ片側がハンダ付けされていて実質48GBが上限。64GB積めません。&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;タッチパッドの二点クリックがときどき反応しない。奇妙なことにクリックではなくタップすれば確実に認識するので慣れる必要があります。私は普段マウス使ってるので問題ないですが。&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;タッチパッドの上にThinkpadみたいな独立した左右スクロール用マウスボタンが欲しかった。&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;スピーカーの音がいまいち。DTMerは外付けのスピーカーやヘッドフォンを使うので問題ないでしょう。&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;McAfeeとかi-Filterといったカスソフトが入っている。マージンもらってるんでしょうがブランドイメージを毀損してるので1万円値上げしても良いので入れないでほしい&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Windows11の初期設定でローカルアカウントを作れない。多くのDTMソフトは国際化の面でカスなので（ユーザ数が少ないので仕方がない）、記号だったりAscii以外の文字が入ってるパスが存在すると異常終了します。ついでにプログラミングとかする人は$HOMEやsshのために覚えやすい名前にしてる人が多いと思います、MSアカウントで作られると意味不明なユーザ名が作られるので本当にやめてほしい。それ以外はとくに不便ではありませんでした。&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;今回は4月末までの購入で30日間返品保証キャンペーンもあるようなので、来月また返品したのかどうか記事を出そうと思います。&amp;lt;/p&amp;gt;</content></entry><entry><title>2022 4/24 M3告知 (ステムミックスあり)</title><link href="https://klknn.github.io/posts/m3_2022spring/"/><id>https://klknn.github.io/posts/m3_2022spring/</id><published>2022-04-17T11:24:12+0900</published><updated>2022-04-17T11:24:12+0900</updated><summary type="html">お久しぶりです。半年ぶりの更新になってしまいました。告知です。 新譜 新曲 flare (1曲目) と、リミックスしたoverflowとnullusを、Yuy氏のサークルSecret Messengerに提供しました。既発表曲 overflow, sillenite の再マスタリング版も収録されています。歌は全部nayutaさんです。 公式サイト https://scmn0020.tumblr.com/ WIP tweet 制作に区切りがついたら作業画面を録画してあとで見直すのもおもしろいかな〜とやってました。古い順にtweetを並べます。当時の機材購入とかもついでに載せます。 一年前にM3でSilleniteというアルバムを出したときのツイート。私がremixやりたいとか、コンセプトをまとめればアルバムにできるかもという雑談...</summary><content type="html">&amp;lt;p&amp;gt;お久しぶりです。半年ぶりの更新になってしまいました。告知です。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;新譜&amp;#34;&amp;gt;新譜&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;新曲 flare (1曲目) と、リミックスしたoverflowとnullusを、&amp;lt;a href=&amp;#34;https://twitter.com/Yuy_H&amp;#34;&amp;gt;Yuy氏&amp;lt;/a&amp;gt;のサークルSecret Messengerに提供しました。既発表曲 overflow, sillenite の再マスタリング版も収録されています。歌は全部&amp;lt;a href=&amp;#34;https://twitter.com/7utauta&amp;#34;&amp;gt;nayutaさん&amp;lt;/a&amp;gt;です。&amp;lt;/p&amp;gt;
&amp;lt;div style=&amp;#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&amp;#34;&amp;gt;
&amp;lt;iframe src=&amp;#34;https://www.youtube.com/embed/JJiAm1oZlns?autoplay=1&amp;#34; style=&amp;#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&amp;#34; allowfullscreen title=&amp;#34;YouTube Video&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;公式サイト &amp;lt;a href=&amp;#34;https://scmn0020.tumblr.com/&amp;#34;&amp;gt;https://scmn0020.tumblr.com/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;wip-tweet&amp;#34;&amp;gt;WIP tweet&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;制作に区切りがついたら作業画面を録画してあとで見直すのもおもしろいかな〜とやってました。古い順にtweetを並べます。当時の機材購入とかもついでに載せます。&amp;lt;/p&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;p&amp;gt;一年前にM3でSilleniteというアルバムを出したときのツイート。私がremixやりたいとか、コンセプトをまとめればアルバムにできるかもという雑談してた。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;やってます〜 &amp;lt;a href=&amp;#34;https://t.co/FW9mfJAQO7&amp;#34;&amp;gt;pic.twitter.com/FW9mfJAQO7&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1386138777156866059?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;April 25, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;翌日のツイート。とくにOverflowという曲のremixやりたかったので、昔のPCからプロジェクトをサルベージしていました。まんまとリプライでYuy氏が釣れて、アルバムのこと話してます。笑
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;新しいMacにMassive/Absynth/FM8/Sylenth1入れて (Battery3は死んでました) 鳴らしてました。Wavesがライセンス古くて入れられないので変ですけど、remixの出発点としてはよさそう &amp;lt;a href=&amp;#34;https://t.co/ql95FssEpi&amp;#34;&amp;gt;pic.twitter.com/ql95FssEpi&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1386357962218762241?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;April 25, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;アルバムとは関係ないですが、私のremixで一つの頂点となった。BT surrounded remixコンテスト入賞作品のプロジェクトです。音源はこちらから &amp;lt;a href=&amp;#34;https://m.soundcloud.com/kr1nu/b?in=bt/&amp;#34;&amp;gt;https://m.soundcloud.com/kr1nu/b?in=bt/&amp;lt;/a&amp;gt;
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;8年前(!?)のBT surrounded remix、このころはSylenth1 と MASSIVE ばっかり使ってたのでなんとか再現できた気がする。Battery3とかもうないので、Drum Machine Designerで組み直しましたが。新たにWavesライセンス買うか迷う、正直Logic付属でもCとL以外は大体できそう &amp;lt;a href=&amp;#34;https://t.co/1Bf6VKcQhr&amp;#34;&amp;gt;pic.twitter.com/1Bf6VKcQhr&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1387354343087640580?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;April 28, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;このときの制作環境。Overflowとか作ってた頃(10年前&amp;amp;hellip;)はNS10Mを使ってました。久々に鳴らすとテンシンあがるので、まだ持ってます
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;Logic触ってたら懐かしくて当時のメインスピーカーだったNS10M復活させた &amp;lt;a href=&amp;#34;https://t.co/fLGvhguWbJ&amp;#34;&amp;gt;pic.twitter.com/fLGvhguWbJ&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1387631146171736066?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;April 29, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;最初期のoverflow remix (v1)。すっきりしていてこれはこれで悪くないですね。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;overflowっていう曲のremixしてます、昔の自分の曲難しい... &amp;lt;a href=&amp;#34;https://t.co/dlkcCRip3u&amp;#34;&amp;gt;pic.twitter.com/dlkcCRip3u&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1396016195984236551?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;May 22, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;おなじく最初期のnullus remix (v1)。今にして思えば穏やかな曲をいれても良かったですね。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;und&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;wip &amp;lt;a href=&amp;#34;https://t.co/3h7TeKJ3Pe&amp;#34;&amp;gt;pic.twitter.com/3h7TeKJ3Pe&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1398238945155092480?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;May 28, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;新曲にしようかと思ったけど、結局アルバムに入らなかった未発表曲のデモです。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;いま作ってる曲、たくさんVocalSynth2使っています🤯 &amp;lt;a href=&amp;#34;https://t.co/ejFB6CHhV6&amp;#34;&amp;gt;pic.twitter.com/ejFB6CHhV6&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1401519995012620291?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;June 6, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;ギター(右)買ってました。flareでちょっとだけ鳴ってる。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;新ギターのデザイン最高だぜ…と思ってるけど旧ギターとピックガード被ってるしゴールドPGに変えたくなってきました（改造しないと死ぬ病気 &amp;lt;a href=&amp;#34;https://t.co/fUUrVojMW4&amp;#34;&amp;gt;pic.twitter.com/fUUrVojMW4&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1411346983353077762?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;July 3, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;制作環境その2
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;サウンドハウスのポイントでキーボードスタンド買いました &amp;lt;a href=&amp;#34;https://t.co/CiV0705Eux&amp;#34;&amp;gt;pic.twitter.com/CiV0705Eux&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1426418300762812416?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;August 14, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;ZOOM RT-123中古を買いました。スケルトン機材は絶対買ってしまう。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;カッコいいリズムマシンをハードオフで買いました &amp;lt;a href=&amp;#34;https://t.co/m0qus1WdBu&amp;#34;&amp;gt;pic.twitter.com/m0qus1WdBu&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1427898872714579978?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;August 18, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;イントロ的なのが生えてきたnullus remix v2。最終的にも90%くらいFM8の音です。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;FM8好きすぎる &amp;lt;a href=&amp;#34;https://t.co/aE6NR3AIt9&amp;#34;&amp;gt;pic.twitter.com/aE6NR3AIt9&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1444227316813422597?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;October 2, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;新ギターのピックガード交換してた。これは照井順政の真似。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;フェルナンデス製なのに純正とネジ穴完全に一致してたし、美しい🥰 &amp;lt;a href=&amp;#34;https://t.co/GbDeJYsJyY&amp;#34;&amp;gt;pic.twitter.com/GbDeJYsJyY&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1449684268498624521?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;October 17, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;これはflare初期のデモ。全然雰囲気が違う。ボーカルは「AIきりたん」という無料の歌声合成ソフトなのですが、ベタ打ちでコレなのですごすぎませんか？
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;久々にsylenth1使ったらinitからpluckとかfxザクザク音作ってくの楽しい &amp;lt;a href=&amp;#34;https://t.co/X3HkYtvzaP&amp;#34;&amp;gt;pic.twitter.com/X3HkYtvzaP&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1457274092948623360?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;November 7, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Overflowをポップにremixしたらどうなるかな？という実験。もちろんボツ
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;ボツになったアレンジ &amp;lt;a href=&amp;#34;https://t.co/fdpe4ptTOE&amp;#34;&amp;gt;pic.twitter.com/fdpe4ptTOE&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1467750166799486976?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;December 6, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Overflow remix v2サビ以外もだんだん形になってますね。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;結構いいベースラインができた &amp;lt;a href=&amp;#34;https://t.co/zN1lFxWl8b&amp;#34;&amp;gt;pic.twitter.com/zN1lFxWl8b&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1467752387071070211?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;December 6, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;近所の楽器屋で偶然みつけた当時品薄だったTB303クローンを入手。Overflow remixでガッツリ使いました。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;一生触ってられます &amp;lt;a href=&amp;#34;https://t.co/og1cJpqBsT&amp;#34;&amp;gt;pic.twitter.com/og1cJpqBsT&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1469565878157320194?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;December 11, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;制作と関係ないけど Charlie Puth が同時期に制作過程を tiktok にあげてるの見つけて、こういうのいいな〜と思った。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;Light Switch is done. If this song gets 250,000 more pre saves, I’ll dro... &amp;lt;a href=&amp;#34;https://t.co/3fNuyQi7Ke&amp;#34;&amp;gt;https://t.co/3fNuyQi7Ke&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;https://twitter.com/YouTube?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;@YouTube&amp;lt;/a&amp;gt;より ついに完成したのか．かなり実験的な音が鳴ってて楽しみ&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1471686297127624704?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;December 17, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Spectrasonics Omnisphere2とTrilianと買っていました。Omniはkabanaguさんが&amp;lt;a href=&amp;#34;https://note.com/kabanagu_h/n/n5a10948ede66&amp;#34;&amp;gt;泳ぐ真似&amp;lt;/a&amp;gt;で使ってるのを読んで、TrilianはCharlie Puthが使ってるのを見てミーハーなので即購入。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;全部届いたので明日は仕事サボるしかないな &amp;lt;a href=&amp;#34;https://t.co/AIlQpSvV9P&amp;#34;&amp;gt;pic.twitter.com/AIlQpSvV9P&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1473228862012407808?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;December 21, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;制作環境その3。大掃除しました、いまもこの感じを維持しています。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;模様替え兼大掃除＼(^o^)／ｵﾜﾀ &amp;lt;a href=&amp;#34;https://t.co/WB0AzQ4jeS&amp;#34;&amp;gt;pic.twitter.com/WB0AzQ4jeS&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1474702083257663492?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;December 25, 2021&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;古のmda epianoを再実装して公開しました。flareとnullus remixで使ってます。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;懐かしのVSTプラグイン mda epiano 。久々に使いたかったので、Dplugに移植してマルチプラットフォーム化 (Win, Mac, LinuxのVST, AU, LV2対応) しました。DLはこちら &amp;lt;a href=&amp;#34;https://t.co/PQjetAx8iJ&amp;#34;&amp;gt;https://t.co/PQjetAx8iJ&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;https://t.co/1KZTGor5ta&amp;#34;&amp;gt;pic.twitter.com/1KZTGor5ta&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1483451171214077952?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;January 18, 2022&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;難産だったflareがサビ以外完成してました。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;wip v2 (obsで撮ってると処理落ちすごいな...) &amp;lt;a href=&amp;#34;https://t.co/ZLkJLgqP4E&amp;#34;&amp;gt;pic.twitter.com/ZLkJLgqP4E&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1485658884555821058?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;January 24, 2022&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;overflow remix v3だそうです。サビはかなり完成形になってますね。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;overflow remix wip v3 昔のプロジェクトから引っ張ってきたhihatとかイントロ足した &amp;lt;a href=&amp;#34;https://t.co/m2r94Nhv1u&amp;#34;&amp;gt;pic.twitter.com/m2r94Nhv1u&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1487490224393719810?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;January 29, 2022&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;nullus remixもサビ以外は完成形になってきました。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;CPU負荷やばい &amp;lt;a href=&amp;#34;https://t.co/1A3cadR3PG&amp;#34;&amp;gt;pic.twitter.com/1A3cadR3PG&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1494921993451618305?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;February 19, 2022&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;10年以上ほしかったMusicMan JP6に偶然出会いました。マホガニーボディという見たこともないスペックで音が最高だったので、気づいたら買っていました。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;JP6かっこいいよ... &amp;lt;a href=&amp;#34;https://t.co/LZxdYvUO8O&amp;#34;&amp;gt;pic.twitter.com/LZxdYvUO8O&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1497464146191077376?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;February 26, 2022&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;nullus remixも佳境、bitwigでステムミックス(マスタリング前の最終段階)をしています。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;und&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;2/3 &amp;lt;a href=&amp;#34;https://t.co/MZkyhgxhAE&amp;#34;&amp;gt;pic.twitter.com/MZkyhgxhAE&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1497817676705533954?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;February 27, 2022&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;overflow remixもステムミックスの段階に入りました。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;3/3 なんどstem書き出してもズレるのでLogicでそのままsumming track使ってstem mixしてます...．Omnisphere2以外のシンセは軽いのでMacBook Airだけど割となんとかなりました &amp;lt;a href=&amp;#34;https://t.co/OAQlGKpEVC&amp;#34;&amp;gt;pic.twitter.com/OAQlGKpEVC&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1497851324578164738?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;February 27, 2022&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;flareのステムミックスです。最後に配布しています。
&amp;lt;blockquote class=&amp;#34;twitter-tweet&amp;#34;&amp;gt;&amp;lt;p lang=&amp;#34;ja&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt;新曲のミックスも修正中．これで終わってくれ... &amp;lt;a href=&amp;#34;https://t.co/dPp1WWrziN&amp;#34;&amp;gt;pic.twitter.com/dPp1WWrziN&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;amp;mdash; kr1nu (@kr1nu) &amp;lt;a href=&amp;#34;https://twitter.com/kr1nu/status/1500036426762952704?ref_src=twsrc%5Etfw&amp;#34;&amp;gt;March 5, 2022&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;#34;https://platform.twitter.com/widgets.js&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;おまけ&amp;#34;&amp;gt;おまけ&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;各曲の remix 用のステムミックスを配布します。こちらからDLしてください。&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Sillenite &amp;lt;a href=&amp;#34;https://drive.google.com/drive/folders/1fa8P5a-J_AC5L-Somuu5tAmlyRtTPyMR&amp;#34;&amp;gt;https://drive.google.com/drive/folders/1fa8P5a-J_AC5L-Somuu5tAmlyRtTPyMR&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;flare, overflow remix, nullus remix &amp;lt;a href=&amp;#34;https://drive.google.com/drive/u/7/folders/1woHDqfRTZQSjO_o50YnyW0kDOla25CAm&amp;#34;&amp;gt;https://drive.google.com/drive/u/7/folders/1woHDqfRTZQSjO_o50YnyW0kDOla25CAm&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;</content></entry><entry><title>雑記: キングダム、千鳥、M1 Mac購入他</title><link href="https://klknn.github.io/posts/20210601/"/><id>https://klknn.github.io/posts/20210601/</id><published>2021-06-02T03:25:33+0900</published><updated>2021-06-02T03:25:33+0900</updated><summary type="html">PCを買い替えたりしてたら、サイト更新が面倒くさくなってました。精神的なハードルさげるために雑なメモです。私はここをTwitter 2.0として使いたいと考えています。今日は変な時間に寝起きしたと思ったけど、21時に寝て4時に起きてるので健康的でした。 NetflixとかAmazon Primeで見てるやつ アニメのキングダムにハマりしました、ちなみに漫画はそこまでハマらなかったです。個人的なハマり基準として出演してる声優を片っ端からWikipediaで調べる習性があります。ただし、声優のWikipediaページに特有の現象として、ある程度の知名度を境におそらく熱狂的なファンが書き散らかした「※個人の...</summary><content type="html">&amp;lt;p&amp;gt;PCを買い替えたりしてたら、サイト更新が面倒くさくなってました。精神的なハードルさげるために雑なメモです。私はここをTwitter 2.0として使いたいと考えています。今日は変な時間に寝起きしたと思ったけど、21時に寝て4時に起きてるので健康的でした。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;netflixとかamazon-primeで見てるやつ&amp;#34;&amp;gt;NetflixとかAmazon Primeで見てるやつ&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;アニメのキングダムにハマりしました、ちなみに漫画はそこまでハマらなかったです。個人的なハマり基準として出演してる声優を片っ端からWikipediaで調べる習性があります。ただし、声優のWikipediaページに特有の現象として、ある程度の知名度を境におそらく熱狂的なファンが書き散らかした「※個人の感想」みたいな記述が削除されずに残っていて、ちょっとしんどい気持ちになります。ちなみに一期と二期最終話に作者がエキストラ出演してるのみんな気づきましたか？私もスタッフロールで見ただけですが。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;実写では相席食堂の新エピソード追加されてて嬉しいです。大阪から東京に引っ越して、あれがローカル番組ということに衝撃がありました。東京のローカル番組ってなんか古臭いやつが多くて嫌です。これは偏見ですが、複数の老いた男性と一人の若い女性アナの組み合わせみたいなのが多い。大阪はなんか逆で、老いた女性芸人と若い男性アナみたいな風景があった気がします。上沼恵美子とハイヒール、アンミカが絶大な権力ありそう。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;千鳥といえばAmazon Primeオリジナルの「千鳥のニッポンハッピーチャンネル」が一番好きです。これは大吾の企画した番組をノブが突っ込みながらみるというメタ番組です。ゲストは全員大吾側についているので、ノブだけが異世界転生したテレビみたいにも見えます。最初のトレンディドラマとか、ホラー特番みたいな、いまはもう失われた過去の遺産を誇張・歴史改変した笑いにしてしまうユニークさが好きです。相席食堂といい彼らはエコシステムを作るのが上手なので、千鳥はダウンタウンに超えるだろうなと思います。結婚するまでテレビ全然みてなくて、お笑い芸人とか全然知らなかったけど、ダウンタウンだけは結構好きでした、キャシー塚本が特に好き。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;m1-mac-book-air-買った&amp;#34;&amp;gt;M1 Mac book air 買った&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;昔持ってたMac book proが2009年製だったのを覚えてます。つまり12年ぶりにMac買いました。昔は自作PCにMac入れてたんですが、OSアップデートが自由なハードウェアとクローズドソフトの相性による死と隣り合わせで、結局LinuxかWindows使えという結論に至っていました。買った理由は、&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;ファンレスなので無音、スピーカーくらいしか通気してないので埃にも強そう&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;M1っていうかARMのPC持ってないから面白そう&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;メーカー製Windows はDPCレイテンシーのガチャみたいなところがあり厳しい&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;昔のMacで作った曲をremix (というかrearrange) したい&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;画面が16:10で縦に長い&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;という感じです。正直、プログラミングやゲームみたいなギーク的な部分は絶対WindowsやLinuxの方が楽なので、Macではどうしようもない怒りを覚えていますが、音楽制作用とわりきると悪く無いです。Logicに今は亡きCamelAudioのAlchemyとかCamelCrasher入ってて嬉しいです。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;そのうちプログラミング環境も揃えていければなと思います。ソフトウェアのインストールにHomebrew久々に使ったらなんか自分でコンパイルしなくなってる？昔BSD系のOS使ってた頃は、全部コンパイルするから楽しかったです。ただ、これってソフトウェア署名の問題とかあるんですかね、自分でコンパイルしたバイナリすら自由に使えない仕様にキれて速攻SIPは切りました。どうせ音楽用ソフトとブラウザくらいしか野良バイナリは入れません。ちなみに技術的なこと検索するときは Qiita と brew をNGワードに設定しています、カス率が高いので。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;d言語設定-on-m1-mac&amp;#34;&amp;gt;D言語設定 on M1 Mac&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;プラグイン開発の設定をする前に、プログラミング環境の設定をやります。とりあえずrosettaでDMDコンパイラも問題なく動きましたが、M1 nativeじゃないと嫌&amp;amp;hellip;という気持ちがあり、LDC2をメインで使ってます。そのうちクロスコンパイルとかにも挑戦したい。とくにLinuxと違うことはないですが、唯一Emacsの設定でcompany-dmdにLDC2を使ってますよと教える必要があります。あとDCDとかもそこそこ重いので一応M1 nativeじゃないと嫌&amp;amp;hellip;という気持ちでHEADをコンパイルして使ってます。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre tabindex=&amp;#34;0&amp;#34; style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-elisp&amp;#34; data-lang=&amp;#34;elisp&amp;#34;&amp;gt;(use-package d-mode
:ensure &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;
:init
(use-package company-dcd
:ensure &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;t&amp;lt;/span&amp;gt;
:config
(setq company-dcd-compiler &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;~/Downloads/ldc2-1.25.1-osx-arm64/bin/ldc2&amp;amp;#34;&amp;lt;/span&amp;gt;)
(setq company-dcd-client-executable &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;~/repos/DCD/bin/dcd-client&amp;amp;#34;&amp;lt;/span&amp;gt;)
(setq company-dcd-server-executable &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;~/repos/DCD/bin/dcd-server&amp;amp;#34;&amp;lt;/span&amp;gt;))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;最近ようやくuse-packageを使って、&amp;lt;code&amp;gt;.emacs&amp;lt;/code&amp;gt;の式年造替を終えました。なんとなく長年使ってた &amp;lt;code&amp;gt;.emacs.d/init.el&amp;lt;/code&amp;gt; から &amp;lt;code&amp;gt;.emacs&amp;lt;/code&amp;gt; に変えました。開きやすいから。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;そういえば、前回の記事でflycheck-dmd-dubにWindows MSYS2対応パッチ投げた件、マージしてもらえたのでcompany-dcdにも投げなきゃ&amp;amp;hellip;。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;hugo-アップデート&amp;#34;&amp;gt;Hugo アップデート&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;雑に &amp;lt;code&amp;gt;brew install hugo&amp;lt;/code&amp;gt; したら最新版の v0.83.1 が入っていたので Github Actions の方もアプデしました (hugo はシングルバイナリ配布が売りなのでわざわざ brew 使う必要はないが)。目立った違いはなさそうですが、個人的には記事の日付表示が以前から &amp;lt;code&amp;gt;2021-06-02 03:25:33 +0900 +0900&amp;lt;/code&amp;gt; となぜかタイムゾーンが二度表示されているバグが修正されて、 &amp;lt;code&amp;gt;2021-06-02 03:25:33 +0900 JST&amp;lt;/code&amp;gt; という表記に変わったところが超嬉しいです。JS側でhackするとかHugoの中に手を入れたなかったので、すごく嬉しいです。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;追記: と、思ったけどCIでデプロイされたページでは元にもどってる。ロケールとかの問題でしょうか？とりあえず &amp;lt;code&amp;gt;{{ .Date.Format &amp;amp;quot;2006-01-02 15:04:05 MST&amp;amp;quot; }}&amp;lt;/code&amp;gt; といった感じでFormatを指定してみました。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://discourse.gohugo.io/t/convert-all-times-to-utc/3206&amp;#34;&amp;gt;https://discourse.gohugo.io/t/convert-all-times-to-utc/3206&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;ダークモード対応&amp;#34;&amp;gt;ダークモード対応&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;/posts/hugo-setup&amp;#34;&amp;gt;このサイトはCSSを書かない主義&amp;lt;/a&amp;gt; でやっているのですが、Mac買ってダークモードという概念があることを認識したので、こんな感じで追加してみました。相変わらず 全部 &amp;lt;a href=&amp;#34;https://github.com/klknn/klknn.github.io/blob/develop/layouts/_default/baseof.html&amp;#34;&amp;gt;layouts/_default/baseof.html&amp;lt;/a&amp;gt; に直書きです。ブラウザとOSで異なるモード選択していたらどうなるのかとか気になるけど、まぁいいか。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre tabindex=&amp;#34;0&amp;#34; style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-css&amp;#34; data-lang=&amp;#34;css&amp;#34;&amp;gt;@&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;media&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;prefers-color-scheme&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;:&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;dark&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;)&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;body&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;background-color&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;#222&amp;lt;/span&amp;gt;;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;color&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;#ddd&amp;lt;/span&amp;gt;;
}
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;:&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;link&amp;lt;/span&amp;gt; { &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;color&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;#88f&amp;lt;/span&amp;gt;; }
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;:&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;visited&amp;lt;/span&amp;gt; { &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;color&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;#88c&amp;lt;/span&amp;gt;; }
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;:&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;hover&amp;lt;/span&amp;gt; { &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;color&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;#f88&amp;lt;/span&amp;gt;; }
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;a&amp;lt;/span&amp;gt;:&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;active&amp;lt;/span&amp;gt; { &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;color&amp;lt;/span&amp;gt;: &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;#f80&amp;lt;/span&amp;gt;; }
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;あと解像度高いディスプレイで見たら横長すぎて読みにくいので max-width とかもいれました。&amp;lt;/p&amp;gt;</content></entry><entry><title>WindowsでのDplug開発</title><link href="https://klknn.github.io/posts/d-windows/"/><id>https://klknn.github.io/posts/d-windows/</id><published>2021-02-28T14:24:12+0900</published><updated>2021-02-28T14:24:12+0900</updated><summary type="html">Synth2 開発のために，普段の音楽制作で使ってるWindowsで開発環境を構築しました．その備忘録です． コンパイラ 以下のツールが必要 MSVC x64/x86 build tools (v14.28) + Windows 10 SDK (10.01924.10) : https://visualstudio.microsoft.com 64bitバイナリのリンクに必要．数GBあるのなんなんですかね．(XCodeよりはマシだが)．Github Actions読み解けば減らせるかもしれない． ldc2 最新版 (ldc2-1.25.0-windows-x64.7z): https://github.com/ldc-developers/ldc/releases D言語のコンパイルに必要． dplug-build: https://github.com/AuburnSounds/Dplug/wiki/Getting-Started#step-3-build-the-dplug-build-tool 動的ライブラリをVST3等のプラグインに変換するときに必要． 色々書くのが面倒で動画も作ったので，暇な人は見てください． https://www.youtube.com/watch?v=vZEgpgHGI-A&amp;amp;amp;t=17s 動画ではPowerShellを使ってますが，私はzsh (+tmux+emacs) が好きなので，基本 MSYS2 で開発してます． エディタ 拘りがなければ VSCode の D 言語拡張 を入れるの...</summary><content type="html">&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/klknn/synth2&amp;#34;&amp;gt;Synth2&amp;lt;/a&amp;gt; 開発のために，普段の音楽制作で使ってるWindowsで開発環境を構築しました．その備忘録です．&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;コンパイラ&amp;#34;&amp;gt;コンパイラ&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;以下のツールが必要&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;MSVC x64/x86 build tools (v14.28) + Windows 10 SDK (10.01924.10) : &amp;lt;a href=&amp;#34;https://visualstudio.microsoft.com&amp;#34;&amp;gt;https://visualstudio.microsoft.com&amp;lt;/a&amp;gt;
64bitバイナリのリンクに必要．数GBあるのなんなんですかね．(XCodeよりはマシだが)．Github Actions読み解けば減らせるかもしれない．&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;ldc2 最新版 (ldc2-1.25.0-windows-x64.7z): &amp;lt;a href=&amp;#34;https://github.com/ldc-developers/ldc/releases&amp;#34;&amp;gt;https://github.com/ldc-developers/ldc/releases&amp;lt;/a&amp;gt;
D言語のコンパイルに必要．&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;dplug-build: &amp;lt;a href=&amp;#34;https://github.com/AuburnSounds/Dplug/wiki/Getting-Started#step-3-build-the-dplug-build-tool&amp;#34;&amp;gt;https://github.com/AuburnSounds/Dplug/wiki/Getting-Started#step-3-build-the-dplug-build-tool&amp;lt;/a&amp;gt;
動的ライブラリをVST3等のプラグインに変換するときに必要．&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;色々書くのが面倒で動画も作ったので，暇な人は見てください．&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://www.youtube.com/watch?v=vZEgpgHGI-A&amp;amp;amp;t=17s&amp;#34;&amp;gt;https://www.youtube.com/watch?v=vZEgpgHGI-A&amp;amp;amp;t=17s&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;動画ではPowerShellを使ってますが，私はzsh (+tmux+emacs) が好きなので，基本 &amp;lt;a href=&amp;#34;https://www.msys2.org/&amp;#34;&amp;gt;MSYS2&amp;lt;/a&amp;gt; で開発してます．&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;エディタ&amp;#34;&amp;gt;エディタ&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;拘りがなければ &amp;lt;a href=&amp;#34;https://github.com/Pure-D/code-d&amp;#34;&amp;gt;VSCode の D 言語拡張&amp;lt;/a&amp;gt; を入れるのが一番いいと思います．私はemacsが好きなので使ってませんが．&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;とにかくEmacs対応が一番大変でした．D言語での補完などはDCDが一般的なツールで，それをもとにLSPなどが整備されているようですが，現状VSCode以外で動かせず (Linuxでもできなかった)．結局いつもLinuxで使ってるDCDの薄いラッパーである company-dcd に Windows 特有の問題 (DUBパッケージの場所，パスの文法，CR改行) を対処するパッチをあてて使いました．正確には company-dcd が依存してる flycheck-dmd-dub というパッケージにもパッチが必要です．&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/klknn/flycheck-dmd-dub/tree/fix-cygwin&amp;#34;&amp;gt;https://github.com/klknn/flycheck-dmd-dub/tree/fix-cygwin&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/klknn/company-dcd/tree/fix-cygwin&amp;#34;&amp;gt;https://github.com/klknn/company-dcd/tree/fix-cygwin&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;上記のパッケージにelispのパスを通して，こんな感じで設定してます．&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre tabindex=&amp;#34;0&amp;#34; style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-elisp&amp;#34; data-lang=&amp;#34;elisp&amp;#34;&amp;gt;(add-to-list &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#39;load-path&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;flycheck-dmd-dubのパス&amp;amp;#34;&amp;lt;/span&amp;gt;)
(add-to-list &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#39;load-path&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;company-dcdのパス&amp;amp;#34;&amp;lt;/span&amp;gt;)
(add-hook &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#39;d-mode-hook&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#39;company-dcd-mode&amp;lt;/span&amp;gt;)
(setq company-dcd-client-execulable &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;dcd-client.exeのパス&amp;amp;#34;&amp;lt;/span&amp;gt;)
(setq company-dcd-server-execulable &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;dcd-server.exeのパス&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;こんな風にcompanyによる補完や &amp;lt;code&amp;gt;C-c .&amp;lt;/code&amp;gt; による定義ジャンプが動くはずです．&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;#34;/emacs-company-dcd.png&amp;#34; alt=&amp;#34;emacs-company-dcd.png&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;とりあえず &amp;lt;a href=&amp;#34;https://github.com/atilaneves/flycheck-dmd-dub/pull/15&amp;#34;&amp;gt;flycheck-dmd-dub に PR&amp;lt;/a&amp;gt; を出しました，もし無事マージされたら company-dcd にもPRしたいと思います．&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;とても久しぶりにelisp書きましたが，シェルスクリプトばりに雑に書けてインタラクティブに動作できるので気持ちいいなと思いました．この適当にhackして治せる点が，他のエディタにない醍醐味だと思います．もしWindowsでemacsがうまく動かなかったらブチ切れてMacを買っていたかもしれません(そっちで動く保証はないですが)．現在Macは持っていないのでサポートする予定ないです．&amp;lt;/p&amp;gt;</content></entry><entry><title>デジタルフィルタの実装</title><link href="https://klknn.github.io/posts/filter/"/><id>https://klknn.github.io/posts/filter/</id><published>2021-02-22T23:24:12+0900</published><updated>2021-02-22T23:24:12+0900</updated><summary type="html">自作シンセにLPFを実装したとき の備忘録。 記号のリスト $j$: 虚数 $\omega$: 各周波数。周波数 (Hz) に $2\pi$ をかけたもの $T$: サンプリング周期、サンプリング周波数の逆数 $\omega_0$: カットオフ角周波数 $Q$: レゾナンス (Quality Factorとも呼ぶ) $Q = \sqrt{1/2}$ 以上で、 $\omega_0$ にピークが立つ $x[n]$: 時刻 $n$ におけるフィルタの入力サンプル $y[n]$: 時刻 $n$ におけるフィルタの出力サンプル $a_t$: $t$ 時刻前の出力にかかるフィルタ係数(これをIIRフィルタと呼ぶ) $b_t$: $t$ 時刻前の入力にかかるフィルタ係数(これをFIRフィルタと呼ぶ) デジタルフィルタの定義 一般的なフルIIRフィルタ (IIRおよびFIRフィルタも含む) は時間ドメインでは入出力信号 $x, y$ にそれぞれフィルタ係数 $a, b$ をかけた畳み込みで実装で...</summary><content type="html">&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/klknn/synth2/commit/e8ee1bc4a237c5b2c5c388d2fab7a3fb1977c26a&amp;#34;&amp;gt;自作シンセにLPFを実装したとき&amp;lt;/a&amp;gt; の備忘録。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;記号のリスト&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;$j$: 虚数&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;$\omega$: 各周波数。周波数 (Hz) に $2\pi$ をかけたもの&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;$T$: サンプリング周期、サンプリング周波数の逆数&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;$\omega_0$: カットオフ角周波数&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;$Q$: レゾナンス (Quality Factorとも呼ぶ) $Q = \sqrt{1/2}$ 以上で、 $\omega_0$ にピークが立つ&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;$x[n]$: 時刻 $n$ におけるフィルタの入力サンプル&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;$y[n]$: 時刻 $n$ におけるフィルタの出力サンプル&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;$a_t$: $t$ 時刻前の出力にかかるフィルタ係数(これをIIRフィルタと呼ぶ)&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;$b_t$: $t$ 時刻前の入力にかかるフィルタ係数(これをFIRフィルタと呼ぶ)&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;デジタルフィルタの定義&amp;#34;&amp;gt;デジタルフィルタの定義&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;一般的なフルIIRフィルタ (IIRおよびFIRフィルタも含む) は時間ドメインでは入出力信号 $x, y$ にそれぞれフィルタ係数 $a, b$ をかけた畳み込みで実装できる:
\begin{align}
y[n] = \sum_{t=0}^{B} b_t x[n - t] - \sum_{t=1}^{A} a_t y[n - t]
\end{align}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;IIRフィルタが所望の周波数特性をもつように定義するにはZ変換・ラプラス変換・フーリエ変換を用いる。
先の時間領域の等式の両辺を入力 $x[n]$ で割った入出力比を伝達関数(transfer function)と呼ぶ。さらに $x, y$ をZ変換とよばれる下記の置き換え
\begin{align}
X(z) = \sum_{t} x[t] z^{-t}
\end{align}
によりZ領域での伝達関数を考える:
\begin{align}
H(z) &amp;amp;amp;= \frac{Y(z)}{X(z)}
= \frac{X(z) \sum_{t=0}^{B} b_t z^{-t} - Y(z) \sum_{t=1}^{A} a_t z^{-t}}{X(z)} \nonumber \newline
&amp;amp;amp;= \sum_{t=0}^{B} b_t z^{-t} - H(z) \sum_{t=1}^{A} a_t z^{-t} \nonumber \newline
&amp;amp;amp;= \frac{\sum_{t=0}^{B} b_t z^{-t}}{1 + \sum_{t=1}^{A} a_t z^{-t}}
\end{align}
ここで次のような bilinear 変換によりラプラス領域の伝達関数 $H(s)$ にできる:
\begin{align}
\label{eq:laplace}
s &amp;amp;amp;= \frac{2}{T} \frac{z-1}{z+1}, \newline
\end{align}
ラプラス領域を介することで、さらにフーリエ変換として $s = j \omega$ を代入すれば周波数や位相の特性を得られる。絶対値をとれば $|H(j \omega)|$ が周波数ごとの音量 (db/octの傾きとかわかる), 位相をとれば $\angle{H(j \omega)}$ が周波数ごとの位相応答 (線形位相かなどわかる) を表す関数となる。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;フィルタ設計の流れ&amp;#34;&amp;gt;フィルタ設計の流れ&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;繰り返しになるが上記の各種変換により、デジタルの実装（離散時間領域）と、位相周波数応答の特性（フーリエ領域）を行き来することができる。ここでは触れないが、一時的にでてくるラプラス変換もアナログ回路との対応があり勉強すると楽しい。&amp;lt;/p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;離散時間 (コード実装の世界) $x[t]$&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Z変換 (信号処理における離散と連続の出入口) $X(z)$&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;ラプラス変換 (アナログ回路との親和性) $X(s)$&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;フーリエ変換 (位相・周波数の解析) $X(j\omega)$&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;p&amp;gt;ここまでの話を 4 から 1 に逆にたどると、デジタルフィルタの設計の流れとなる。つまり所望の位相・周波数特性を考え、逆変換により等価なフィルタ係数 $(a_t, b_t)$ を導出するという作業である。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;butterworth-フィルタの理論&amp;#34;&amp;gt;Butterworth フィルタの理論&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;代表的なフィルタとしてButterworthフィルタが音響処理では普及している。他のフィルタと比べてカットオフ周波数のロールオフが緩やかでカットオフ後に荒ぶらない性質がある。アナログ回路に基づいているので多くの場合はラプラス領域での伝達関数が示される。デジタルフィルタとして実装する場合に必要である、Z変換した伝達関数は数式記号処理ソフトを使って式 \eqref{eq:laplace} を代入すると得られる。具体例は後述する実験結果か、以下の本の 8.10 節でも確認できる&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;Sean Luke, 2019, Computational Music Synthesis, zeroth edition, available for free at &amp;lt;a href=&amp;#34;http://cs.gmu.edu/~sean/book/synthesis/&amp;#34;&amp;gt;http://cs.gmu.edu/~sean/book/synthesis/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;より一般的な Butterworth フィルタについてはこの PDF が詳しい (余談だが、著者はNIのMassiveやReaktorの開発者らしい &amp;lt;a href=&amp;#34;https://www.linkedin.com/in/vadim-zavalishin-451bb812b&amp;#34;&amp;gt;linkedin&amp;lt;/a&amp;gt;)&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;Vadim Zavalishin, The Art of VA Filter Design &amp;lt;a href=&amp;#34;https://www.native-instruments.com/fileadmin/ni_media/downloads/pdf/VAFilterDesign_2.1.0.pdf&amp;#34;&amp;gt;https://www.native-instruments.com/fileadmin/ni_media/downloads/pdf/VAFilterDesign_2.1.0.pdf&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;この辺の話は VA Filter Design の2章がよくまとまっている。それでは実際に使われるLPF/HPF/BPFを導出する。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;1-pole-low-pass-filter-lpf-6dboct&amp;#34;&amp;gt;1-pole Low Pass Filter (LPF) 6db/oct&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;天下り的に定義を覚えてもいいが、自分の中で納得する導出を考えてみる。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;人間には音の高さや大きさが対数スケールで感じる(例えば倍の周波数が1オクターブ上として聞こえる)ので、指数的に周波数を倍にすると、音量が半分になるようなLPフィルタがほしい。そのためには周波数の逆数みたいな周波数応答がいい。
\begin{align}
|H(j\omega)| &amp;amp;amp;= \frac{1}{w},
\end{align}
ただし周波数0のときに無限の音量になるのでやばい。そこで
\begin{align}
|H(j\omega)| &amp;amp;amp;= \frac{1}{w + 1},
\end{align}
とすれば周波数0では元の音量となるよう、先の関数を周波数 $w$ 軸に平行移動して音量が半減してゆく。ここまでは絶対値で議論してきたが、この性質をもつラプラス領域での伝達関数には以下のものが考えられる
\begin{align}
H(s) &amp;amp;amp;= \frac{1}{s + 1}.
\end{align}
さらに $s = s&amp;#39; / \omega_0$ を代入することで、今度は対数スケールで周波数軸を左右に平行移動できる。これは単なる変数変換なので、同じ代入式で任意のフィルタ伝達関数にカットオフ周波数 $\omega_0$ を導入できる。
\begin{align}
H(s) = \frac{1}{\frac{s}{\omega_0} + 1}
\end{align}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;この式は 1 pole (分母 = 0の方程式が1つの解をもつ) であり、倍の周波数(1 octave上) で0.5倍の音量つまりデシベル(db)でいうと $20 \log_{10} 0.5 \approx -6$ db/octave で高域が減衰するという。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;1-pole-high-pass-filter-hpf-6dboct&amp;#34;&amp;gt;1-pole High Pass Filter (HPF) 6db/oct&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;LPFと同じような議論で、$s / \omega_0$ の代わりに二倍低い周波数が二倍小さいレベルとなるよう $\omega_0 / s$が使えることがわかる。代入するとこのような伝達関数が得られる:
\begin{align}
H(s) = \frac{\frac{s}{\omega_0}}{\frac{s}{\omega_0} + 1}
\end{align}&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;2-pole-low-pass-filter-lpf-12dboct&amp;#34;&amp;gt;2-pole Low Pass Filter (LPF) 12db/oct&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;単純に1-pole LPFを二回かけると 2 pole (分母 = 0の方程式が2つの解をもつ) で 12db/octave で高域が減衰するLPFになる。フィルタは畳み込みなので、そのラプラス変換は積つまり、もとのLPFの二乗になる。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;単純に二回かけるかわりに、2-poleではレゾナンス $Q$ により周波数ピークをたたせることができる。
\begin{align}
H(s) = \frac{1}{\frac{s^2}{\omega_0^2} + \frac{s}{\omega_0 Q} + 1}
\end{align}
TODO: なぜ Q でピークがたつかの説明 (天下り的に周波数応答みればよいが、直感的な説明があるとよい)。気になる人は VA Filter Designの 4.2 Resonanceを読むとよい。&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;2-pole-high-pass-filter-hpf-12dboct&amp;#34;&amp;gt;2-pole High Pass Filter (HPF) 12db/oct&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;上に同じ性質をもつが逆に低域が減衰する。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;\begin{align}
H(s) = \frac{\frac{s^2}{\omega_0^2}}{\frac{s^2}{\omega_0^2} + \frac{s}{\omega_0 Q} + 1}
\end{align}&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;2-pole-band-pass-filter-bpf-12dboct&amp;#34;&amp;gt;2-pole Band Pass Filter (BPF) 12db/oct&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;上に同じ性質を持つが高域と低域の両方が減衰する。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;\begin{align}
H(s) = \frac{\frac{s}{\omega_0 Q}}{\frac{s^2}{\omega_0^2} + \frac{s}{\omega_0 Q} + 1}
\end{align}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;LPF, HPFとBPFの伝達関数を全部足したら1になるな、と思った人は筋が良い。ラプラス変換には線形性があるので、実際の各フィルタの出力を足し合わせてもとに戻るように、何もしない伝達関数 $H(s)=1$ が現れる。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;実装におけるフィルタ係数-pythonによる自動導出&amp;#34;&amp;gt;実装におけるフィルタ係数 (pythonによる自動導出)&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;で、結局冒頭のフィルタ係数 $a, b$ は何なんだという。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;ここまで得られたラプラス領域の伝達関数を式 \eqref{eq:laplace} を用いたZ変換することで冒頭の離散時間領域の多項式が求まり、実装に必要なデジタルフィルタの係数が得られる。1-poleくらいなら手計算してもいいが、2-poleになるとしんどいので面倒なことはPython (の数式処理ライブラリであるSymPy) にやらせよう。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;コード &amp;lt;a href=&amp;#34;/filter_coeff.py&amp;#34;&amp;gt;filter_coeff.py&amp;lt;/a&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre tabindex=&amp;#34;0&amp;#34; style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-py&amp;#34; data-lang=&amp;#34;py&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;# requires version &amp;amp;#39;1.7.1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;from&amp;lt;/span&amp;gt; sympy &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;
s &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; Symbol(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#39;s&amp;amp;#39;&amp;lt;/span&amp;gt;)
z &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; Symbol(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#39;z&amp;amp;#39;&amp;lt;/span&amp;gt;)
Q &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; Symbol(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#39;Q&amp;amp;#39;&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;# resonance&amp;lt;/span&amp;gt;
T &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; Symbol(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#39;T&amp;amp;#39;&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;# sampling interval&amp;lt;/span&amp;gt;
w0 &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; Symbol(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#39;w0&amp;amp;#39;&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;# cutoff freq&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;# z2s = 2 / T * (z - 1) / (z + 1)&amp;lt;/span&amp;gt;
s2z &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; T &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; (z &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;-&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; (z &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;def&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;print_coeff&amp;lt;/span&amp;gt;(hs):
hz &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; simplify(hs&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;.&amp;lt;/span&amp;gt;subs(s, s2z)) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;# Z transform&amp;lt;/span&amp;gt;
npole &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; degree(denom(hs), s)
print(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;=== Transfer function ===&amp;amp;#34;&amp;lt;/span&amp;gt;)
print(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;H(s) =&amp;amp;#34;&amp;lt;/span&amp;gt;, hs) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;# transfer function in Laplace domain&amp;lt;/span&amp;gt;
print(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;H(z) =&amp;amp;#34;&amp;lt;/span&amp;gt;, hz) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;# transfer function in Z domain&amp;lt;/span&amp;gt;
print(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;#pole =&amp;amp;#34;&amp;lt;/span&amp;gt;, npole)
print(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;=== Filter coeffients ===&amp;amp;#34;&amp;lt;/span&amp;gt;)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;# FIR coeff&amp;lt;/span&amp;gt;
dhz &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; collect(expand(denom(hz) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; z &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;**&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;-&amp;lt;/span&amp;gt;npole), z)
nhz &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; collect(expand(numer(hz) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; z &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;**&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;-&amp;lt;/span&amp;gt;npole), z)
a0 &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; dhz&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;.&amp;lt;/span&amp;gt;coeff(z, &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;# to normalize a0 = 1&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; i &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt; range(npole &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;):
print(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;b&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;{&amp;lt;/span&amp;gt;i&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;}&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt; =&amp;amp;#34;&amp;lt;/span&amp;gt;, nhz&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;.&amp;lt;/span&amp;gt;coeff(z, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;-&amp;lt;/span&amp;gt;i) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; a0)
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;# IIR coeff&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; i &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;in&amp;lt;/span&amp;gt; range(&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;, npole &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;):
print(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;a&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;{&amp;lt;/span&amp;gt;i&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;}&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt; =&amp;amp;#34;&amp;lt;/span&amp;gt;, dhz&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;.&amp;lt;/span&amp;gt;coeff(z, &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;-&amp;lt;/span&amp;gt;i) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; a0)
print(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Filter: 1-pole LPF&amp;amp;#34;&amp;lt;/span&amp;gt;)
print_coeff(hs &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; (s &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; w0 &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;))
print()
print(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Filter: 1-pole HPF&amp;amp;#34;&amp;lt;/span&amp;gt;)
print_coeff(hs &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; s &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; (s &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; w0))
print()
print(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Filter: 2-pole LPF&amp;amp;#34;&amp;lt;/span&amp;gt;)
print_coeff(hs &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; (s&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;**&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; w0&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;**&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; s &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; w0 &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; Q &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;))
print()
print(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Filter: 2-pole HPF&amp;amp;#34;&amp;lt;/span&amp;gt;)
print_coeff(hs &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; (s&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;**&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; w0&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;**&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; (s&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;**&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; w0&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;**&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; s &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; w0 &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; Q &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;))
print()
print(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Filter: 2-pole BPF&amp;amp;#34;&amp;lt;/span&amp;gt;)
print_coeff(hs &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; (s &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; w0 &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; Q) &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; (s&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;**&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; w0&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;**&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;2&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; s &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; w0 &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;/&amp;lt;/span&amp;gt; Q &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;+&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;結果 &amp;lt;a href=&amp;#34;/filter_coeff.txt&amp;#34;&amp;gt;filter_coeff.txt&amp;lt;/a&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre tabindex=&amp;#34;0&amp;#34; style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-txt&amp;#34; data-lang=&amp;#34;txt&amp;#34;&amp;gt;Filter: 1-pole LPF
=== Transfer function ===
H(s) = 1/(s/w0 + 1)
H(z) = T*w0*(z + 1)/(T*w0*(z + 1) + 2*z - 2)
#pole = 1
=== Filter coeffients ===
b0 = T*w0/(T*w0 + 2)
b1 = T*w0/(T*w0 + 2)
a1 = (T*w0 - 2)/(T*w0 + 2)
Filter: 1-pole HPF
=== Transfer function ===
H(s) = s/(s + w0)
H(z) = 2*(z - 1)/(T*w0*(z + 1) + 2*z - 2)
#pole = 1
=== Filter coeffients ===
b0 = 2/(T*w0 + 2)
b1 = -2/(T*w0 + 2)
a1 = (T*w0 - 2)/(T*w0 + 2)
Filter: 2-pole LPF
=== Transfer function ===
H(s) = 1/(s**2/w0**2 + 1 + s/(Q*w0))
H(z) = Q*T**2*w0**2*(z + 1)**2/(Q*T**2*w0**2*(z + 1)**2 + 4*Q*(z - 1)**2 + 2*T*w0*(z - 1)*(z + 1))
#pole = 2
=== Filter coeffients ===
b0 = Q*T**2*w0**2/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
b1 = 2*Q*T**2*w0**2/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
b2 = Q*T**2*w0**2/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
a1 = (2*Q*T**2*w0**2 - 8*Q)/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
a2 = (Q*T**2*w0**2 + 4*Q - 2*T*w0)/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
Filter: 2-pole HPF
=== Transfer function ===
H(s) = s**2/(w0**2*(s**2/w0**2 + 1 + s/(Q*w0)))
H(z) = 4*Q*(z - 1)**2/(Q*T**2*w0**2*(z + 1)**2 + 4*Q*(z - 1)**2 + 2*T*w0*(z - 1)*(z + 1))
#pole = 2
=== Filter coeffients ===
b0 = 4*Q/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
b1 = -8*Q/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
b2 = 4*Q/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
a1 = (2*Q*T**2*w0**2 - 8*Q)/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
a2 = (Q*T**2*w0**2 + 4*Q - 2*T*w0)/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
Filter: 2-pole BPF
=== Transfer function ===
H(s) = s/(Q*w0*(s**2/w0**2 + 1 + s/(Q*w0)))
H(z) = 2*T*w0*(z - 1)*(z + 1)/(Q*T**2*w0**2*(z + 1)**2 + 4*Q*(z - 1)**2 + 2*T*w0*(z - 1)*(z + 1))
#pole = 2
=== Filter coeffients ===
b0 = 2*T*w0/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
b1 = 0
b2 = -2*T*w0/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
a1 = (2*Q*T**2*w0**2 - 8*Q)/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
a2 = (Q*T**2*w0**2 + 4*Q - 2*T*w0)/(Q*T**2*w0**2 + 4*Q + 2*T*w0)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;ある程度、展開できればいいやと思ってたが、完全に自動化できると思ってなかった&amp;amp;hellip;。ちなみに古いバージョンのsympyでやるとうまくいかないので注意。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;メモ疑問&amp;#34;&amp;gt;メモ・疑問&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;リアルタイム性は犠牲になるが、位相が変化しない線形位相フィルタとはどういうものか&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;MoogやTB303に搭載されるアナログLPFは、ここでとりあげたButterworthとは異なる (&amp;lt;a href=&amp;#34;https://github.com/klknn/synth2/blob/c3d06e87b10fe31e6b68d060b1e5c8788f383d9d/tool/filter_coeff.py#L62-L73&amp;#34;&amp;gt;コード&amp;lt;/a&amp;gt;)。アナログ回路面からも、どのようにして設計されるか考察したい。&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;1-pole フィルタはレゾナンスをもたない?&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;全く周波数を変化しない代わりに周波数ごとの位相を変える All Pass Filterというものがある。周波数ごとに音の遅れ方を変えたいリバーブなどで使う&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;より一般化されたButterworth filter自体の定義とは?私にはまだN-poleのLPFとかがどういう形なのか完全に理解できてない&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;</content></entry><entry><title>Zig 入門</title><link href="https://klknn.github.io/posts/zig/"/><id>https://klknn.github.io/posts/zig/</id><published>2020-07-11T21:39:11+0900</published><updated>2020-07-11T21:39:11+0900</updated><summary type="html">最近システム系の言語として、Cコンパイラを内蔵したり話題になっている zig 言語。簡単なプログラムを書きながら入門しています。仕様はミニマルな感じですが、なかなかユニークな言語です。 現時点で最新の0.6.0を想定。公式にドキュメントがない部分も多いので今後変わる可能性が高い。この辺は新参の言語ということで愛嬌だが、RustやD言語のようなレベルを想定すると驚く。ただ一貫した思想のあるミニマリストな言語なので意外となんとかなる。 初期設定 公式サイト からビルド済みバイナリをDLしてパスを通すだけ。CPUはx86と各種arm系、OSはlinuxにwindows、freebsdもあるすごい。 wget https://ziglang.org/download/0.6.0/zig-linux-x86_64-0.6.0.tar.xz tar xvf zig-linux-x86_64-0.6.0.tar.xz export PATH=$(pwd)/zig-linux-x86_64-0.6.0:$PATH 同じ...</summary><content type="html">
&amp;lt;p&amp;gt;
最近システム系の言語として、Cコンパイラを内蔵したり話題になっている zig 言語。簡単なプログラムを書きながら入門しています。仕様はミニマルな感じですが、なかなかユニークな言語です。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
現時点で最新の0.6.0を想定。公式にドキュメントがない部分も多いので今後変わる可能性が高い。この辺は新参の言語ということで愛嬌だが、RustやD言語のようなレベルを想定すると驚く。ただ一貫した思想のあるミニマリストな言語なので意外となんとかなる。&amp;lt;/p&amp;gt;
&amp;lt;div id=&amp;#34;outline-container-headline-1&amp;#34; class=&amp;#34;outline-2&amp;#34;&amp;gt;
&amp;lt;h2 id=&amp;#34;headline-1&amp;#34;&amp;gt;
初期設定
&amp;lt;/h2&amp;gt;
&amp;lt;div id=&amp;#34;outline-text-headline-1&amp;#34; class=&amp;#34;outline-text-2&amp;#34;&amp;gt;
&amp;lt;p&amp;gt;
&amp;lt;a href=&amp;#34;https://ziglang.org/download/&amp;#34;&amp;gt;公式サイト&amp;lt;/a&amp;gt; からビルド済みバイナリをDLしてパスを通すだけ。CPUはx86と各種arm系、OSはlinuxにwindows、freebsdもあるすごい。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;src src-bash&amp;#34;&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre tabindex=&amp;#34;0&amp;#34; style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;wget https://ziglang.org/download/0.6.0/zig-linux-x86_64-0.6.0.tar.xz
tar xvf zig-linux-x86_64-0.6.0.tar.xz
export PATH&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;$(&amp;lt;/span&amp;gt;pwd&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;)&amp;lt;/span&amp;gt;/zig-linux-x86_64-0.6.0:$PATH&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;
同じページに &amp;lt;a href=&amp;#34;https://ziglang.org/documentation/0.6.0&amp;#34;&amp;gt;Language Reference&amp;lt;/a&amp;gt; と &amp;lt;a href=&amp;#34;https://ziglang.org/documentation/0.6.0/std&amp;#34;&amp;gt;Standard Library Documentation&amp;lt;/a&amp;gt; がある。これらと github のコードがほぼ全ての情報源である。とりあえず最初の Hello world くらいはやっとくと雰囲気つかめる。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
エディタがLSPに対応していれば &amp;lt;a href=&amp;#34;https://github.com/zigtools/zls&amp;#34;&amp;gt;zls&amp;lt;/a&amp;gt; をいれると定義元にジャンプしたりドキュメント読んだり、はかどります。 &amp;lt;code&amp;gt;zig fmt&amp;lt;/code&amp;gt; というコマンドでフォーマットできるのですが、若干クセがあり、例えば構造体などの最後の要素に &amp;amp;#34;,&amp;amp;#34; がないと一行にフォーマットされる挙動に最初戸惑いました。このへんの挙動は &amp;lt;a href=&amp;#34;https://github.com/ziglang/zig/blob/d21a1922eb5d76b9b0d0611eaeb42c91f83234ab/std/zig/parser_test.zig&amp;#34;&amp;gt;このテスト群&amp;lt;/a&amp;gt; を見ればわかります。&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;#34;outline-container-headline-2&amp;#34; class=&amp;#34;outline-2&amp;#34;&amp;gt;
&amp;lt;h2 id=&amp;#34;headline-2&amp;#34;&amp;gt;
プロジェクト作成
&amp;lt;/h2&amp;gt;
&amp;lt;div id=&amp;#34;outline-text-headline-2&amp;#34; class=&amp;#34;outline-text-2&amp;#34;&amp;gt;
&amp;lt;p&amp;gt;
まずは簡単なプロジェクトの作成から。本稿の情報はまったくドキュメントがなく、全部 &amp;lt;a href=&amp;#34;https://github.com/ziglang/zig/blob/0.6.0/lib/std/build.zig&amp;#34;&amp;gt;build.zig&amp;lt;/a&amp;gt; を読んで得たもので、間違っているかもしれない。&amp;lt;/p&amp;gt;
&amp;lt;div id=&amp;#34;outline-container-headline-3&amp;#34; class=&amp;#34;outline-3&amp;#34;&amp;gt;
&amp;lt;h3 id=&amp;#34;headline-3&amp;#34;&amp;gt;
プロジェクト雛形の作成
&amp;lt;/h3&amp;gt;
&amp;lt;div id=&amp;#34;outline-text-headline-3&amp;#34; class=&amp;#34;outline-text-3&amp;#34;&amp;gt;
&amp;lt;div class=&amp;#34;src src-bash&amp;#34;&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre tabindex=&amp;#34;0&amp;#34; style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;mkdir foo
cd foo
zig init-exe&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;ライブラリを作るときは &amp;lt;code&amp;gt;init-lib&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
これでこんなファイルが生成される&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;src src-c&amp;#34;&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre tabindex=&amp;#34;0&amp;#34; style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-c&amp;#34; data-lang=&amp;#34;c&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; Builder &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#960050;background-color:#1e0010&amp;#34;&amp;gt;@&amp;lt;/span&amp;gt;import(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;std&amp;amp;#34;&amp;lt;/span&amp;gt;).build.Builder;
pub fn &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;build&amp;lt;/span&amp;gt;(b: &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;Builder) &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;void&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Standard target options allows the person running `zig build` to choose
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// what target to build for. Here we do not override the defaults, which
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// means any target is allowed, and the default is native. Other options
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// for restricting supported target set are available.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; target &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; b.standardTargetOptions(.{});
&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// Standard release options allow the person running `zig build` to select
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// between Debug, ReleaseSafe, ReleaseFast, and ReleaseSmall.
&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; mode &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; b.standardReleaseOptions();
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; exe &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; b.addExecutable(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;foo&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;src/main.zig&amp;amp;#34;&amp;lt;/span&amp;gt;);
exe.setTarget(target);
exe.setBuildMode(mode);
exe.install();
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; run_cmd &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; exe.run();
run_cmd.step.dependOn(b.getInstallStep());
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; run_step &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; b.step(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;run&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Run the app&amp;amp;#34;&amp;lt;/span&amp;gt;);
run_step.dependOn(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;run_cmd.step);
}&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;#34;outline-container-headline-4&amp;#34; class=&amp;#34;outline-3&amp;#34;&amp;gt;
&amp;lt;h3 id=&amp;#34;headline-4&amp;#34;&amp;gt;
システムライブラリの追加
&amp;lt;/h3&amp;gt;
&amp;lt;div id=&amp;#34;outline-text-headline-4&amp;#34; class=&amp;#34;outline-text-3&amp;#34;&amp;gt;
&amp;lt;p&amp;gt;
たぶん普通のアプリをかくなら malloc とかで libc は必要。この辺、デフォルトで何もついてないのが真のシステム用言語という感じがしますね。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;src src-c&amp;#34;&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre tabindex=&amp;#34;0&amp;#34; style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-c&amp;#34; data-lang=&amp;#34;c&amp;#34;&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; exe &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; b.addExecutable(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;foo&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;src/main.zig&amp;amp;#34;&amp;lt;/span&amp;gt;);
exe.setTarget(target);
exe.setBuildMode(mode);
exe.linkSystemLibrary(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;c&amp;amp;#34;&amp;lt;/span&amp;gt;); &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// -lc がビルドオプションに追加される
&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;
コマンドラインから &amp;lt;code&amp;gt;zig build run&amp;lt;/code&amp;gt; で実行。&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;#34;outline-container-headline-5&amp;#34; class=&amp;#34;outline-2&amp;#34;&amp;gt;
&amp;lt;h2 id=&amp;#34;headline-5&amp;#34;&amp;gt;
テスト作成
&amp;lt;/h2&amp;gt;
&amp;lt;div id=&amp;#34;outline-text-headline-5&amp;#34; class=&amp;#34;outline-text-2&amp;#34;&amp;gt;
&amp;lt;div id=&amp;#34;outline-container-headline-6&amp;#34; class=&amp;#34;outline-3&amp;#34;&amp;gt;
&amp;lt;h3 id=&amp;#34;headline-6&amp;#34;&amp;gt;
test ブロック
&amp;lt;/h3&amp;gt;
&amp;lt;div id=&amp;#34;outline-text-headline-6&amp;#34; class=&amp;#34;outline-text-3&amp;#34;&amp;gt;
&amp;lt;p&amp;gt;
D言語みたいにテスト用の構文がある。これはとても便利で、REPL的に使って言語の確認をしたり便利。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;src src-c&amp;#34;&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre tabindex=&amp;#34;0&amp;#34; style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-c&amp;#34; data-lang=&amp;#34;c&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; std &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#960050;background-color:#1e0010&amp;#34;&amp;gt;@&amp;lt;/span&amp;gt;import(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;std&amp;amp;#34;&amp;lt;/span&amp;gt;);
fn &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;() {
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;;
}
test &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;f&amp;amp;#34;&amp;lt;/span&amp;gt; {
std.debug.assert(f() &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;==&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ae81ff&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt;);
}&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;#34;outline-container-headline-7&amp;#34; class=&amp;#34;outline-3&amp;#34;&amp;gt;
&amp;lt;h3 id=&amp;#34;headline-7&amp;#34;&amp;gt;
build.zig に テストの追加
&amp;lt;/h3&amp;gt;
&amp;lt;div id=&amp;#34;outline-text-headline-7&amp;#34; class=&amp;#34;outline-text-3&amp;#34;&amp;gt;
&amp;lt;p&amp;gt;
正直、これで良いのかわかっていませんが、動いている・ちゃんと失敗するのでとりあえず。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;src src-c&amp;#34;&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre tabindex=&amp;#34;0&amp;#34; style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-c&amp;#34; data-lang=&amp;#34;c&amp;#34;&amp;gt; &amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; test_step &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; b.step(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;test&amp;amp;#34;&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;Test the app&amp;amp;#34;&amp;lt;/span&amp;gt;);
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;const&amp;lt;/span&amp;gt; main_test &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; b.addTest(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;src/main.zig&amp;amp;#34;&amp;lt;/span&amp;gt;);
main_test.linkSystemLibrary(&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;c&amp;amp;#34;&amp;lt;/span&amp;gt;);
test_step.dependOn(&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;&amp;amp;amp;&amp;lt;/span&amp;gt;main_test.step); &amp;lt;span style=&amp;#34;color:#75715e&amp;#34;&amp;gt;// 同じように複数ファイル追加も可能
&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;さっしの通り &amp;lt;code&amp;gt;b.step(コマンド名, 説明)&amp;lt;/code&amp;gt; で定義したコマンドを &amp;lt;code&amp;gt;zig build コマンド名&amp;lt;/code&amp;gt; で動かせるようだ。かなり汎用。&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;#34;outline-container-headline-8&amp;#34; class=&amp;#34;outline-2&amp;#34;&amp;gt;
&amp;lt;h2 id=&amp;#34;headline-8&amp;#34;&amp;gt;
余談
&amp;lt;/h2&amp;gt;
&amp;lt;div id=&amp;#34;outline-text-headline-8&amp;#34; class=&amp;#34;outline-text-2&amp;#34;&amp;gt;
&amp;lt;div id=&amp;#34;outline-container-headline-9&amp;#34; class=&amp;#34;outline-3&amp;#34;&amp;gt;
&amp;lt;h3 id=&amp;#34;headline-9&amp;#34;&amp;gt;
良いと思った言語機能
&amp;lt;/h3&amp;gt;
&amp;lt;div id=&amp;#34;outline-text-headline-9&amp;#34; class=&amp;#34;outline-text-3&amp;#34;&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;全部明示的に書く思想が読みやすい。dtorの代わりにdefer、例外の代わりにerror union、overloadなし、という潔さ。&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;構文が簡単。&amp;lt;a href=&amp;#34;https://github.com/ziglang/zig-spec/blob/master/grammar/grammar.y&amp;#34;&amp;gt;yaccで500行&amp;lt;/a&amp;gt;というミニマルさ。&amp;lt;a href=&amp;#34;https://github.com/ruby/ruby/blob/v2_7_1/parse.y&amp;#34;&amp;gt;Rubyのparse.y&amp;lt;/a&amp;gt;とかと比べるとすごい。&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;union(enum)&amp;lt;/code&amp;gt; タグ付きユニオンというやつ。システム系でよくあるパターンを楽に。&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;値にできそうなものは全部値になってる。名前空間とか型情報とかも値。&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;いろんな構文が式で結果を返してくれるところ。短くかける。&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;関数の引数が値か参照かはコンパイラが決める。デフォルトでimmutableだとこういうのがいい。&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;言語機能のoptional型 &amp;lt;code&amp;gt;?T&amp;lt;/code&amp;gt; 。ポインタのoptionalはポインタと同じサイズになるのも嬉しい。&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;言語機能のerror union型。スタックトレースでるので実質例外だと思うけど、共有体として Eitherみたいな if/else や switch もできて文法的に便利。&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;上に関連して &amp;lt;code&amp;gt;!T&amp;lt;/code&amp;gt; や &amp;lt;code&amp;gt;try&amp;lt;/code&amp;gt; 式で、明示的にerrorやoptional投げるところがわかる。。&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;defer&amp;lt;/code&amp;gt; D言語でいう &amp;lt;code&amp;gt;scope(exit)&amp;lt;/code&amp;gt; で、初期化と最終化を並べてかける。&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;WASMをサポートしているところ。そのせいでallocatorとかに依存できない標準ライブラリが結構渋いが。&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;多機能な async/await 構文がある。初見では、なぜここまで多機能なのかわからなかったが、coroutineをやりたいのだろうか。&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;でも変なところもある、for 文が配列専用で、while文が従来のfor文みたいな役割になってるのは慣れない。&amp;lt;a href=&amp;#34;https://ziglang.org/documentation/0.6.0/#Style-Guide&amp;#34;&amp;gt;公式のコーディングスタイル&amp;lt;/a&amp;gt;も独特である(変数と名前空間はsnake_case、関数はcamelCase、型と型関数はTitleCase)。とはいえ慣れの問題といえばそう。&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;#34;outline-container-headline-10&amp;#34; class=&amp;#34;outline-3&amp;#34;&amp;gt;
&amp;lt;h3 id=&amp;#34;headline-10&amp;#34;&amp;gt;
今後
&amp;lt;/h3&amp;gt;
&amp;lt;div id=&amp;#34;outline-text-headline-10&amp;#34; class=&amp;#34;outline-text-3&amp;#34;&amp;gt;
&amp;lt;p&amp;gt;
勉強用に、とりあえず小さいJVMみたいなやつ書いてます。CIとかも設定してる。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
&amp;lt;a href=&amp;#34;https://github.com/klknn/zigjvm&amp;#34;&amp;gt;https://github.com/klknn/zigjvm&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
今後、とりあえずCとの連携とか調べて、BLASとか数値計算用のライブラリでも作ろうかな。それかvector型があるのでそれを試すか。&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;</content></entry><entry><title>BT ワークフローを加速する7つの秘訣</title><link href="https://klknn.github.io/posts/bt-workflow/"/><id>https://klknn.github.io/posts/bt-workflow/</id><published>2020-07-10T16:19:42+0900</published><updated>2020-07-10T16:19:42+0900</updated><summary type="html">私、ミュージシャンの中でBTが一番好きで尊敬しているのですが、 https://bt-music.lpages.co/freebies/ 上記のサイトでいろんなTIPSや音源を配っていて勉強になります。なかでも &amp;amp;ldquo;BT&amp;amp;rsquo;s 7 Secrets to Accelerate Your Workflow&amp;amp;rdquo; というPDFが良いです。私の記事はただの感想で、内容をかなり端折ってるのでぜひ原文を入手してください（無料なので）。 Stream Deck https://www.amazon.co.jp/dp/B06W2KLM3S ショートカットとか登録できるコントローラですね。アイコンとかアサインできてOBS系の配信ソフトで使われているガジェットらしい。BTはemail, DAW, SNSとかあらゆるアプリを登録して使ってるらしいです。とくに複数DAWの同じ機能を同じキーに割り当てられるのが超便利とのこと。 フォルダの整理 「より整理すれば、より素晴らしい音楽を書け...</summary><content type="html">&amp;lt;p&amp;gt;私、ミュージシャンの中でBTが一番好きで尊敬しているのですが、&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://bt-music.lpages.co/freebies/&amp;#34;&amp;gt;https://bt-music.lpages.co/freebies/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;上記のサイトでいろんなTIPSや音源を配っていて勉強になります。なかでも &amp;amp;ldquo;BT&amp;amp;rsquo;s 7 Secrets to Accelerate Your Workflow&amp;amp;rdquo; というPDFが良いです。私の記事はただの感想で、内容をかなり端折ってるのでぜひ原文を入手してください（無料なので）。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;stream-deck&amp;#34;&amp;gt;Stream Deck&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://www.amazon.co.jp/dp/B06W2KLM3S&amp;#34;&amp;gt;https://www.amazon.co.jp/dp/B06W2KLM3S&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;ショートカットとか登録できるコントローラですね。アイコンとかアサインできてOBS系の配信ソフトで使われているガジェットらしい。BTはemail, DAW, SNSとかあらゆるアプリを登録して使ってるらしいです。とくに複数DAWの同じ機能を同じキーに割り当てられるのが超便利とのこと。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;フォルダの整理&amp;#34;&amp;gt;フォルダの整理&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;「より整理すれば、より素晴らしい音楽を書ける」とのことです。耳が痛いですが、プログラマ的なBTの思考です。彼のレクチャー(そういうサービスやってるの初めて知った)では、フォルダ整理術を深く掘り下げるらしいです。かなり気になる。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;とりあえず出発地点として、「曲名」をフォルダ名とかDAWとかで最初に設定するのがしんどいと思うのですが、とりあえず「テンポとキー」を曲名にしてるそうです、たとえば「124 Eb」みたいな。その下に「Sessions」という実際のDAW関連のファイル置き場、「Materials」というその他の素材やメモを置くそうです。あとから振り返りやすいし良いですね。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;バージョン管理&amp;#34;&amp;gt;バージョン管理&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;CubaseとかLogicにはそういう機能があるので使うべしということです。私は使ったことがなかったです。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://www.soundonsound.com/techniques/cubases-track-versions&amp;#34;&amp;gt;https://www.soundonsound.com/techniques/cubases-track-versions&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;たしかにすぐ切り替えれるし、A/Bテスト的なのやりやすそう。そういう機能がない場合は普通に「Versions」というフォルダを作って複数のプロジェクトファイルを保存。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;書いてないけど、推測するに、彼は一回オーディオ化したMIDIとか、不要なトラックを全部整理して消すんじゃないかなと思います。目の前に必要なものだけ並べて、あとから必要になったら取り出せばいいという精神。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;ステムを書き出す&amp;#34;&amp;gt;ステムを書き出す&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;「 &amp;lt;strong&amp;gt;どんな音でも&amp;lt;/strong&amp;gt; ステムでマスタリングするほうが、ステレオからやるより良い。」そうです。ちなみにステムとは一般的にドラムとかボーカルとか大まかな単位でまとめて、複数本のWAVにミックスしたものです。ステレオは一旦マキシマイザーとか無しで一本のWAVに落とすやつです。とくに映画音楽では、映像で調整するのでステムでの提出が必須らしく、慣れた方が良いですね。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;トラック名もわかりやすくしましょうとのことです。最近BTのremixコンテストでステムを実際に見る機会があったのですが、こんな感じでした:&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;#34;/posts/stems.png&amp;#34; alt=&amp;#34;stems.png&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;ステムを作るとRemix用のデータとしてすぐ渡せるオマケ効果もあるとのこと。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;寝る前にtodoをメモ&amp;#34;&amp;gt;寝る前にTODOをメモ&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;夜遅くまで曲を作っていると眠れなくなりますよね。そんなときは、「ああ２つめのドロップにハイパス書けなきゃ」とか考えていることを全部メモしておく。もう書いたから考えなくても大丈夫！と思えば脳は休めるらしいです。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://www.amazon.co.jp/gp/product/8883701003&amp;#34;&amp;gt;https://www.amazon.co.jp/gp/product/8883701003&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;ちなみにBTは普段このメモ帳を使ってるらしいです、日本でも売ってた。たぶんスマホとかは眠りにくくなるから、紙でメモとるのいいなと思った。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;新しいキーコマンドを学ぶ&amp;#34;&amp;gt;新しいキーコマンドを学ぶ&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;休日、フローに入れず集中できない、そんなときは、できることからやってみる。とくにスキルセットを積もう。なんなら集中してフローに入ってるときですら、週一くらいで何かやってほうがいい。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;(フローって黒子のバスケのあれみたいな感じ？)&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;例えば、DAWやプラグイン、ハードウェアのマニュアルを読む時間を作ろう（たしかに集中力はいらないし、めっちゃ制作に役立つ）。新しいことを試して、記憶に新しい機能として取り込む、あたらしいキーコマンドを学ぶ。そういったことがあとで「フロー」に入ったときに効いてくる。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;覚えて欲しいこととして、「絶対に作曲中はYoutubeに近づくな」。なぜならキーコマンドやショートカットを忘れてしまうから（笑）。「オフの日は勉強しろ」とのことです。最良の探求がプロデューサを形作るそうです。&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;dropboxか似たようなやつ&amp;#34;&amp;gt;Dropboxか、似たようなやつ&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;毎日バージョン管理してる曲とかWIP(やりかけ)のMP3とかをdropboxにあげてるそうです。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;そんで Airpods Pro (BT: なぜこういうやつ嫌いだったんだろう、スゴイよこれ) で散歩中とか、ジムで運動してるとき、原っぱで寝てるとき、とにかく違う環境で聴く。そうやって視点を持ち上げることで、数え切れないほどの「アハ体験」をしてきたとのこと。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;そういえば冨田恵一とかもとりあえず曲できたら、車に乗って客観的に聞き直すとかサンレコの動画でいってましたね。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://youtu.be/Jzj0TNFlYJw?t=390&amp;#34;&amp;gt;https://youtu.be/Jzj0TNFlYJw?t=390&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</content></entry><entry><title>hugo の初期設定</title><link href="https://klknn.github.io/posts/hugo-setup/"/><id>https://klknn.github.io/posts/hugo-setup/</id><published>2020-07-07T17:36:28+0900</published><updated>2020-07-07T17:36:28+0900</updated><summary type="html">hugo 1 を始めた。これまでhatenaとかwordpress使ってきたけど、毎回使い勝手が変わってたり忘れてたりする。hugoならmarkdownやorg-modeでかけるので忘れることはないし、自分で全部管理する感じが良い。 いまどきブログなんて流行らないだろうけど、逆に今時cssもほとんどないサイトって懐かしくていいなと。たまたまHTMLだけのすごくシンプルな雛形 2 を見ながら書きました。唯一 &amp;amp;lt;table&amp;amp;gt; タグだけイマイチなのでcss書いた。とりあえず数行の css と js なので全部 layouts/_default/baseof.html に突っ込んでいます。こういうので良いと思い始めた。真似したい人は layouts 以下をまるごとコピーして config.toml の中身 baseURL = &amp;amp;#34;https://klknn.github.io/&amp;amp;#34; languageCode = &amp;amp;#34;ja&amp;amp;#34; title = &amp;amp;#34;klknn log&amp;amp;#34; [params] author = &amp;amp;#34;klknn&amp;amp;#34; editURL = &amp;amp;#34;https://github.com/klknn/klknn.github.io/edit/develop/content&amp;amp;#34; を適...</summary><content type="html">&amp;lt;p&amp;gt;
hugo &amp;lt;sup class=&amp;#34;footnote-reference&amp;#34;&amp;gt;&amp;lt;a id=&amp;#34;footnote-reference-1&amp;#34; href=&amp;#34;#footnote-1&amp;#34;&amp;gt;1&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt; を始めた。これまでhatenaとかwordpress使ってきたけど、毎回使い勝手が変わってたり忘れてたりする。hugoならmarkdownやorg-modeでかけるので忘れることはないし、自分で全部管理する感じが良い。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
いまどきブログなんて流行らないだろうけど、逆に今時cssもほとんどないサイトって懐かしくていいなと。たまたまHTMLだけのすごくシンプルな雛形 &amp;lt;sup class=&amp;#34;footnote-reference&amp;#34;&amp;gt;&amp;lt;a id=&amp;#34;footnote-reference-2&amp;#34; href=&amp;#34;#footnote-2&amp;#34;&amp;gt;2&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt; を見ながら書きました。唯一 &amp;lt;code&amp;gt;&amp;amp;lt;table&amp;amp;gt;&amp;lt;/code&amp;gt; タグだけイマイチなのでcss書いた。とりあえず数行の css と js なので全部 &amp;lt;a href=&amp;#34;https://github.com/klknn/klknn.github.io/blob/6d58363642f64cc775b023eb1b79e06734407828/layouts/_default/baseof.html#L6-L28&amp;#34;&amp;gt;layouts/_default/baseof.html&amp;lt;/a&amp;gt; に突っ込んでいます。こういうので良いと思い始めた。真似したい人は layouts 以下をまるごとコピーして config.toml の中身&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;src src-toml&amp;#34;&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre tabindex=&amp;#34;0&amp;#34; style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-toml&amp;#34; data-lang=&amp;#34;toml&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;baseURL&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;https://klknn.github.io/&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;languageCode&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;ja&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;title&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;klknn log&amp;amp;#34;&amp;lt;/span&amp;gt;
[&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;params&amp;lt;/span&amp;gt;]
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;author&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;klknn&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;editURL&amp;lt;/span&amp;gt; = &amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;https://github.com/klknn/klknn.github.io/edit/develop/content&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;を適宜かきかえると良いです。ちなみに書いてある author をテンプレート html 内でアクセスしたいときは
&amp;lt;code&amp;gt;{{ .Site.Params.Author }}&amp;lt;/code&amp;gt;
で取得できます(org, mdではできない?)。ハードコードしたくない値は全部 config.toml にぶち込む運用です。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
ちなみに手元のPC (192.168.0.13) で編集中のサイトを、同じネットワーク上のスマホから見るには以下のようにhugo起動して、スマホから &amp;lt;a href=&amp;#34;http://192.168.0.13:1313&amp;#34;&amp;gt;http://192.168.0.13:1313&amp;lt;/a&amp;gt; を表示します&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;src src-bash&amp;#34;&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre tabindex=&amp;#34;0&amp;#34; style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;hugo serve -D --bind 192.168.0.13 --baseURL&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;http://192.168.0.13&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;とくにcssもないし、とくにレスポンシブでもないので醜いですが。とりあえずGoogleのブログ &amp;lt;sup class=&amp;#34;footnote-reference&amp;#34;&amp;gt;&amp;lt;a id=&amp;#34;footnote-reference-3&amp;#34; href=&amp;#34;#footnote-3&amp;#34;&amp;gt;3&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt; にあった&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;src src-html&amp;#34;&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre tabindex=&amp;#34;0&amp;#34; style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-html&amp;#34; data-lang=&amp;#34;html&amp;#34;&amp;gt;&amp;amp;lt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;meta&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;name&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;viewport&amp;amp;#34;&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;content&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#e6db74&amp;#34;&amp;gt;&amp;amp;#34;width=device-width, initial-scale=1&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;は入れておいたので多少マシかと思いますが、深追いしないでおこうと思います。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
今後、とりあえずgithubにホストしているので何かコード書くときとかについでにチラシの裏的なことを書こうかと。&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;footnotes&amp;#34;&amp;gt;
&amp;lt;hr class=&amp;#34;footnotes-separatator&amp;#34;&amp;gt;
&amp;lt;div class=&amp;#34;footnote-definitions&amp;#34;&amp;gt;
&amp;lt;div class=&amp;#34;footnote-definition&amp;#34;&amp;gt;
&amp;lt;sup id=&amp;#34;footnote-1&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;#footnote-reference-1&amp;#34;&amp;gt;1&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;
&amp;lt;div class=&amp;#34;footnote-body&amp;#34;&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://gohugo.io/&amp;#34;&amp;gt;https://gohugo.io/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;#34;footnote-definition&amp;#34;&amp;gt;
&amp;lt;sup id=&amp;#34;footnote-2&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;#footnote-reference-2&amp;#34;&amp;gt;2&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;
&amp;lt;div class=&amp;#34;footnote-body&amp;#34;&amp;gt;
&amp;lt;p&amp;gt;Hugoで1からテーマを作ってGitHub Pagesにデプロイする &amp;lt;a href=&amp;#34;https://www.membersedge.co.jp/blog/create-hugo-theme-and-deploy-to-github-pages/&amp;#34;&amp;gt;https://www.membersedge.co.jp/blog/create-hugo-theme-and-deploy-to-github-pages/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;#34;footnote-definition&amp;#34;&amp;gt;
&amp;lt;sup id=&amp;#34;footnote-3&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;#footnote-reference-3&amp;#34;&amp;gt;3&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;
&amp;lt;div class=&amp;#34;footnote-body&amp;#34;&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://developers.google.com/web/fundamentals/design-and-ux/responsive?hl=ja&amp;#34;&amp;gt;https://developers.google.com/web/fundamentals/design-and-ux/responsive?hl=ja&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;</content></entry><entry><title>Markdown examples</title><link href="https://klknn.github.io/posts/hello/"/><id>https://klknn.github.io/posts/hello/</id><published>2020-07-07T14:24:12+0900</published><updated>2020-07-07T14:24:12+0900</updated><summary type="html">footnote hello1
caption for image.
code block def f(x): return x * x math \begin{align} \label{eq:sample} f(x) = x^2 \end{align}
table aaaaaaaa bb c 1 2 3 4 5 6 Eq. \eqref{eq:sample} $x^2$
this is footnote&amp;amp;#160;&amp;amp;#x21a9;&amp;amp;#xfe0e;
...</summary><content type="html">&amp;lt;h2 id=&amp;#34;footnote&amp;#34;&amp;gt;footnote&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;hello&amp;lt;sup id=&amp;#34;fnref:1&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;#fn:1&amp;#34; class=&amp;#34;footnote-ref&amp;#34; role=&amp;#34;doc-noteref&amp;#34;&amp;gt;1&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;#34;/emacs-company-dcd.png&amp;#34; alt=&amp;#34;emacs-company-dcd.png&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;figure&amp;gt;&amp;lt;img src=&amp;#34;/emacs-company-dcd.png&amp;#34;
alt=&amp;#34;caption for image.&amp;#34;/&amp;gt;&amp;lt;figcaption&amp;gt;
&amp;lt;p&amp;gt;caption for image.&amp;lt;/p&amp;gt;
&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;h2 id=&amp;#34;code-block&amp;#34;&amp;gt;code block&amp;lt;/h2&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre tabindex=&amp;#34;0&amp;#34; style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-python&amp;#34; data-lang=&amp;#34;python&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;def&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;(x):
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; x &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; x
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;math&amp;#34;&amp;gt;math&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;\begin{align}
\label{eq:sample}
f(x) = x^2
\end{align}&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;table&amp;#34;&amp;gt;table&amp;lt;/h2&amp;gt;
&amp;lt;table&amp;gt;
&amp;lt;thead&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;th style=&amp;#34;text-align:left&amp;#34;&amp;gt;aaaaaaaa&amp;lt;/th&amp;gt;
&amp;lt;th style=&amp;#34;text-align:right&amp;#34;&amp;gt;bb&amp;lt;/th&amp;gt;
&amp;lt;th style=&amp;#34;text-align:right&amp;#34;&amp;gt;c&amp;lt;/th&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/thead&amp;gt;
&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td style=&amp;#34;text-align:left&amp;#34;&amp;gt;1&amp;lt;/td&amp;gt;
&amp;lt;td style=&amp;#34;text-align:right&amp;#34;&amp;gt;2&amp;lt;/td&amp;gt;
&amp;lt;td style=&amp;#34;text-align:right&amp;#34;&amp;gt;3&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td style=&amp;#34;text-align:left&amp;#34;&amp;gt;4&amp;lt;/td&amp;gt;
&amp;lt;td style=&amp;#34;text-align:right&amp;#34;&amp;gt;5&amp;lt;/td&amp;gt;
&amp;lt;td style=&amp;#34;text-align:right&amp;#34;&amp;gt;6&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;p&amp;gt;Eq. \eqref{eq:sample} $x^2$&amp;lt;/p&amp;gt;
&amp;lt;section class=&amp;#34;footnotes&amp;#34; role=&amp;#34;doc-endnotes&amp;#34;&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li id=&amp;#34;fn:1&amp;#34; role=&amp;#34;doc-endnote&amp;#34;&amp;gt;
&amp;lt;p&amp;gt;this is footnote&amp;amp;#160;&amp;lt;a href=&amp;#34;#fnref:1&amp;#34; class=&amp;#34;footnote-backref&amp;#34; role=&amp;#34;doc-backlink&amp;#34;&amp;gt;&amp;amp;#x21a9;&amp;amp;#xfe0e;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;/section&amp;gt;</content></entry><entry><title>Org-mode examples</title><link href="https://klknn.github.io/posts/hello-org/"/><id>https://klknn.github.io/posts/hello-org/</id><published>2020-07-06T20:51:03+0900</published><updated>2020-07-06T20:51:03+0900</updated><summary type="html">org-mode usage in hugo....</summary><content type="html">
&amp;lt;p&amp;gt;
this page shows how to use org-mode in hugo.
see &amp;lt;a href=&amp;#34;/posts/hello&amp;#34;&amp;gt;/posts/hello&amp;lt;/a&amp;gt; for markdown usage.&amp;lt;/p&amp;gt;
&amp;lt;div id=&amp;#34;outline-container-headline-1&amp;#34; class=&amp;#34;outline-2&amp;#34;&amp;gt;
&amp;lt;h2 id=&amp;#34;headline-1&amp;#34;&amp;gt;
gist
&amp;lt;/h2&amp;gt;
&amp;lt;div id=&amp;#34;outline-text-headline-1&amp;#34; class=&amp;#34;outline-text-2&amp;#34;&amp;gt;
&amp;lt;p&amp;gt;
&amp;lt;script type=&amp;#34;application/javascript&amp;#34; src=&amp;#34;https://gist.github.com/spf13/7896402.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;#34;outline-container-headline-2&amp;#34; class=&amp;#34;outline-2&amp;#34;&amp;gt;
&amp;lt;h2 id=&amp;#34;headline-2&amp;#34;&amp;gt;
footnote
&amp;lt;/h2&amp;gt;
&amp;lt;div id=&amp;#34;outline-text-headline-2&amp;#34; class=&amp;#34;outline-text-2&amp;#34;&amp;gt;
&amp;lt;p&amp;gt;
hello &amp;lt;sup class=&amp;#34;footnote-reference&amp;#34;&amp;gt;&amp;lt;a id=&amp;#34;footnote-reference-1&amp;#34; href=&amp;#34;#footnote-1&amp;#34;&amp;gt;1&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt; &amp;lt;sup class=&amp;#34;footnote-reference&amp;#34;&amp;gt;&amp;lt;a id=&amp;#34;footnote-reference-2&amp;#34; href=&amp;#34;#footnote-2&amp;#34;&amp;gt;2&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
test &amp;lt;sup class=&amp;#34;footnote-reference&amp;#34;&amp;gt;&amp;lt;a id=&amp;#34;footnote-reference-2&amp;#34; href=&amp;#34;#footnote-2&amp;#34;&amp;gt;2&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;#34;outline-container-headline-3&amp;#34; class=&amp;#34;outline-2&amp;#34;&amp;gt;
&amp;lt;h2 id=&amp;#34;headline-3&amp;#34;&amp;gt;
image
&amp;lt;/h2&amp;gt;
&amp;lt;div id=&amp;#34;outline-text-headline-3&amp;#34; class=&amp;#34;outline-text-2&amp;#34;&amp;gt;
&amp;lt;p&amp;gt;
image&amp;lt;/p&amp;gt;
&amp;lt;figure&amp;gt;
&amp;lt;img src=&amp;#34;/emacs-company-dcd.png&amp;#34; alt=&amp;#34;/emacs-company-dcd.png&amp;#34; title=&amp;#34;/emacs-company-dcd.png&amp;#34; /&amp;gt;&amp;lt;figcaption&amp;gt;
Caption for image 1.
&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;#34;outline-container-headline-4&amp;#34; class=&amp;#34;outline-2&amp;#34;&amp;gt;
&amp;lt;h2 id=&amp;#34;headline-4&amp;#34;&amp;gt;
code block
&amp;lt;/h2&amp;gt;
&amp;lt;div id=&amp;#34;outline-text-headline-4&amp;#34; class=&amp;#34;outline-text-2&amp;#34;&amp;gt;
&amp;lt;div class=&amp;#34;src src-python&amp;#34;&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre tabindex=&amp;#34;0&amp;#34; style=&amp;#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-python&amp;#34; data-lang=&amp;#34;python&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;def&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#a6e22e&amp;#34;&amp;gt;f&amp;lt;/span&amp;gt;(x):
&amp;lt;span style=&amp;#34;color:#66d9ef&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; x &amp;lt;span style=&amp;#34;color:#f92672&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt; x&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;#34;outline-container-headline-5&amp;#34; class=&amp;#34;outline-2&amp;#34;&amp;gt;
&amp;lt;h2 id=&amp;#34;headline-5&amp;#34;&amp;gt;
math
&amp;lt;/h2&amp;gt;
&amp;lt;div id=&amp;#34;outline-text-headline-5&amp;#34; class=&amp;#34;outline-text-2&amp;#34;&amp;gt;
&amp;lt;p&amp;gt;\begin{align}
\label{eq:sample}
f(x) = x^2
\end{align}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;#34;outline-container-headline-6&amp;#34; class=&amp;#34;outline-2&amp;#34;&amp;gt;
&amp;lt;h2 id=&amp;#34;headline-6&amp;#34;&amp;gt;
table
&amp;lt;/h2&amp;gt;
&amp;lt;div id=&amp;#34;outline-text-headline-6&amp;#34; class=&amp;#34;outline-text-2&amp;#34;&amp;gt;
&amp;lt;figure&amp;gt;
&amp;lt;table&amp;gt;
&amp;lt;thead&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;th class=&amp;#34;align-right&amp;#34;&amp;gt;aaaaaaaa&amp;lt;/th&amp;gt;
&amp;lt;th class=&amp;#34;align-right&amp;#34;&amp;gt;bb&amp;lt;/th&amp;gt;
&amp;lt;th class=&amp;#34;align-right&amp;#34;&amp;gt;c&amp;lt;/th&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/thead&amp;gt;
&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td class=&amp;#34;align-right&amp;#34;&amp;gt;1&amp;lt;/td&amp;gt;
&amp;lt;td class=&amp;#34;align-right&amp;#34;&amp;gt;2&amp;lt;/td&amp;gt;
&amp;lt;td class=&amp;#34;align-right&amp;#34;&amp;gt;3&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td class=&amp;#34;align-right&amp;#34;&amp;gt;4&amp;lt;/td&amp;gt;
&amp;lt;td class=&amp;#34;align-right&amp;#34;&amp;gt;5&amp;lt;/td&amp;gt;
&amp;lt;td class=&amp;#34;align-right&amp;#34;&amp;gt;6&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;figcaption&amp;gt;
caption for table 1.
&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;p&amp;gt;
Eq. \eqref{eq:sample} $x^2$&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
a&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
a&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
a&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
a&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
a&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
a&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
a&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
a&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
a&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
a&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;
Table &amp;lt;a href=&amp;#34;tab:1&amp;#34;&amp;gt;tab:1&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;#34;footnotes&amp;#34;&amp;gt;
&amp;lt;hr class=&amp;#34;footnotes-separatator&amp;#34;&amp;gt;
&amp;lt;div class=&amp;#34;footnote-definitions&amp;#34;&amp;gt;
&amp;lt;div class=&amp;#34;footnote-definition&amp;#34;&amp;gt;
&amp;lt;sup id=&amp;#34;footnote-1&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;#footnote-reference-1&amp;#34;&amp;gt;1&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;
&amp;lt;div class=&amp;#34;footnote-body&amp;#34;&amp;gt;
&amp;lt;p&amp;gt;foo&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;#34;footnote-definition&amp;#34;&amp;gt;
&amp;lt;sup id=&amp;#34;footnote-2&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;#footnote-reference-2&amp;#34;&amp;gt;2&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;
&amp;lt;div class=&amp;#34;footnote-body&amp;#34;&amp;gt;
&amp;lt;p&amp;gt;this is the inline footnote &amp;lt;a href=&amp;#34;https://orgmode.org/manual/Creating-Footnotes.html&amp;#34;&amp;gt;https://orgmode.org/manual/Creating-Footnotes.html&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;</content></entry><entry><title>about</title><link href="https://klknn.github.io/about/"/><id>https://klknn.github.io/about/</id><published>0001-01-01T00:00:00+0000</published><updated>0001-01-01T00:00:00+0000</updated><summary type="html">name: klknn https://github.com/klknn...</summary><content type="html">&amp;lt;p&amp;gt;
name: klknn
&amp;lt;a href=&amp;#34;https://github.com/klknn&amp;#34;&amp;gt;https://github.com/klknn&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</content></entry></feed>